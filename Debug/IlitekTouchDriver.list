
IlitekTouchDriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000420c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a8  080042cc  080042cc  000052cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004474  08004474  00006074  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08004474  08004474  00006074  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08004474  08004474  00006074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004474  08004474  00005474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004478  08004478  00005478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  0800447c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000450  20000074  080044f0  00006074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004c4  080044f0  000064c4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00006074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a1bd  00000000  00000000  0000609c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024b1  00000000  00000000  00010259  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a68  00000000  00000000  00012710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007d1  00000000  00000000  00013178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013897  00000000  00000000  00013949  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f491  00000000  00000000  000271e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006f150  00000000  00000000  00036671  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a57c1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a20  00000000  00000000  000a5804  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000a8224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000074 	.word	0x20000074
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080042b4 	.word	0x080042b4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000078 	.word	0x20000078
 8000104:	080042b4 	.word	0x080042b4

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <MX_ADC_Init>:
ADC_HandleTypeDef hadc;
DMA_HandleTypeDef hdma_adc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b082      	sub	sp, #8
 8000238:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800023a:	003b      	movs	r3, r7
 800023c:	0018      	movs	r0, r3
 800023e:	2308      	movs	r3, #8
 8000240:	001a      	movs	r2, r3
 8000242:	2100      	movs	r1, #0
 8000244:	f003 f9f6 	bl	8003634 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000248:	4b2a      	ldr	r3, [pc, #168]	@ (80002f4 <MX_ADC_Init+0xc0>)
 800024a:	4a2b      	ldr	r2, [pc, #172]	@ (80002f8 <MX_ADC_Init+0xc4>)
 800024c:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 800024e:	4b29      	ldr	r3, [pc, #164]	@ (80002f4 <MX_ADC_Init+0xc0>)
 8000250:	2200      	movs	r2, #0
 8000252:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8000254:	4b27      	ldr	r3, [pc, #156]	@ (80002f4 <MX_ADC_Init+0xc0>)
 8000256:	22c0      	movs	r2, #192	@ 0xc0
 8000258:	0612      	lsls	r2, r2, #24
 800025a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800025c:	4b25      	ldr	r3, [pc, #148]	@ (80002f4 <MX_ADC_Init+0xc0>)
 800025e:	2200      	movs	r2, #0
 8000260:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_160CYCLES_5;
 8000262:	4b24      	ldr	r3, [pc, #144]	@ (80002f4 <MX_ADC_Init+0xc0>)
 8000264:	2207      	movs	r2, #7
 8000266:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000268:	4b22      	ldr	r3, [pc, #136]	@ (80002f4 <MX_ADC_Init+0xc0>)
 800026a:	2201      	movs	r2, #1
 800026c:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800026e:	4b21      	ldr	r3, [pc, #132]	@ (80002f4 <MX_ADC_Init+0xc0>)
 8000270:	2200      	movs	r2, #0
 8000272:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000274:	4b1f      	ldr	r3, [pc, #124]	@ (80002f4 <MX_ADC_Init+0xc0>)
 8000276:	2220      	movs	r2, #32
 8000278:	2100      	movs	r1, #0
 800027a:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800027c:	4b1d      	ldr	r3, [pc, #116]	@ (80002f4 <MX_ADC_Init+0xc0>)
 800027e:	2221      	movs	r2, #33	@ 0x21
 8000280:	2100      	movs	r1, #0
 8000282:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000284:	4b1b      	ldr	r3, [pc, #108]	@ (80002f4 <MX_ADC_Init+0xc0>)
 8000286:	2200      	movs	r2, #0
 8000288:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800028a:	4b1a      	ldr	r3, [pc, #104]	@ (80002f4 <MX_ADC_Init+0xc0>)
 800028c:	22c2      	movs	r2, #194	@ 0xc2
 800028e:	32ff      	adds	r2, #255	@ 0xff
 8000290:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000292:	4b18      	ldr	r3, [pc, #96]	@ (80002f4 <MX_ADC_Init+0xc0>)
 8000294:	222c      	movs	r2, #44	@ 0x2c
 8000296:	2100      	movs	r1, #0
 8000298:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800029a:	4b16      	ldr	r3, [pc, #88]	@ (80002f4 <MX_ADC_Init+0xc0>)
 800029c:	2204      	movs	r2, #4
 800029e:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80002a0:	4b14      	ldr	r3, [pc, #80]	@ (80002f4 <MX_ADC_Init+0xc0>)
 80002a2:	2200      	movs	r2, #0
 80002a4:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 80002a6:	4b13      	ldr	r3, [pc, #76]	@ (80002f4 <MX_ADC_Init+0xc0>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 80002ac:	4b11      	ldr	r3, [pc, #68]	@ (80002f4 <MX_ADC_Init+0xc0>)
 80002ae:	2200      	movs	r2, #0
 80002b0:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80002b2:	4b10      	ldr	r3, [pc, #64]	@ (80002f4 <MX_ADC_Init+0xc0>)
 80002b4:	2200      	movs	r2, #0
 80002b6:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80002b8:	4b0e      	ldr	r3, [pc, #56]	@ (80002f4 <MX_ADC_Init+0xc0>)
 80002ba:	0018      	movs	r0, r3
 80002bc:	f000 ff50 	bl	8001160 <HAL_ADC_Init>
 80002c0:	1e03      	subs	r3, r0, #0
 80002c2:	d001      	beq.n	80002c8 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 80002c4:	f000 fac8 	bl	8000858 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80002c8:	003b      	movs	r3, r7
 80002ca:	4a0c      	ldr	r2, [pc, #48]	@ (80002fc <MX_ADC_Init+0xc8>)
 80002cc:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80002ce:	003b      	movs	r3, r7
 80002d0:	2280      	movs	r2, #128	@ 0x80
 80002d2:	0152      	lsls	r2, r2, #5
 80002d4:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80002d6:	003a      	movs	r2, r7
 80002d8:	4b06      	ldr	r3, [pc, #24]	@ (80002f4 <MX_ADC_Init+0xc0>)
 80002da:	0011      	movs	r1, r2
 80002dc:	0018      	movs	r0, r3
 80002de:	f001 f8b3 	bl	8001448 <HAL_ADC_ConfigChannel>
 80002e2:	1e03      	subs	r3, r0, #0
 80002e4:	d001      	beq.n	80002ea <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 80002e6:	f000 fab7 	bl	8000858 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80002ea:	46c0      	nop			@ (mov r8, r8)
 80002ec:	46bd      	mov	sp, r7
 80002ee:	b002      	add	sp, #8
 80002f0:	bd80      	pop	{r7, pc}
 80002f2:	46c0      	nop			@ (mov r8, r8)
 80002f4:	20000090 	.word	0x20000090
 80002f8:	40012400 	.word	0x40012400
 80002fc:	04000002 	.word	0x04000002

08000300 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000300:	b590      	push	{r4, r7, lr}
 8000302:	b089      	sub	sp, #36	@ 0x24
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000308:	240c      	movs	r4, #12
 800030a:	193b      	adds	r3, r7, r4
 800030c:	0018      	movs	r0, r3
 800030e:	2314      	movs	r3, #20
 8000310:	001a      	movs	r2, r3
 8000312:	2100      	movs	r1, #0
 8000314:	f003 f98e 	bl	8003634 <memset>
  if(adcHandle->Instance==ADC1)
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	4a2a      	ldr	r2, [pc, #168]	@ (80003c8 <HAL_ADC_MspInit+0xc8>)
 800031e:	4293      	cmp	r3, r2
 8000320:	d14d      	bne.n	80003be <HAL_ADC_MspInit+0xbe>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000322:	4b2a      	ldr	r3, [pc, #168]	@ (80003cc <HAL_ADC_MspInit+0xcc>)
 8000324:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000326:	4b29      	ldr	r3, [pc, #164]	@ (80003cc <HAL_ADC_MspInit+0xcc>)
 8000328:	2180      	movs	r1, #128	@ 0x80
 800032a:	0089      	lsls	r1, r1, #2
 800032c:	430a      	orrs	r2, r1
 800032e:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000330:	4b26      	ldr	r3, [pc, #152]	@ (80003cc <HAL_ADC_MspInit+0xcc>)
 8000332:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000334:	4b25      	ldr	r3, [pc, #148]	@ (80003cc <HAL_ADC_MspInit+0xcc>)
 8000336:	2101      	movs	r1, #1
 8000338:	430a      	orrs	r2, r1
 800033a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800033c:	4b23      	ldr	r3, [pc, #140]	@ (80003cc <HAL_ADC_MspInit+0xcc>)
 800033e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000340:	2201      	movs	r2, #1
 8000342:	4013      	ands	r3, r2
 8000344:	60bb      	str	r3, [r7, #8]
 8000346:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = Battery_Pin;
 8000348:	193b      	adds	r3, r7, r4
 800034a:	2202      	movs	r2, #2
 800034c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800034e:	193b      	adds	r3, r7, r4
 8000350:	2203      	movs	r2, #3
 8000352:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000354:	193b      	adds	r3, r7, r4
 8000356:	2200      	movs	r2, #0
 8000358:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(Battery_GPIO_Port, &GPIO_InitStruct);
 800035a:	193a      	adds	r2, r7, r4
 800035c:	23a0      	movs	r3, #160	@ 0xa0
 800035e:	05db      	lsls	r3, r3, #23
 8000360:	0011      	movs	r1, r2
 8000362:	0018      	movs	r0, r3
 8000364:	f001 fb1a 	bl	800199c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8000368:	4b19      	ldr	r3, [pc, #100]	@ (80003d0 <HAL_ADC_MspInit+0xd0>)
 800036a:	4a1a      	ldr	r2, [pc, #104]	@ (80003d4 <HAL_ADC_MspInit+0xd4>)
 800036c:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Request = DMA_REQUEST_0;
 800036e:	4b18      	ldr	r3, [pc, #96]	@ (80003d0 <HAL_ADC_MspInit+0xd0>)
 8000370:	2200      	movs	r2, #0
 8000372:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000374:	4b16      	ldr	r3, [pc, #88]	@ (80003d0 <HAL_ADC_MspInit+0xd0>)
 8000376:	2200      	movs	r2, #0
 8000378:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 800037a:	4b15      	ldr	r3, [pc, #84]	@ (80003d0 <HAL_ADC_MspInit+0xd0>)
 800037c:	2200      	movs	r2, #0
 800037e:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8000380:	4b13      	ldr	r3, [pc, #76]	@ (80003d0 <HAL_ADC_MspInit+0xd0>)
 8000382:	2280      	movs	r2, #128	@ 0x80
 8000384:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000386:	4b12      	ldr	r3, [pc, #72]	@ (80003d0 <HAL_ADC_MspInit+0xd0>)
 8000388:	2280      	movs	r2, #128	@ 0x80
 800038a:	0052      	lsls	r2, r2, #1
 800038c:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800038e:	4b10      	ldr	r3, [pc, #64]	@ (80003d0 <HAL_ADC_MspInit+0xd0>)
 8000390:	2280      	movs	r2, #128	@ 0x80
 8000392:	00d2      	lsls	r2, r2, #3
 8000394:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Mode = DMA_NORMAL;
 8000396:	4b0e      	ldr	r3, [pc, #56]	@ (80003d0 <HAL_ADC_MspInit+0xd0>)
 8000398:	2200      	movs	r2, #0
 800039a:	61da      	str	r2, [r3, #28]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 800039c:	4b0c      	ldr	r3, [pc, #48]	@ (80003d0 <HAL_ADC_MspInit+0xd0>)
 800039e:	2200      	movs	r2, #0
 80003a0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80003a2:	4b0b      	ldr	r3, [pc, #44]	@ (80003d0 <HAL_ADC_MspInit+0xd0>)
 80003a4:	0018      	movs	r0, r3
 80003a6:	f001 f9d3 	bl	8001750 <HAL_DMA_Init>
 80003aa:	1e03      	subs	r3, r0, #0
 80003ac:	d001      	beq.n	80003b2 <HAL_ADC_MspInit+0xb2>
    {
      Error_Handler();
 80003ae:	f000 fa53 	bl	8000858 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc);
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	4a06      	ldr	r2, [pc, #24]	@ (80003d0 <HAL_ADC_MspInit+0xd0>)
 80003b6:	64da      	str	r2, [r3, #76]	@ 0x4c
 80003b8:	4b05      	ldr	r3, [pc, #20]	@ (80003d0 <HAL_ADC_MspInit+0xd0>)
 80003ba:	687a      	ldr	r2, [r7, #4]
 80003bc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80003be:	46c0      	nop			@ (mov r8, r8)
 80003c0:	46bd      	mov	sp, r7
 80003c2:	b009      	add	sp, #36	@ 0x24
 80003c4:	bd90      	pop	{r4, r7, pc}
 80003c6:	46c0      	nop			@ (mov r8, r8)
 80003c8:	40012400 	.word	0x40012400
 80003cc:	40021000 	.word	0x40021000
 80003d0:	200000ec 	.word	0x200000ec
 80003d4:	40020008 	.word	0x40020008

080003d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b082      	sub	sp, #8
 80003dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80003de:	4b0c      	ldr	r3, [pc, #48]	@ (8000410 <MX_DMA_Init+0x38>)
 80003e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80003e2:	4b0b      	ldr	r3, [pc, #44]	@ (8000410 <MX_DMA_Init+0x38>)
 80003e4:	2101      	movs	r1, #1
 80003e6:	430a      	orrs	r2, r1
 80003e8:	631a      	str	r2, [r3, #48]	@ 0x30
 80003ea:	4b09      	ldr	r3, [pc, #36]	@ (8000410 <MX_DMA_Init+0x38>)
 80003ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003ee:	2201      	movs	r2, #1
 80003f0:	4013      	ands	r3, r2
 80003f2:	607b      	str	r3, [r7, #4]
 80003f4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80003f6:	2200      	movs	r2, #0
 80003f8:	2100      	movs	r1, #0
 80003fa:	2009      	movs	r0, #9
 80003fc:	f001 f976 	bl	80016ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000400:	2009      	movs	r0, #9
 8000402:	f001 f988 	bl	8001716 <HAL_NVIC_EnableIRQ>

}
 8000406:	46c0      	nop			@ (mov r8, r8)
 8000408:	46bd      	mov	sp, r7
 800040a:	b002      	add	sp, #8
 800040c:	bd80      	pop	{r7, pc}
 800040e:	46c0      	nop			@ (mov r8, r8)
 8000410:	40021000 	.word	0x40021000

08000414 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000414:	b590      	push	{r4, r7, lr}
 8000416:	b089      	sub	sp, #36	@ 0x24
 8000418:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800041a:	240c      	movs	r4, #12
 800041c:	193b      	adds	r3, r7, r4
 800041e:	0018      	movs	r0, r3
 8000420:	2314      	movs	r3, #20
 8000422:	001a      	movs	r2, r3
 8000424:	2100      	movs	r1, #0
 8000426:	f003 f905 	bl	8003634 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800042a:	4b3d      	ldr	r3, [pc, #244]	@ (8000520 <MX_GPIO_Init+0x10c>)
 800042c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800042e:	4b3c      	ldr	r3, [pc, #240]	@ (8000520 <MX_GPIO_Init+0x10c>)
 8000430:	2101      	movs	r1, #1
 8000432:	430a      	orrs	r2, r1
 8000434:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000436:	4b3a      	ldr	r3, [pc, #232]	@ (8000520 <MX_GPIO_Init+0x10c>)
 8000438:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800043a:	2201      	movs	r2, #1
 800043c:	4013      	ands	r3, r2
 800043e:	60bb      	str	r3, [r7, #8]
 8000440:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000442:	4b37      	ldr	r3, [pc, #220]	@ (8000520 <MX_GPIO_Init+0x10c>)
 8000444:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000446:	4b36      	ldr	r3, [pc, #216]	@ (8000520 <MX_GPIO_Init+0x10c>)
 8000448:	2102      	movs	r1, #2
 800044a:	430a      	orrs	r2, r1
 800044c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800044e:	4b34      	ldr	r3, [pc, #208]	@ (8000520 <MX_GPIO_Init+0x10c>)
 8000450:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000452:	2202      	movs	r2, #2
 8000454:	4013      	ands	r3, r2
 8000456:	607b      	str	r3, [r7, #4]
 8000458:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SecondaryAlarmTrigger_Pin|BoardPowerControl_Pin|Wake_Pin|AlarmDONE_Pin
 800045a:	4932      	ldr	r1, [pc, #200]	@ (8000524 <MX_GPIO_Init+0x110>)
 800045c:	23a0      	movs	r3, #160	@ 0xa0
 800045e:	05db      	lsls	r3, r3, #23
 8000460:	2200      	movs	r2, #0
 8000462:	0018      	movs	r0, r3
 8000464:	f001 fc10 	bl	8001c88 <HAL_GPIO_WritePin>
                          |SecondaryAlarmOverride_Pin|STM32H7_Wake_UP_Pin|RST_TP_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BatteryChargeEnable_GPIO_Port, BatteryChargeEnable_Pin, GPIO_PIN_RESET);
 8000468:	4b2f      	ldr	r3, [pc, #188]	@ (8000528 <MX_GPIO_Init+0x114>)
 800046a:	2200      	movs	r2, #0
 800046c:	2120      	movs	r1, #32
 800046e:	0018      	movs	r0, r3
 8000470:	f001 fc0a 	bl	8001c88 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SecondaryAlarmTrigger_Pin BoardPowerControl_Pin Wake_Pin AlarmDONE_Pin
                           SecondaryAlarmOverride_Pin STM32H7_Wake_UP_Pin RST_TP_Pin */
  GPIO_InitStruct.Pin = SecondaryAlarmTrigger_Pin|BoardPowerControl_Pin|Wake_Pin|AlarmDONE_Pin
 8000474:	193b      	adds	r3, r7, r4
 8000476:	4a2b      	ldr	r2, [pc, #172]	@ (8000524 <MX_GPIO_Init+0x110>)
 8000478:	601a      	str	r2, [r3, #0]
                          |SecondaryAlarmOverride_Pin|STM32H7_Wake_UP_Pin|RST_TP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800047a:	193b      	adds	r3, r7, r4
 800047c:	2201      	movs	r2, #1
 800047e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000480:	193b      	adds	r3, r7, r4
 8000482:	2200      	movs	r2, #0
 8000484:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000486:	193b      	adds	r3, r7, r4
 8000488:	2200      	movs	r2, #0
 800048a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800048c:	193a      	adds	r2, r7, r4
 800048e:	23a0      	movs	r3, #160	@ 0xa0
 8000490:	05db      	lsls	r3, r3, #23
 8000492:	0011      	movs	r1, r2
 8000494:	0018      	movs	r0, r3
 8000496:	f001 fa81 	bl	800199c <HAL_GPIO_Init>

  /*Configure GPIO pin : BackupMonitor_Pin */
  GPIO_InitStruct.Pin = BackupMonitor_Pin;
 800049a:	193b      	adds	r3, r7, r4
 800049c:	2280      	movs	r2, #128	@ 0x80
 800049e:	0112      	lsls	r2, r2, #4
 80004a0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004a2:	193b      	adds	r3, r7, r4
 80004a4:	2200      	movs	r2, #0
 80004a6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a8:	193b      	adds	r3, r7, r4
 80004aa:	2200      	movs	r2, #0
 80004ac:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BackupMonitor_GPIO_Port, &GPIO_InitStruct);
 80004ae:	193a      	adds	r2, r7, r4
 80004b0:	23a0      	movs	r3, #160	@ 0xa0
 80004b2:	05db      	lsls	r3, r3, #23
 80004b4:	0011      	movs	r1, r2
 80004b6:	0018      	movs	r0, r3
 80004b8:	f001 fa70 	bl	800199c <HAL_GPIO_Init>

  /*Configure GPIO pin : INT_TP_Pin */
  GPIO_InitStruct.Pin = INT_TP_Pin;
 80004bc:	0021      	movs	r1, r4
 80004be:	187b      	adds	r3, r7, r1
 80004c0:	2208      	movs	r2, #8
 80004c2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80004c4:	187b      	adds	r3, r7, r1
 80004c6:	2284      	movs	r2, #132	@ 0x84
 80004c8:	0392      	lsls	r2, r2, #14
 80004ca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004cc:	187b      	adds	r3, r7, r1
 80004ce:	2201      	movs	r2, #1
 80004d0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(INT_TP_GPIO_Port, &GPIO_InitStruct);
 80004d2:	000c      	movs	r4, r1
 80004d4:	187b      	adds	r3, r7, r1
 80004d6:	4a14      	ldr	r2, [pc, #80]	@ (8000528 <MX_GPIO_Init+0x114>)
 80004d8:	0019      	movs	r1, r3
 80004da:	0010      	movs	r0, r2
 80004dc:	f001 fa5e 	bl	800199c <HAL_GPIO_Init>

  /*Configure GPIO pin : BatteryChargeEnable_Pin */
  GPIO_InitStruct.Pin = BatteryChargeEnable_Pin;
 80004e0:	0021      	movs	r1, r4
 80004e2:	187b      	adds	r3, r7, r1
 80004e4:	2220      	movs	r2, #32
 80004e6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004e8:	187b      	adds	r3, r7, r1
 80004ea:	2201      	movs	r2, #1
 80004ec:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ee:	187b      	adds	r3, r7, r1
 80004f0:	2200      	movs	r2, #0
 80004f2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004f4:	187b      	adds	r3, r7, r1
 80004f6:	2200      	movs	r2, #0
 80004f8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(BatteryChargeEnable_GPIO_Port, &GPIO_InitStruct);
 80004fa:	187b      	adds	r3, r7, r1
 80004fc:	4a0a      	ldr	r2, [pc, #40]	@ (8000528 <MX_GPIO_Init+0x114>)
 80004fe:	0019      	movs	r1, r3
 8000500:	0010      	movs	r0, r2
 8000502:	f001 fa4b 	bl	800199c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8000506:	2200      	movs	r2, #0
 8000508:	2100      	movs	r1, #0
 800050a:	2006      	movs	r0, #6
 800050c:	f001 f8ee 	bl	80016ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8000510:	2006      	movs	r0, #6
 8000512:	f001 f900 	bl	8001716 <HAL_NVIC_EnableIRQ>

}
 8000516:	46c0      	nop			@ (mov r8, r8)
 8000518:	46bd      	mov	sp, r7
 800051a:	b009      	add	sp, #36	@ 0x24
 800051c:	bd90      	pop	{r4, r7, pc}
 800051e:	46c0      	nop			@ (mov r8, r8)
 8000520:	40021000 	.word	0x40021000
 8000524:	00009748 	.word	0x00009748
 8000528:	50000400 	.word	0x50000400

0800052c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000530:	4b1b      	ldr	r3, [pc, #108]	@ (80005a0 <MX_I2C1_Init+0x74>)
 8000532:	4a1c      	ldr	r2, [pc, #112]	@ (80005a4 <MX_I2C1_Init+0x78>)
 8000534:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 8000536:	4b1a      	ldr	r3, [pc, #104]	@ (80005a0 <MX_I2C1_Init+0x74>)
 8000538:	4a1b      	ldr	r2, [pc, #108]	@ (80005a8 <MX_I2C1_Init+0x7c>)
 800053a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800053c:	4b18      	ldr	r3, [pc, #96]	@ (80005a0 <MX_I2C1_Init+0x74>)
 800053e:	2200      	movs	r2, #0
 8000540:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000542:	4b17      	ldr	r3, [pc, #92]	@ (80005a0 <MX_I2C1_Init+0x74>)
 8000544:	2201      	movs	r2, #1
 8000546:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000548:	4b15      	ldr	r3, [pc, #84]	@ (80005a0 <MX_I2C1_Init+0x74>)
 800054a:	2200      	movs	r2, #0
 800054c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800054e:	4b14      	ldr	r3, [pc, #80]	@ (80005a0 <MX_I2C1_Init+0x74>)
 8000550:	2200      	movs	r2, #0
 8000552:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000554:	4b12      	ldr	r3, [pc, #72]	@ (80005a0 <MX_I2C1_Init+0x74>)
 8000556:	2200      	movs	r2, #0
 8000558:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800055a:	4b11      	ldr	r3, [pc, #68]	@ (80005a0 <MX_I2C1_Init+0x74>)
 800055c:	2200      	movs	r2, #0
 800055e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000560:	4b0f      	ldr	r3, [pc, #60]	@ (80005a0 <MX_I2C1_Init+0x74>)
 8000562:	2200      	movs	r2, #0
 8000564:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000566:	4b0e      	ldr	r3, [pc, #56]	@ (80005a0 <MX_I2C1_Init+0x74>)
 8000568:	0018      	movs	r0, r3
 800056a:	f001 fbc7 	bl	8001cfc <HAL_I2C_Init>
 800056e:	1e03      	subs	r3, r0, #0
 8000570:	d001      	beq.n	8000576 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000572:	f000 f971 	bl	8000858 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000576:	4b0a      	ldr	r3, [pc, #40]	@ (80005a0 <MX_I2C1_Init+0x74>)
 8000578:	2100      	movs	r1, #0
 800057a:	0018      	movs	r0, r3
 800057c:	f002 f830 	bl	80025e0 <HAL_I2CEx_ConfigAnalogFilter>
 8000580:	1e03      	subs	r3, r0, #0
 8000582:	d001      	beq.n	8000588 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000584:	f000 f968 	bl	8000858 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000588:	4b05      	ldr	r3, [pc, #20]	@ (80005a0 <MX_I2C1_Init+0x74>)
 800058a:	2100      	movs	r1, #0
 800058c:	0018      	movs	r0, r3
 800058e:	f002 f873 	bl	8002678 <HAL_I2CEx_ConfigDigitalFilter>
 8000592:	1e03      	subs	r3, r0, #0
 8000594:	d001      	beq.n	800059a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000596:	f000 f95f 	bl	8000858 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800059a:	46c0      	nop			@ (mov r8, r8)
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	20000134 	.word	0x20000134
 80005a4:	40005400 	.word	0x40005400
 80005a8:	00503d58 	.word	0x00503d58

080005ac <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80005ac:	b590      	push	{r4, r7, lr}
 80005ae:	b089      	sub	sp, #36	@ 0x24
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b4:	240c      	movs	r4, #12
 80005b6:	193b      	adds	r3, r7, r4
 80005b8:	0018      	movs	r0, r3
 80005ba:	2314      	movs	r3, #20
 80005bc:	001a      	movs	r2, r3
 80005be:	2100      	movs	r1, #0
 80005c0:	f003 f838 	bl	8003634 <memset>
  if(i2cHandle->Instance==I2C1)
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a17      	ldr	r2, [pc, #92]	@ (8000628 <HAL_I2C_MspInit+0x7c>)
 80005ca:	4293      	cmp	r3, r2
 80005cc:	d128      	bne.n	8000620 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ce:	4b17      	ldr	r3, [pc, #92]	@ (800062c <HAL_I2C_MspInit+0x80>)
 80005d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80005d2:	4b16      	ldr	r3, [pc, #88]	@ (800062c <HAL_I2C_MspInit+0x80>)
 80005d4:	2102      	movs	r1, #2
 80005d6:	430a      	orrs	r2, r1
 80005d8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80005da:	4b14      	ldr	r3, [pc, #80]	@ (800062c <HAL_I2C_MspInit+0x80>)
 80005dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80005de:	2202      	movs	r2, #2
 80005e0:	4013      	ands	r3, r2
 80005e2:	60bb      	str	r3, [r7, #8]
 80005e4:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80005e6:	0021      	movs	r1, r4
 80005e8:	187b      	adds	r3, r7, r1
 80005ea:	22c0      	movs	r2, #192	@ 0xc0
 80005ec:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80005ee:	187b      	adds	r3, r7, r1
 80005f0:	2212      	movs	r2, #18
 80005f2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f4:	187b      	adds	r3, r7, r1
 80005f6:	2200      	movs	r2, #0
 80005f8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005fa:	187b      	adds	r3, r7, r1
 80005fc:	2203      	movs	r2, #3
 80005fe:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000600:	187b      	adds	r3, r7, r1
 8000602:	2201      	movs	r2, #1
 8000604:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000606:	187b      	adds	r3, r7, r1
 8000608:	4a09      	ldr	r2, [pc, #36]	@ (8000630 <HAL_I2C_MspInit+0x84>)
 800060a:	0019      	movs	r1, r3
 800060c:	0010      	movs	r0, r2
 800060e:	f001 f9c5 	bl	800199c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000612:	4b06      	ldr	r3, [pc, #24]	@ (800062c <HAL_I2C_MspInit+0x80>)
 8000614:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000616:	4b05      	ldr	r3, [pc, #20]	@ (800062c <HAL_I2C_MspInit+0x80>)
 8000618:	2180      	movs	r1, #128	@ 0x80
 800061a:	0389      	lsls	r1, r1, #14
 800061c:	430a      	orrs	r2, r1
 800061e:	639a      	str	r2, [r3, #56]	@ 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000620:	46c0      	nop			@ (mov r8, r8)
 8000622:	46bd      	mov	sp, r7
 8000624:	b009      	add	sp, #36	@ 0x24
 8000626:	bd90      	pop	{r4, r7, pc}
 8000628:	40005400 	.word	0x40005400
 800062c:	40021000 	.word	0x40021000
 8000630:	50000400 	.word	0x50000400

08000634 <onTouchDown>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void onTouchDown(const TouchEvent* evt, const TouchButtonInfo* info) {
 8000634:	b590      	push	{r4, r7, lr}
 8000636:	b085      	sub	sp, #20
 8000638:	af02      	add	r7, sp, #8
 800063a:	6078      	str	r0, [r7, #4]
 800063c:	6039      	str	r1, [r7, #0]
    printf("[DOWN] Button %d (%s) at (%u, %u)\n", info->id, info->label, evt->x, evt->y);
 800063e:	683b      	ldr	r3, [r7, #0]
 8000640:	6819      	ldr	r1, [r3, #0]
 8000642:	683b      	ldr	r3, [r7, #0]
 8000644:	685a      	ldr	r2, [r3, #4]
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	881b      	ldrh	r3, [r3, #0]
 800064a:	001c      	movs	r4, r3
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	885b      	ldrh	r3, [r3, #2]
 8000650:	4804      	ldr	r0, [pc, #16]	@ (8000664 <onTouchDown+0x30>)
 8000652:	9300      	str	r3, [sp, #0]
 8000654:	0023      	movs	r3, r4
 8000656:	f002 ff91 	bl	800357c <iprintf>
}
 800065a:	46c0      	nop			@ (mov r8, r8)
 800065c:	46bd      	mov	sp, r7
 800065e:	b003      	add	sp, #12
 8000660:	bd90      	pop	{r4, r7, pc}
 8000662:	46c0      	nop			@ (mov r8, r8)
 8000664:	080042cc 	.word	0x080042cc

08000668 <onTouchUp>:

void onTouchUp(const TouchEvent* evt, const TouchButtonInfo* info) {
 8000668:	b590      	push	{r4, r7, lr}
 800066a:	b085      	sub	sp, #20
 800066c:	af02      	add	r7, sp, #8
 800066e:	6078      	str	r0, [r7, #4]
 8000670:	6039      	str	r1, [r7, #0]
    printf("[UP] Button %d (%s) at (%u, %u)\n", info->id, info->label, evt->x, evt->y);
 8000672:	683b      	ldr	r3, [r7, #0]
 8000674:	6819      	ldr	r1, [r3, #0]
 8000676:	683b      	ldr	r3, [r7, #0]
 8000678:	685a      	ldr	r2, [r3, #4]
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	881b      	ldrh	r3, [r3, #0]
 800067e:	001c      	movs	r4, r3
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	885b      	ldrh	r3, [r3, #2]
 8000684:	4804      	ldr	r0, [pc, #16]	@ (8000698 <onTouchUp+0x30>)
 8000686:	9300      	str	r3, [sp, #0]
 8000688:	0023      	movs	r3, r4
 800068a:	f002 ff77 	bl	800357c <iprintf>
}
 800068e:	46c0      	nop			@ (mov r8, r8)
 8000690:	46bd      	mov	sp, r7
 8000692:	b003      	add	sp, #12
 8000694:	bd90      	pop	{r4, r7, pc}
 8000696:	46c0      	nop			@ (mov r8, r8)
 8000698:	080042f0 	.word	0x080042f0

0800069c <onTouchHold>:

void onTouchHold(const TouchEvent* evt, const TouchButtonInfo* info) {
 800069c:	b590      	push	{r4, r7, lr}
 800069e:	b085      	sub	sp, #20
 80006a0:	af02      	add	r7, sp, #8
 80006a2:	6078      	str	r0, [r7, #4]
 80006a4:	6039      	str	r1, [r7, #0]
    printf("[HOLD] Button %d (%s) held at (%u, %u)\n", info->id, info->label, evt->x, evt->y);
 80006a6:	683b      	ldr	r3, [r7, #0]
 80006a8:	6819      	ldr	r1, [r3, #0]
 80006aa:	683b      	ldr	r3, [r7, #0]
 80006ac:	685a      	ldr	r2, [r3, #4]
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	881b      	ldrh	r3, [r3, #0]
 80006b2:	001c      	movs	r4, r3
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	885b      	ldrh	r3, [r3, #2]
 80006b8:	480f      	ldr	r0, [pc, #60]	@ (80006f8 <onTouchHold+0x5c>)
 80006ba:	9300      	str	r3, [sp, #0]
 80006bc:	0023      	movs	r3, r4
 80006be:	f002 ff5d 	bl	800357c <iprintf>

    if (info->id == 5) {
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	2b05      	cmp	r3, #5
 80006c8:	d107      	bne.n	80006da <onTouchHold+0x3e>
    	HAL_GPIO_WritePin(BoardPowerControl_GPIO_Port, BoardPowerControl_Pin, GPIO_PIN_SET);
 80006ca:	23a0      	movs	r3, #160	@ 0xa0
 80006cc:	05db      	lsls	r3, r3, #23
 80006ce:	2201      	movs	r2, #1
 80006d0:	2140      	movs	r1, #64	@ 0x40
 80006d2:	0018      	movs	r0, r3
 80006d4:	f001 fad8 	bl	8001c88 <HAL_GPIO_WritePin>
    } else if (info->id == 6) {
    	HAL_GPIO_WritePin(BoardPowerControl_GPIO_Port, BoardPowerControl_Pin, GPIO_PIN_RESET);
    }
}
 80006d8:	e00a      	b.n	80006f0 <onTouchHold+0x54>
    } else if (info->id == 6) {
 80006da:	683b      	ldr	r3, [r7, #0]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	2b06      	cmp	r3, #6
 80006e0:	d106      	bne.n	80006f0 <onTouchHold+0x54>
    	HAL_GPIO_WritePin(BoardPowerControl_GPIO_Port, BoardPowerControl_Pin, GPIO_PIN_RESET);
 80006e2:	23a0      	movs	r3, #160	@ 0xa0
 80006e4:	05db      	lsls	r3, r3, #23
 80006e6:	2200      	movs	r2, #0
 80006e8:	2140      	movs	r1, #64	@ 0x40
 80006ea:	0018      	movs	r0, r3
 80006ec:	f001 facc 	bl	8001c88 <HAL_GPIO_WritePin>
}
 80006f0:	46c0      	nop			@ (mov r8, r8)
 80006f2:	46bd      	mov	sp, r7
 80006f4:	b003      	add	sp, #12
 80006f6:	bd90      	pop	{r4, r7, pc}
 80006f8:	08004314 	.word	0x08004314

080006fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006fc:	b590      	push	{r4, r7, lr}
 80006fe:	b08b      	sub	sp, #44	@ 0x2c
 8000700:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000702:	f000 fc99 	bl	8001038 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000706:	f000 f83f 	bl	8000788 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800070a:	f7ff fe83 	bl	8000414 <MX_GPIO_Init>
  MX_DMA_Init();
 800070e:	f7ff fe63 	bl	80003d8 <MX_DMA_Init>
  MX_ADC_Init();
 8000712:	f7ff fd8f 	bl	8000234 <MX_ADC_Init>
  MX_I2C1_Init();
 8000716:	f7ff ff09 	bl	800052c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  ILITEK_Init();
 800071a:	f000 f9f1 	bl	8000b00 <ILITEK_Init>

  GridLayout layout = {
 800071e:	1d3b      	adds	r3, r7, #4
 8000720:	4a12      	ldr	r2, [pc, #72]	@ (800076c <main+0x70>)
 8000722:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000724:	c313      	stmia	r3!, {r0, r1, r4}
 8000726:	8812      	ldrh	r2, [r2, #0]
 8000728:	801a      	strh	r2, [r3, #0]
		  { .id = 2, .label = "Cancel" },
		  { .id = 3, .label = "Apply" },
		  { .id = 4, .label = "Reset" }
  };

  const int size = sizeof(buttons) / sizeof(buttons[0]);
 800072a:	2304      	movs	r3, #4
 800072c:	617b      	str	r3, [r7, #20]

  ILITEK_CreateGridButtons(&layout, buttons, size, onTouchDown, onTouchUp, onTouchHold, 1000);
 800072e:	697b      	ldr	r3, [r7, #20]
 8000730:	b2da      	uxtb	r2, r3
 8000732:	4c0f      	ldr	r4, [pc, #60]	@ (8000770 <main+0x74>)
 8000734:	490f      	ldr	r1, [pc, #60]	@ (8000774 <main+0x78>)
 8000736:	1d38      	adds	r0, r7, #4
 8000738:	23fa      	movs	r3, #250	@ 0xfa
 800073a:	009b      	lsls	r3, r3, #2
 800073c:	9302      	str	r3, [sp, #8]
 800073e:	4b0e      	ldr	r3, [pc, #56]	@ (8000778 <main+0x7c>)
 8000740:	9301      	str	r3, [sp, #4]
 8000742:	4b0e      	ldr	r3, [pc, #56]	@ (800077c <main+0x80>)
 8000744:	9300      	str	r3, [sp, #0]
 8000746:	0023      	movs	r3, r4
 8000748:	f000 fb5e 	bl	8000e08 <ILITEK_CreateGridButtons>
  	.onTouchHold = onTouchHold,
  	.userContext = &btnTurnOFFInfo,
  	.active = true
  };

  ILITEK_RegisterRegionHandler(&btnTurnON);
 800074c:	4b0c      	ldr	r3, [pc, #48]	@ (8000780 <main+0x84>)
 800074e:	0018      	movs	r0, r3
 8000750:	f000 fa7e 	bl	8000c50 <ILITEK_RegisterRegionHandler>
  ILITEK_RegisterRegionHandler(&btnTurnOFF);
 8000754:	4b0b      	ldr	r3, [pc, #44]	@ (8000784 <main+0x88>)
 8000756:	0018      	movs	r0, r3
 8000758:	f000 fa7a 	bl	8000c50 <ILITEK_RegisterRegionHandler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ILITEK_PollTouchEvents();
 800075c:	f000 fab2 	bl	8000cc4 <ILITEK_PollTouchEvents>
	  HAL_Delay(10);
 8000760:	200a      	movs	r0, #10
 8000762:	f000 fcd9 	bl	8001118 <HAL_Delay>
	  ILITEK_PollTouchEvents();
 8000766:	46c0      	nop			@ (mov r8, r8)
 8000768:	e7f8      	b.n	800075c <main+0x60>
 800076a:	46c0      	nop			@ (mov r8, r8)
 800076c:	0800433c 	.word	0x0800433c
 8000770:	08000635 	.word	0x08000635
 8000774:	080043a8 	.word	0x080043a8
 8000778:	0800069d 	.word	0x0800069d
 800077c:	08000669 	.word	0x08000669
 8000780:	080043c8 	.word	0x080043c8
 8000784:	080043f0 	.word	0x080043f0

08000788 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000788:	b590      	push	{r4, r7, lr}
 800078a:	b09b      	sub	sp, #108	@ 0x6c
 800078c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800078e:	2434      	movs	r4, #52	@ 0x34
 8000790:	193b      	adds	r3, r7, r4
 8000792:	0018      	movs	r0, r3
 8000794:	2334      	movs	r3, #52	@ 0x34
 8000796:	001a      	movs	r2, r3
 8000798:	2100      	movs	r1, #0
 800079a:	f002 ff4b 	bl	8003634 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800079e:	2320      	movs	r3, #32
 80007a0:	18fb      	adds	r3, r7, r3
 80007a2:	0018      	movs	r0, r3
 80007a4:	2314      	movs	r3, #20
 80007a6:	001a      	movs	r2, r3
 80007a8:	2100      	movs	r1, #0
 80007aa:	f002 ff43 	bl	8003634 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007ae:	1d3b      	adds	r3, r7, #4
 80007b0:	0018      	movs	r0, r3
 80007b2:	231c      	movs	r3, #28
 80007b4:	001a      	movs	r2, r3
 80007b6:	2100      	movs	r1, #0
 80007b8:	f002 ff3c 	bl	8003634 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007bc:	4b24      	ldr	r3, [pc, #144]	@ (8000850 <SystemClock_Config+0xc8>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a24      	ldr	r2, [pc, #144]	@ (8000854 <SystemClock_Config+0xcc>)
 80007c2:	401a      	ands	r2, r3
 80007c4:	4b22      	ldr	r3, [pc, #136]	@ (8000850 <SystemClock_Config+0xc8>)
 80007c6:	2180      	movs	r1, #128	@ 0x80
 80007c8:	0109      	lsls	r1, r1, #4
 80007ca:	430a      	orrs	r2, r1
 80007cc:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007ce:	0021      	movs	r1, r4
 80007d0:	187b      	adds	r3, r7, r1
 80007d2:	2202      	movs	r2, #2
 80007d4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007d6:	187b      	adds	r3, r7, r1
 80007d8:	2201      	movs	r2, #1
 80007da:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007dc:	187b      	adds	r3, r7, r1
 80007de:	2210      	movs	r2, #16
 80007e0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007e2:	187b      	adds	r3, r7, r1
 80007e4:	2200      	movs	r2, #0
 80007e6:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e8:	187b      	adds	r3, r7, r1
 80007ea:	0018      	movs	r0, r3
 80007ec:	f001 ff90 	bl	8002710 <HAL_RCC_OscConfig>
 80007f0:	1e03      	subs	r3, r0, #0
 80007f2:	d001      	beq.n	80007f8 <SystemClock_Config+0x70>
  {
    Error_Handler();
 80007f4:	f000 f830 	bl	8000858 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007f8:	2120      	movs	r1, #32
 80007fa:	187b      	adds	r3, r7, r1
 80007fc:	220f      	movs	r2, #15
 80007fe:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000800:	187b      	adds	r3, r7, r1
 8000802:	2201      	movs	r2, #1
 8000804:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000806:	187b      	adds	r3, r7, r1
 8000808:	2200      	movs	r2, #0
 800080a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800080c:	187b      	adds	r3, r7, r1
 800080e:	2200      	movs	r2, #0
 8000810:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000812:	187b      	adds	r3, r7, r1
 8000814:	2200      	movs	r2, #0
 8000816:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000818:	187b      	adds	r3, r7, r1
 800081a:	2100      	movs	r1, #0
 800081c:	0018      	movs	r0, r3
 800081e:	f002 fae1 	bl	8002de4 <HAL_RCC_ClockConfig>
 8000822:	1e03      	subs	r3, r0, #0
 8000824:	d001      	beq.n	800082a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000826:	f000 f817 	bl	8000858 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800082a:	1d3b      	adds	r3, r7, #4
 800082c:	2208      	movs	r2, #8
 800082e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000830:	1d3b      	adds	r3, r7, #4
 8000832:	2200      	movs	r2, #0
 8000834:	615a      	str	r2, [r3, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000836:	1d3b      	adds	r3, r7, #4
 8000838:	0018      	movs	r0, r3
 800083a:	f002 fca1 	bl	8003180 <HAL_RCCEx_PeriphCLKConfig>
 800083e:	1e03      	subs	r3, r0, #0
 8000840:	d001      	beq.n	8000846 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000842:	f000 f809 	bl	8000858 <Error_Handler>
  }
}
 8000846:	46c0      	nop			@ (mov r8, r8)
 8000848:	46bd      	mov	sp, r7
 800084a:	b01b      	add	sp, #108	@ 0x6c
 800084c:	bd90      	pop	{r4, r7, pc}
 800084e:	46c0      	nop			@ (mov r8, r8)
 8000850:	40007000 	.word	0x40007000
 8000854:	ffffe7ff 	.word	0xffffe7ff

08000858 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800085c:	b672      	cpsid	i
}
 800085e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000860:	46c0      	nop			@ (mov r8, r8)
 8000862:	e7fd      	b.n	8000860 <Error_Handler+0x8>

08000864 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000868:	4b07      	ldr	r3, [pc, #28]	@ (8000888 <HAL_MspInit+0x24>)
 800086a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800086c:	4b06      	ldr	r3, [pc, #24]	@ (8000888 <HAL_MspInit+0x24>)
 800086e:	2101      	movs	r1, #1
 8000870:	430a      	orrs	r2, r1
 8000872:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000874:	4b04      	ldr	r3, [pc, #16]	@ (8000888 <HAL_MspInit+0x24>)
 8000876:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000878:	4b03      	ldr	r3, [pc, #12]	@ (8000888 <HAL_MspInit+0x24>)
 800087a:	2180      	movs	r1, #128	@ 0x80
 800087c:	0549      	lsls	r1, r1, #21
 800087e:	430a      	orrs	r2, r1
 8000880:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000882:	46c0      	nop			@ (mov r8, r8)
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	40021000 	.word	0x40021000

0800088c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000890:	46c0      	nop			@ (mov r8, r8)
 8000892:	e7fd      	b.n	8000890 <NMI_Handler+0x4>

08000894 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000898:	46c0      	nop			@ (mov r8, r8)
 800089a:	e7fd      	b.n	8000898 <HardFault_Handler+0x4>

0800089c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80008a0:	46c0      	nop			@ (mov r8, r8)
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}

080008a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008a6:	b580      	push	{r7, lr}
 80008a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008aa:	46c0      	nop			@ (mov r8, r8)
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}

080008b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008b4:	f000 fc14 	bl	80010e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008b8:	46c0      	nop			@ (mov r8, r8)
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}

080008be <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 80008be:	b580      	push	{r7, lr}
 80008c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_TP_Pin);
 80008c2:	2008      	movs	r0, #8
 80008c4:	f001 f9fe 	bl	8001cc4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 80008c8:	46c0      	nop			@ (mov r8, r8)
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
	...

080008d0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 80008d4:	4b03      	ldr	r3, [pc, #12]	@ (80008e4 <DMA1_Channel1_IRQHandler+0x14>)
 80008d6:	0018      	movs	r0, r3
 80008d8:	f000 ffb2 	bl	8001840 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80008dc:	46c0      	nop			@ (mov r8, r8)
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	46c0      	nop			@ (mov r8, r8)
 80008e4:	200000ec 	.word	0x200000ec

080008e8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b086      	sub	sp, #24
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	60f8      	str	r0, [r7, #12]
 80008f0:	60b9      	str	r1, [r7, #8]
 80008f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008f4:	2300      	movs	r3, #0
 80008f6:	617b      	str	r3, [r7, #20]
 80008f8:	e00a      	b.n	8000910 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80008fa:	e000      	b.n	80008fe <_read+0x16>
 80008fc:	bf00      	nop
 80008fe:	0001      	movs	r1, r0
 8000900:	68bb      	ldr	r3, [r7, #8]
 8000902:	1c5a      	adds	r2, r3, #1
 8000904:	60ba      	str	r2, [r7, #8]
 8000906:	b2ca      	uxtb	r2, r1
 8000908:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800090a:	697b      	ldr	r3, [r7, #20]
 800090c:	3301      	adds	r3, #1
 800090e:	617b      	str	r3, [r7, #20]
 8000910:	697a      	ldr	r2, [r7, #20]
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	429a      	cmp	r2, r3
 8000916:	dbf0      	blt.n	80008fa <_read+0x12>
  }

  return len;
 8000918:	687b      	ldr	r3, [r7, #4]
}
 800091a:	0018      	movs	r0, r3
 800091c:	46bd      	mov	sp, r7
 800091e:	b006      	add	sp, #24
 8000920:	bd80      	pop	{r7, pc}

08000922 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000922:	b580      	push	{r7, lr}
 8000924:	b086      	sub	sp, #24
 8000926:	af00      	add	r7, sp, #0
 8000928:	60f8      	str	r0, [r7, #12]
 800092a:	60b9      	str	r1, [r7, #8]
 800092c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800092e:	2300      	movs	r3, #0
 8000930:	617b      	str	r3, [r7, #20]
 8000932:	e009      	b.n	8000948 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000934:	68bb      	ldr	r3, [r7, #8]
 8000936:	1c5a      	adds	r2, r3, #1
 8000938:	60ba      	str	r2, [r7, #8]
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	0018      	movs	r0, r3
 800093e:	e000      	b.n	8000942 <_write+0x20>
 8000940:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000942:	697b      	ldr	r3, [r7, #20]
 8000944:	3301      	adds	r3, #1
 8000946:	617b      	str	r3, [r7, #20]
 8000948:	697a      	ldr	r2, [r7, #20]
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	429a      	cmp	r2, r3
 800094e:	dbf1      	blt.n	8000934 <_write+0x12>
  }
  return len;
 8000950:	687b      	ldr	r3, [r7, #4]
}
 8000952:	0018      	movs	r0, r3
 8000954:	46bd      	mov	sp, r7
 8000956:	b006      	add	sp, #24
 8000958:	bd80      	pop	{r7, pc}

0800095a <_close>:

int _close(int file)
{
 800095a:	b580      	push	{r7, lr}
 800095c:	b082      	sub	sp, #8
 800095e:	af00      	add	r7, sp, #0
 8000960:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000962:	2301      	movs	r3, #1
 8000964:	425b      	negs	r3, r3
}
 8000966:	0018      	movs	r0, r3
 8000968:	46bd      	mov	sp, r7
 800096a:	b002      	add	sp, #8
 800096c:	bd80      	pop	{r7, pc}

0800096e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800096e:	b580      	push	{r7, lr}
 8000970:	b082      	sub	sp, #8
 8000972:	af00      	add	r7, sp, #0
 8000974:	6078      	str	r0, [r7, #4]
 8000976:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	2280      	movs	r2, #128	@ 0x80
 800097c:	0192      	lsls	r2, r2, #6
 800097e:	605a      	str	r2, [r3, #4]
  return 0;
 8000980:	2300      	movs	r3, #0
}
 8000982:	0018      	movs	r0, r3
 8000984:	46bd      	mov	sp, r7
 8000986:	b002      	add	sp, #8
 8000988:	bd80      	pop	{r7, pc}

0800098a <_isatty>:

int _isatty(int file)
{
 800098a:	b580      	push	{r7, lr}
 800098c:	b082      	sub	sp, #8
 800098e:	af00      	add	r7, sp, #0
 8000990:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000992:	2301      	movs	r3, #1
}
 8000994:	0018      	movs	r0, r3
 8000996:	46bd      	mov	sp, r7
 8000998:	b002      	add	sp, #8
 800099a:	bd80      	pop	{r7, pc}

0800099c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b084      	sub	sp, #16
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	60f8      	str	r0, [r7, #12]
 80009a4:	60b9      	str	r1, [r7, #8]
 80009a6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80009a8:	2300      	movs	r3, #0
}
 80009aa:	0018      	movs	r0, r3
 80009ac:	46bd      	mov	sp, r7
 80009ae:	b004      	add	sp, #16
 80009b0:	bd80      	pop	{r7, pc}
	...

080009b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b086      	sub	sp, #24
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009bc:	4a14      	ldr	r2, [pc, #80]	@ (8000a10 <_sbrk+0x5c>)
 80009be:	4b15      	ldr	r3, [pc, #84]	@ (8000a14 <_sbrk+0x60>)
 80009c0:	1ad3      	subs	r3, r2, r3
 80009c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009c4:	697b      	ldr	r3, [r7, #20]
 80009c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009c8:	4b13      	ldr	r3, [pc, #76]	@ (8000a18 <_sbrk+0x64>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d102      	bne.n	80009d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009d0:	4b11      	ldr	r3, [pc, #68]	@ (8000a18 <_sbrk+0x64>)
 80009d2:	4a12      	ldr	r2, [pc, #72]	@ (8000a1c <_sbrk+0x68>)
 80009d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009d6:	4b10      	ldr	r3, [pc, #64]	@ (8000a18 <_sbrk+0x64>)
 80009d8:	681a      	ldr	r2, [r3, #0]
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	18d3      	adds	r3, r2, r3
 80009de:	693a      	ldr	r2, [r7, #16]
 80009e0:	429a      	cmp	r2, r3
 80009e2:	d207      	bcs.n	80009f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009e4:	f002 fe7c 	bl	80036e0 <__errno>
 80009e8:	0003      	movs	r3, r0
 80009ea:	220c      	movs	r2, #12
 80009ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009ee:	2301      	movs	r3, #1
 80009f0:	425b      	negs	r3, r3
 80009f2:	e009      	b.n	8000a08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009f4:	4b08      	ldr	r3, [pc, #32]	@ (8000a18 <_sbrk+0x64>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009fa:	4b07      	ldr	r3, [pc, #28]	@ (8000a18 <_sbrk+0x64>)
 80009fc:	681a      	ldr	r2, [r3, #0]
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	18d2      	adds	r2, r2, r3
 8000a02:	4b05      	ldr	r3, [pc, #20]	@ (8000a18 <_sbrk+0x64>)
 8000a04:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000a06:	68fb      	ldr	r3, [r7, #12]
}
 8000a08:	0018      	movs	r0, r3
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	b006      	add	sp, #24
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	20002000 	.word	0x20002000
 8000a14:	00000400 	.word	0x00000400
 8000a18:	20000188 	.word	0x20000188
 8000a1c:	200004c8 	.word	0x200004c8

08000a20 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a24:	46c0      	nop			@ (mov r8, r8)
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
	...

08000a2c <enqueueEvent>:

static TouchEvent eventQueue[EVENT_QUEUE_SIZE];
static uint8_t eventHead = 0;
static uint8_t eventTail = 0;

static void enqueueEvent(const TouchEvent* evt) {
 8000a2c:	b5b0      	push	{r4, r5, r7, lr}
 8000a2e:	b084      	sub	sp, #16
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
    uint8_t next = (eventHead + 1) % EVENT_QUEUE_SIZE;
 8000a34:	4b14      	ldr	r3, [pc, #80]	@ (8000a88 <enqueueEvent+0x5c>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	3301      	adds	r3, #1
 8000a3a:	4a14      	ldr	r2, [pc, #80]	@ (8000a8c <enqueueEvent+0x60>)
 8000a3c:	4013      	ands	r3, r2
 8000a3e:	d504      	bpl.n	8000a4a <enqueueEvent+0x1e>
 8000a40:	3b01      	subs	r3, #1
 8000a42:	2208      	movs	r2, #8
 8000a44:	4252      	negs	r2, r2
 8000a46:	4313      	orrs	r3, r2
 8000a48:	3301      	adds	r3, #1
 8000a4a:	001a      	movs	r2, r3
 8000a4c:	250f      	movs	r5, #15
 8000a4e:	197b      	adds	r3, r7, r5
 8000a50:	701a      	strb	r2, [r3, #0]
    if (next != eventTail) {
 8000a52:	4b0f      	ldr	r3, [pc, #60]	@ (8000a90 <enqueueEvent+0x64>)
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	197a      	adds	r2, r7, r5
 8000a58:	7812      	ldrb	r2, [r2, #0]
 8000a5a:	429a      	cmp	r2, r3
 8000a5c:	d010      	beq.n	8000a80 <enqueueEvent+0x54>
        eventQueue[eventHead] = *evt;
 8000a5e:	4b0a      	ldr	r3, [pc, #40]	@ (8000a88 <enqueueEvent+0x5c>)
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	0019      	movs	r1, r3
 8000a64:	4a0b      	ldr	r2, [pc, #44]	@ (8000a94 <enqueueEvent+0x68>)
 8000a66:	000b      	movs	r3, r1
 8000a68:	005b      	lsls	r3, r3, #1
 8000a6a:	185b      	adds	r3, r3, r1
 8000a6c:	009b      	lsls	r3, r3, #2
 8000a6e:	6879      	ldr	r1, [r7, #4]
 8000a70:	18d3      	adds	r3, r2, r3
 8000a72:	000a      	movs	r2, r1
 8000a74:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000a76:	c313      	stmia	r3!, {r0, r1, r4}
        eventHead = next;
 8000a78:	4b03      	ldr	r3, [pc, #12]	@ (8000a88 <enqueueEvent+0x5c>)
 8000a7a:	197a      	adds	r2, r7, r5
 8000a7c:	7812      	ldrb	r2, [r2, #0]
 8000a7e:	701a      	strb	r2, [r3, #0]
    }
}
 8000a80:	46c0      	nop			@ (mov r8, r8)
 8000a82:	46bd      	mov	sp, r7
 8000a84:	b004      	add	sp, #16
 8000a86:	bdb0      	pop	{r4, r5, r7, pc}
 8000a88:	20000370 	.word	0x20000370
 8000a8c:	80000007 	.word	0x80000007
 8000a90:	20000371 	.word	0x20000371
 8000a94:	20000310 	.word	0x20000310

08000a98 <dequeueEvent>:

static bool dequeueEvent(TouchEvent* evt) {
 8000a98:	b590      	push	{r4, r7, lr}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
    if (eventHead == eventTail) return false;
 8000aa0:	4b13      	ldr	r3, [pc, #76]	@ (8000af0 <dequeueEvent+0x58>)
 8000aa2:	781a      	ldrb	r2, [r3, #0]
 8000aa4:	4b13      	ldr	r3, [pc, #76]	@ (8000af4 <dequeueEvent+0x5c>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	429a      	cmp	r2, r3
 8000aaa:	d101      	bne.n	8000ab0 <dequeueEvent+0x18>
 8000aac:	2300      	movs	r3, #0
 8000aae:	e01b      	b.n	8000ae8 <dequeueEvent+0x50>
    *evt = eventQueue[eventTail];
 8000ab0:	4b10      	ldr	r3, [pc, #64]	@ (8000af4 <dequeueEvent+0x5c>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	001a      	movs	r2, r3
 8000ab6:	6878      	ldr	r0, [r7, #4]
 8000ab8:	490f      	ldr	r1, [pc, #60]	@ (8000af8 <dequeueEvent+0x60>)
 8000aba:	0013      	movs	r3, r2
 8000abc:	005b      	lsls	r3, r3, #1
 8000abe:	189b      	adds	r3, r3, r2
 8000ac0:	009b      	lsls	r3, r3, #2
 8000ac2:	0002      	movs	r2, r0
 8000ac4:	18cb      	adds	r3, r1, r3
 8000ac6:	cb13      	ldmia	r3!, {r0, r1, r4}
 8000ac8:	c213      	stmia	r2!, {r0, r1, r4}
    eventTail = (eventTail + 1) % EVENT_QUEUE_SIZE;
 8000aca:	4b0a      	ldr	r3, [pc, #40]	@ (8000af4 <dequeueEvent+0x5c>)
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	3301      	adds	r3, #1
 8000ad0:	4a0a      	ldr	r2, [pc, #40]	@ (8000afc <dequeueEvent+0x64>)
 8000ad2:	4013      	ands	r3, r2
 8000ad4:	d504      	bpl.n	8000ae0 <dequeueEvent+0x48>
 8000ad6:	3b01      	subs	r3, #1
 8000ad8:	2208      	movs	r2, #8
 8000ada:	4252      	negs	r2, r2
 8000adc:	4313      	orrs	r3, r2
 8000ade:	3301      	adds	r3, #1
 8000ae0:	b2da      	uxtb	r2, r3
 8000ae2:	4b04      	ldr	r3, [pc, #16]	@ (8000af4 <dequeueEvent+0x5c>)
 8000ae4:	701a      	strb	r2, [r3, #0]
    return true;
 8000ae6:	2301      	movs	r3, #1
}
 8000ae8:	0018      	movs	r0, r3
 8000aea:	46bd      	mov	sp, r7
 8000aec:	b003      	add	sp, #12
 8000aee:	bd90      	pop	{r4, r7, pc}
 8000af0:	20000370 	.word	0x20000370
 8000af4:	20000371 	.word	0x20000371
 8000af8:	20000310 	.word	0x20000310
 8000afc:	80000007 	.word	0x80000007

08000b00 <ILITEK_Init>:

void ILITEK_Init(void) {
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(TOUCH_RST_GPIO_Port, TOUCH_RST_Pin, GPIO_PIN_RESET);
 8000b04:	4b0c      	ldr	r3, [pc, #48]	@ (8000b38 <ILITEK_Init+0x38>)
 8000b06:	6818      	ldr	r0, [r3, #0]
 8000b08:	4b0c      	ldr	r3, [pc, #48]	@ (8000b3c <ILITEK_Init+0x3c>)
 8000b0a:	881b      	ldrh	r3, [r3, #0]
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	0019      	movs	r1, r3
 8000b10:	f001 f8ba 	bl	8001c88 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8000b14:	200a      	movs	r0, #10
 8000b16:	f000 faff 	bl	8001118 <HAL_Delay>
    HAL_GPIO_WritePin(TOUCH_RST_GPIO_Port, TOUCH_RST_Pin, GPIO_PIN_SET);
 8000b1a:	4b07      	ldr	r3, [pc, #28]	@ (8000b38 <ILITEK_Init+0x38>)
 8000b1c:	6818      	ldr	r0, [r3, #0]
 8000b1e:	4b07      	ldr	r3, [pc, #28]	@ (8000b3c <ILITEK_Init+0x3c>)
 8000b20:	881b      	ldrh	r3, [r3, #0]
 8000b22:	2201      	movs	r2, #1
 8000b24:	0019      	movs	r1, r3
 8000b26:	f001 f8af 	bl	8001c88 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8000b2a:	2064      	movs	r0, #100	@ 0x64
 8000b2c:	f000 faf4 	bl	8001118 <HAL_Delay>
}
 8000b30:	46c0      	nop			@ (mov r8, r8)
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	46c0      	nop			@ (mov r8, r8)
 8000b38:	20000004 	.word	0x20000004
 8000b3c:	20000008 	.word	0x20000008

08000b40 <ILITEK_ReadTouch>:

bool ILITEK_ReadTouch(TouchEvent* evt) {
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b088      	sub	sp, #32
 8000b44:	af04      	add	r7, sp, #16
 8000b46:	6078      	str	r0, [r7, #4]
    uint8_t data[6];
    if (HAL_I2C_Mem_Read(&hi2c1, ILITEK_I2C_ADDR, ILITEK_DATA_REG, I2C_MEMADD_SIZE_8BIT, data, 6, I2C_TIMEOUT) != HAL_OK)
 8000b48:	482c      	ldr	r0, [pc, #176]	@ (8000bfc <ILITEK_ReadTouch+0xbc>)
 8000b4a:	2364      	movs	r3, #100	@ 0x64
 8000b4c:	9302      	str	r3, [sp, #8]
 8000b4e:	2306      	movs	r3, #6
 8000b50:	9301      	str	r3, [sp, #4]
 8000b52:	2308      	movs	r3, #8
 8000b54:	18fb      	adds	r3, r7, r3
 8000b56:	9300      	str	r3, [sp, #0]
 8000b58:	2301      	movs	r3, #1
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	2182      	movs	r1, #130	@ 0x82
 8000b5e:	f001 f973 	bl	8001e48 <HAL_I2C_Mem_Read>
 8000b62:	1e03      	subs	r3, r0, #0
 8000b64:	d001      	beq.n	8000b6a <ILITEK_ReadTouch+0x2a>
        return false;
 8000b66:	2300      	movs	r3, #0
 8000b68:	e043      	b.n	8000bf2 <ILITEK_ReadTouch+0xb2>

    uint8_t touchCount = data[0];
 8000b6a:	210f      	movs	r1, #15
 8000b6c:	187b      	adds	r3, r7, r1
 8000b6e:	2008      	movs	r0, #8
 8000b70:	183a      	adds	r2, r7, r0
 8000b72:	7812      	ldrb	r2, [r2, #0]
 8000b74:	701a      	strb	r2, [r3, #0]
    uint8_t eventType = data[1];
 8000b76:	230e      	movs	r3, #14
 8000b78:	18fb      	adds	r3, r7, r3
 8000b7a:	183a      	adds	r2, r7, r0
 8000b7c:	7852      	ldrb	r2, [r2, #1]
 8000b7e:	701a      	strb	r2, [r3, #0]

    if (touchCount == 0)
 8000b80:	187b      	adds	r3, r7, r1
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d101      	bne.n	8000b8c <ILITEK_ReadTouch+0x4c>
        return false;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	e032      	b.n	8000bf2 <ILITEK_ReadTouch+0xb2>

    evt->x = ((uint16_t)data[2] << 8) | data[3];
 8000b8c:	2108      	movs	r1, #8
 8000b8e:	187b      	adds	r3, r7, r1
 8000b90:	789b      	ldrb	r3, [r3, #2]
 8000b92:	b21b      	sxth	r3, r3
 8000b94:	021b      	lsls	r3, r3, #8
 8000b96:	b21a      	sxth	r2, r3
 8000b98:	187b      	adds	r3, r7, r1
 8000b9a:	78db      	ldrb	r3, [r3, #3]
 8000b9c:	b21b      	sxth	r3, r3
 8000b9e:	4313      	orrs	r3, r2
 8000ba0:	b21b      	sxth	r3, r3
 8000ba2:	b29a      	uxth	r2, r3
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	801a      	strh	r2, [r3, #0]
    evt->y = ((uint16_t)data[4] << 8) | data[5];
 8000ba8:	187b      	adds	r3, r7, r1
 8000baa:	791b      	ldrb	r3, [r3, #4]
 8000bac:	b21b      	sxth	r3, r3
 8000bae:	021b      	lsls	r3, r3, #8
 8000bb0:	b21a      	sxth	r2, r3
 8000bb2:	187b      	adds	r3, r7, r1
 8000bb4:	795b      	ldrb	r3, [r3, #5]
 8000bb6:	b21b      	sxth	r3, r3
 8000bb8:	4313      	orrs	r3, r2
 8000bba:	b21b      	sxth	r3, r3
 8000bbc:	b29a      	uxth	r2, r3
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	805a      	strh	r2, [r3, #2]
    evt->isTouchDown = (eventType == 0x01 || eventType == 0x02);
 8000bc2:	220e      	movs	r2, #14
 8000bc4:	18bb      	adds	r3, r7, r2
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	2b01      	cmp	r3, #1
 8000bca:	d003      	beq.n	8000bd4 <ILITEK_ReadTouch+0x94>
 8000bcc:	18bb      	adds	r3, r7, r2
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	2b02      	cmp	r3, #2
 8000bd2:	d101      	bne.n	8000bd8 <ILITEK_ReadTouch+0x98>
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	e000      	b.n	8000bda <ILITEK_ReadTouch+0x9a>
 8000bd8:	2300      	movs	r3, #0
 8000bda:	1c1a      	adds	r2, r3, #0
 8000bdc:	2301      	movs	r3, #1
 8000bde:	4013      	ands	r3, r2
 8000be0:	b2da      	uxtb	r2, r3
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	711a      	strb	r2, [r3, #4]
    evt->timestamp = HAL_GetTick();
 8000be6:	f000 fa8d 	bl	8001104 <HAL_GetTick>
 8000bea:	0002      	movs	r2, r0
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	609a      	str	r2, [r3, #8]

    return true;
 8000bf0:	2301      	movs	r3, #1
}
 8000bf2:	0018      	movs	r0, r3
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	b004      	add	sp, #16
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	46c0      	nop			@ (mov r8, r8)
 8000bfc:	20000134 	.word	0x20000134

08000c00 <Touch_IsWithinRegion>:

bool Touch_IsWithinRegion(const TouchEvent* evt, const TouchRegion* region) {
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
 8000c08:	6039      	str	r1, [r7, #0]
    return evt->x >= region->x0 && evt->x <= region->x1 &&
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	881a      	ldrh	r2, [r3, #0]
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	881b      	ldrh	r3, [r3, #0]
           evt->y >= region->y0 && evt->y <= region->y1;
 8000c12:	429a      	cmp	r2, r3
 8000c14:	d313      	bcc.n	8000c3e <Touch_IsWithinRegion+0x3e>
    return evt->x >= region->x0 && evt->x <= region->x1 &&
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	881a      	ldrh	r2, [r3, #0]
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	889b      	ldrh	r3, [r3, #4]
 8000c1e:	429a      	cmp	r2, r3
 8000c20:	d80d      	bhi.n	8000c3e <Touch_IsWithinRegion+0x3e>
           evt->y >= region->y0 && evt->y <= region->y1;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	885a      	ldrh	r2, [r3, #2]
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	885b      	ldrh	r3, [r3, #2]
    return evt->x >= region->x0 && evt->x <= region->x1 &&
 8000c2a:	429a      	cmp	r2, r3
 8000c2c:	d307      	bcc.n	8000c3e <Touch_IsWithinRegion+0x3e>
           evt->y >= region->y0 && evt->y <= region->y1;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	885a      	ldrh	r2, [r3, #2]
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	88db      	ldrh	r3, [r3, #6]
 8000c36:	429a      	cmp	r2, r3
 8000c38:	d801      	bhi.n	8000c3e <Touch_IsWithinRegion+0x3e>
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	e000      	b.n	8000c40 <Touch_IsWithinRegion+0x40>
 8000c3e:	2300      	movs	r3, #0
 8000c40:	1c1a      	adds	r2, r3, #0
 8000c42:	2301      	movs	r3, #1
 8000c44:	4013      	ands	r3, r2
 8000c46:	b2db      	uxtb	r3, r3
}
 8000c48:	0018      	movs	r0, r3
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	b002      	add	sp, #8
 8000c4e:	bd80      	pop	{r7, pc}

08000c50 <ILITEK_RegisterRegionHandler>:

void ILITEK_RegisterRegionHandler(const TouchRegionHandler* handler) {
 8000c50:	b590      	push	{r4, r7, lr}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
    if (numRegionHandlers < MAX_TOUCH_REGIONS) {
 8000c58:	4b0f      	ldr	r3, [pc, #60]	@ (8000c98 <ILITEK_RegisterRegionHandler+0x48>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	2b07      	cmp	r3, #7
 8000c5e:	d816      	bhi.n	8000c8e <ILITEK_RegisterRegionHandler+0x3e>
        regionHandlers[numRegionHandlers++] = *handler;
 8000c60:	4b0d      	ldr	r3, [pc, #52]	@ (8000c98 <ILITEK_RegisterRegionHandler+0x48>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	1c5a      	adds	r2, r3, #1
 8000c66:	b2d1      	uxtb	r1, r2
 8000c68:	4a0b      	ldr	r2, [pc, #44]	@ (8000c98 <ILITEK_RegisterRegionHandler+0x48>)
 8000c6a:	7011      	strb	r1, [r2, #0]
 8000c6c:	0019      	movs	r1, r3
 8000c6e:	4a0b      	ldr	r2, [pc, #44]	@ (8000c9c <ILITEK_RegisterRegionHandler+0x4c>)
 8000c70:	000b      	movs	r3, r1
 8000c72:	009b      	lsls	r3, r3, #2
 8000c74:	185b      	adds	r3, r3, r1
 8000c76:	00db      	lsls	r3, r3, #3
 8000c78:	6879      	ldr	r1, [r7, #4]
 8000c7a:	18d3      	adds	r3, r2, r3
 8000c7c:	000a      	movs	r2, r1
 8000c7e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000c80:	c313      	stmia	r3!, {r0, r1, r4}
 8000c82:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000c84:	c313      	stmia	r3!, {r0, r1, r4}
 8000c86:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000c88:	c313      	stmia	r3!, {r0, r1, r4}
 8000c8a:	6812      	ldr	r2, [r2, #0]
 8000c8c:	601a      	str	r2, [r3, #0]
    }
}
 8000c8e:	46c0      	nop			@ (mov r8, r8)
 8000c90:	46bd      	mov	sp, r7
 8000c92:	b003      	add	sp, #12
 8000c94:	bd90      	pop	{r4, r7, pc}
 8000c96:	46c0      	nop			@ (mov r8, r8)
 8000c98:	2000030c 	.word	0x2000030c
 8000c9c:	2000018c 	.word	0x2000018c

08000ca0 <ILITEK_ProcessTouch>:

void ILITEK_ProcessTouch(void) {
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b084      	sub	sp, #16
 8000ca4:	af00      	add	r7, sp, #0
    TouchEvent evt;
    if (ILITEK_ReadTouch(&evt)) {
 8000ca6:	1d3b      	adds	r3, r7, #4
 8000ca8:	0018      	movs	r0, r3
 8000caa:	f7ff ff49 	bl	8000b40 <ILITEK_ReadTouch>
 8000cae:	1e03      	subs	r3, r0, #0
 8000cb0:	d003      	beq.n	8000cba <ILITEK_ProcessTouch+0x1a>
        enqueueEvent(&evt);
 8000cb2:	1d3b      	adds	r3, r7, #4
 8000cb4:	0018      	movs	r0, r3
 8000cb6:	f7ff feb9 	bl	8000a2c <enqueueEvent>
    }
}
 8000cba:	46c0      	nop			@ (mov r8, r8)
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	b004      	add	sp, #16
 8000cc0:	bd80      	pop	{r7, pc}
	...

08000cc4 <ILITEK_PollTouchEvents>:

void ILITEK_PollTouchEvents(void) {
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b086      	sub	sp, #24
 8000cc8:	af00      	add	r7, sp, #0
    TouchEvent evt;
    while (dequeueEvent(&evt)) {
 8000cca:	e08d      	b.n	8000de8 <ILITEK_PollTouchEvents+0x124>
        for (uint8_t i = 0; i < numRegionHandlers; ++i) {
 8000ccc:	2317      	movs	r3, #23
 8000cce:	18fb      	adds	r3, r7, r3
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	701a      	strb	r2, [r3, #0]
 8000cd4:	e080      	b.n	8000dd8 <ILITEK_PollTouchEvents+0x114>
            TouchRegionHandler* h = &regionHandlers[i];
 8000cd6:	2317      	movs	r3, #23
 8000cd8:	18fb      	adds	r3, r7, r3
 8000cda:	781a      	ldrb	r2, [r3, #0]
 8000cdc:	0013      	movs	r3, r2
 8000cde:	009b      	lsls	r3, r3, #2
 8000ce0:	189b      	adds	r3, r3, r2
 8000ce2:	00db      	lsls	r3, r3, #3
 8000ce4:	4a46      	ldr	r2, [pc, #280]	@ (8000e00 <ILITEK_PollTouchEvents+0x13c>)
 8000ce6:	189b      	adds	r3, r3, r2
 8000ce8:	613b      	str	r3, [r7, #16]
            if (!h->active) continue;
 8000cea:	693b      	ldr	r3, [r7, #16]
 8000cec:	7e1b      	ldrb	r3, [r3, #24]
 8000cee:	2201      	movs	r2, #1
 8000cf0:	4053      	eors	r3, r2
 8000cf2:	b2db      	uxtb	r3, r3
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d000      	beq.n	8000cfa <ILITEK_PollTouchEvents+0x36>
 8000cf8:	e067      	b.n	8000dca <ILITEK_PollTouchEvents+0x106>

            if (evt.isTouchDown) {
 8000cfa:	1d3b      	adds	r3, r7, #4
 8000cfc:	791b      	ldrb	r3, [r3, #4]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d044      	beq.n	8000d8c <ILITEK_PollTouchEvents+0xc8>
                if (Touch_IsWithinRegion(&evt, &h->region)) {
 8000d02:	693a      	ldr	r2, [r7, #16]
 8000d04:	1d3b      	adds	r3, r7, #4
 8000d06:	0011      	movs	r1, r2
 8000d08:	0018      	movs	r0, r3
 8000d0a:	f7ff ff79 	bl	8000c00 <Touch_IsWithinRegion>
 8000d0e:	1e03      	subs	r3, r0, #0
 8000d10:	d034      	beq.n	8000d7c <ILITEK_PollTouchEvents+0xb8>
                    if (!h->lastDownTime) {
 8000d12:	693b      	ldr	r3, [r7, #16]
 8000d14:	69db      	ldr	r3, [r3, #28]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d10f      	bne.n	8000d3a <ILITEK_PollTouchEvents+0x76>
                        h->lastDownTime = evt.timestamp;
 8000d1a:	1d3b      	adds	r3, r7, #4
 8000d1c:	689a      	ldr	r2, [r3, #8]
 8000d1e:	693b      	ldr	r3, [r7, #16]
 8000d20:	61da      	str	r2, [r3, #28]
                        if (h->onTouchDown) h->onTouchDown(&evt, h->userContext);
 8000d22:	693b      	ldr	r3, [r7, #16]
 8000d24:	689b      	ldr	r3, [r3, #8]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d050      	beq.n	8000dcc <ILITEK_PollTouchEvents+0x108>
 8000d2a:	693b      	ldr	r3, [r7, #16]
 8000d2c:	689a      	ldr	r2, [r3, #8]
 8000d2e:	693b      	ldr	r3, [r7, #16]
 8000d30:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8000d32:	1d3b      	adds	r3, r7, #4
 8000d34:	0018      	movs	r0, r3
 8000d36:	4790      	blx	r2
 8000d38:	e048      	b.n	8000dcc <ILITEK_PollTouchEvents+0x108>
                    } else if (!h->isHolding && (evt.timestamp - h->lastDownTime >= h->holdTimeMs)) {
 8000d3a:	693b      	ldr	r3, [r7, #16]
 8000d3c:	2220      	movs	r2, #32
 8000d3e:	5c9b      	ldrb	r3, [r3, r2]
 8000d40:	2201      	movs	r2, #1
 8000d42:	4053      	eors	r3, r2
 8000d44:	b2db      	uxtb	r3, r3
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d040      	beq.n	8000dcc <ILITEK_PollTouchEvents+0x108>
 8000d4a:	1d3b      	adds	r3, r7, #4
 8000d4c:	689a      	ldr	r2, [r3, #8]
 8000d4e:	693b      	ldr	r3, [r7, #16]
 8000d50:	69db      	ldr	r3, [r3, #28]
 8000d52:	1ad2      	subs	r2, r2, r3
 8000d54:	693b      	ldr	r3, [r7, #16]
 8000d56:	695b      	ldr	r3, [r3, #20]
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	d337      	bcc.n	8000dcc <ILITEK_PollTouchEvents+0x108>
                        h->isHolding = true;
 8000d5c:	693b      	ldr	r3, [r7, #16]
 8000d5e:	2220      	movs	r2, #32
 8000d60:	2101      	movs	r1, #1
 8000d62:	5499      	strb	r1, [r3, r2]
                        if (h->onTouchHold) h->onTouchHold(&evt, h->userContext);
 8000d64:	693b      	ldr	r3, [r7, #16]
 8000d66:	691b      	ldr	r3, [r3, #16]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d02f      	beq.n	8000dcc <ILITEK_PollTouchEvents+0x108>
 8000d6c:	693b      	ldr	r3, [r7, #16]
 8000d6e:	691a      	ldr	r2, [r3, #16]
 8000d70:	693b      	ldr	r3, [r7, #16]
 8000d72:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8000d74:	1d3b      	adds	r3, r7, #4
 8000d76:	0018      	movs	r0, r3
 8000d78:	4790      	blx	r2
 8000d7a:	e027      	b.n	8000dcc <ILITEK_PollTouchEvents+0x108>
                    }
                } else {
                    h->lastDownTime = 0;
 8000d7c:	693b      	ldr	r3, [r7, #16]
 8000d7e:	2200      	movs	r2, #0
 8000d80:	61da      	str	r2, [r3, #28]
                    h->isHolding = false;
 8000d82:	693b      	ldr	r3, [r7, #16]
 8000d84:	2220      	movs	r2, #32
 8000d86:	2100      	movs	r1, #0
 8000d88:	5499      	strb	r1, [r3, r2]
 8000d8a:	e01f      	b.n	8000dcc <ILITEK_PollTouchEvents+0x108>
                }
            } else {
                if (h->lastDownTime) {
 8000d8c:	693b      	ldr	r3, [r7, #16]
 8000d8e:	69db      	ldr	r3, [r3, #28]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d01b      	beq.n	8000dcc <ILITEK_PollTouchEvents+0x108>
                    if (Touch_IsWithinRegion(&evt, &h->region) && h->onTouchUp) {
 8000d94:	693a      	ldr	r2, [r7, #16]
 8000d96:	1d3b      	adds	r3, r7, #4
 8000d98:	0011      	movs	r1, r2
 8000d9a:	0018      	movs	r0, r3
 8000d9c:	f7ff ff30 	bl	8000c00 <Touch_IsWithinRegion>
 8000da0:	1e03      	subs	r3, r0, #0
 8000da2:	d00a      	beq.n	8000dba <ILITEK_PollTouchEvents+0xf6>
 8000da4:	693b      	ldr	r3, [r7, #16]
 8000da6:	68db      	ldr	r3, [r3, #12]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d006      	beq.n	8000dba <ILITEK_PollTouchEvents+0xf6>
                        h->onTouchUp(&evt, h->userContext);
 8000dac:	693b      	ldr	r3, [r7, #16]
 8000dae:	68da      	ldr	r2, [r3, #12]
 8000db0:	693b      	ldr	r3, [r7, #16]
 8000db2:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8000db4:	1d3b      	adds	r3, r7, #4
 8000db6:	0018      	movs	r0, r3
 8000db8:	4790      	blx	r2
                    }
                    h->lastDownTime = 0;
 8000dba:	693b      	ldr	r3, [r7, #16]
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	61da      	str	r2, [r3, #28]
                    h->isHolding = false;
 8000dc0:	693b      	ldr	r3, [r7, #16]
 8000dc2:	2220      	movs	r2, #32
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	5499      	strb	r1, [r3, r2]
 8000dc8:	e000      	b.n	8000dcc <ILITEK_PollTouchEvents+0x108>
            if (!h->active) continue;
 8000dca:	46c0      	nop			@ (mov r8, r8)
        for (uint8_t i = 0; i < numRegionHandlers; ++i) {
 8000dcc:	2217      	movs	r2, #23
 8000dce:	18bb      	adds	r3, r7, r2
 8000dd0:	18ba      	adds	r2, r7, r2
 8000dd2:	7812      	ldrb	r2, [r2, #0]
 8000dd4:	3201      	adds	r2, #1
 8000dd6:	701a      	strb	r2, [r3, #0]
 8000dd8:	4b0a      	ldr	r3, [pc, #40]	@ (8000e04 <ILITEK_PollTouchEvents+0x140>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	2217      	movs	r2, #23
 8000dde:	18ba      	adds	r2, r7, r2
 8000de0:	7812      	ldrb	r2, [r2, #0]
 8000de2:	429a      	cmp	r2, r3
 8000de4:	d200      	bcs.n	8000de8 <ILITEK_PollTouchEvents+0x124>
 8000de6:	e776      	b.n	8000cd6 <ILITEK_PollTouchEvents+0x12>
    while (dequeueEvent(&evt)) {
 8000de8:	1d3b      	adds	r3, r7, #4
 8000dea:	0018      	movs	r0, r3
 8000dec:	f7ff fe54 	bl	8000a98 <dequeueEvent>
 8000df0:	1e03      	subs	r3, r0, #0
 8000df2:	d000      	beq.n	8000df6 <ILITEK_PollTouchEvents+0x132>
 8000df4:	e76a      	b.n	8000ccc <ILITEK_PollTouchEvents+0x8>
                }
            }
        }
    }
}
 8000df6:	46c0      	nop			@ (mov r8, r8)
 8000df8:	46c0      	nop			@ (mov r8, r8)
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	b006      	add	sp, #24
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	2000018c 	.word	0x2000018c
 8000e04:	2000030c 	.word	0x2000030c

08000e08 <ILITEK_CreateGridButtons>:
                              const TouchButtonInfo btnInfo[],
                              uint8_t count,
                              TouchCallback onTouchDown,
                              TouchCallback onTouchUp,
                              TouchCallback onTouchHold,
                              uint32_t holdTimeMs) {
 8000e08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e0a:	b097      	sub	sp, #92	@ 0x5c
 8000e0c:	af04      	add	r7, sp, #16
 8000e0e:	60f8      	str	r0, [r7, #12]
 8000e10:	60b9      	str	r1, [r7, #8]
 8000e12:	603b      	str	r3, [r7, #0]
 8000e14:	1dfb      	adds	r3, r7, #7
 8000e16:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < count && numRegionHandlers < MAX_TOUCH_REGIONS; ++i) {
 8000e18:	2347      	movs	r3, #71	@ 0x47
 8000e1a:	18fb      	adds	r3, r7, r3
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	701a      	strb	r2, [r3, #0]
 8000e20:	e0b5      	b.n	8000f8e <ILITEK_CreateGridButtons+0x186>
        uint8_t row = i / layout->columns;
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	7b1a      	ldrb	r2, [r3, #12]
 8000e26:	2346      	movs	r3, #70	@ 0x46
 8000e28:	18fc      	adds	r4, r7, r3
 8000e2a:	2547      	movs	r5, #71	@ 0x47
 8000e2c:	197b      	adds	r3, r7, r5
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	0011      	movs	r1, r2
 8000e32:	0018      	movs	r0, r3
 8000e34:	f7ff f972 	bl	800011c <__udivsi3>
 8000e38:	0003      	movs	r3, r0
 8000e3a:	7023      	strb	r3, [r4, #0]
        uint8_t col = i % layout->columns;
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	7b1a      	ldrb	r2, [r3, #12]
 8000e40:	2645      	movs	r6, #69	@ 0x45
 8000e42:	19bc      	adds	r4, r7, r6
 8000e44:	197b      	adds	r3, r7, r5
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	0011      	movs	r1, r2
 8000e4a:	0018      	movs	r0, r3
 8000e4c:	f7ff f9ec 	bl	8000228 <__aeabi_uidivmod>
 8000e50:	000b      	movs	r3, r1
 8000e52:	7023      	strb	r3, [r4, #0]

        uint16_t x0 = layout->startX + col * (layout->width + layout->hSpacing);
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	8819      	ldrh	r1, [r3, #0]
 8000e58:	19bb      	adds	r3, r7, r6
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	b29b      	uxth	r3, r3
 8000e5e:	68fa      	ldr	r2, [r7, #12]
 8000e60:	8890      	ldrh	r0, [r2, #4]
 8000e62:	68fa      	ldr	r2, [r7, #12]
 8000e64:	8912      	ldrh	r2, [r2, #8]
 8000e66:	1882      	adds	r2, r0, r2
 8000e68:	b292      	uxth	r2, r2
 8000e6a:	4353      	muls	r3, r2
 8000e6c:	b29a      	uxth	r2, r3
 8000e6e:	2642      	movs	r6, #66	@ 0x42
 8000e70:	19bb      	adds	r3, r7, r6
 8000e72:	188a      	adds	r2, r1, r2
 8000e74:	801a      	strh	r2, [r3, #0]
        uint16_t y0 = layout->startY + row * (layout->height + layout->vSpacing);
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	8859      	ldrh	r1, [r3, #2]
 8000e7a:	2346      	movs	r3, #70	@ 0x46
 8000e7c:	18fb      	adds	r3, r7, r3
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	b29b      	uxth	r3, r3
 8000e82:	68fa      	ldr	r2, [r7, #12]
 8000e84:	88d0      	ldrh	r0, [r2, #6]
 8000e86:	68fa      	ldr	r2, [r7, #12]
 8000e88:	8952      	ldrh	r2, [r2, #10]
 8000e8a:	1882      	adds	r2, r0, r2
 8000e8c:	b292      	uxth	r2, r2
 8000e8e:	4353      	muls	r3, r2
 8000e90:	b29a      	uxth	r2, r3
 8000e92:	2040      	movs	r0, #64	@ 0x40
 8000e94:	183b      	adds	r3, r7, r0
 8000e96:	188a      	adds	r2, r1, r2
 8000e98:	801a      	strh	r2, [r3, #0]
        uint16_t x1 = x0 + layout->width;
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	8899      	ldrh	r1, [r3, #4]
 8000e9e:	233e      	movs	r3, #62	@ 0x3e
 8000ea0:	18fb      	adds	r3, r7, r3
 8000ea2:	19ba      	adds	r2, r7, r6
 8000ea4:	8812      	ldrh	r2, [r2, #0]
 8000ea6:	188a      	adds	r2, r1, r2
 8000ea8:	801a      	strh	r2, [r3, #0]
        uint16_t y1 = y0 + layout->height;
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	88d9      	ldrh	r1, [r3, #6]
 8000eae:	243c      	movs	r4, #60	@ 0x3c
 8000eb0:	193b      	adds	r3, r7, r4
 8000eb2:	183a      	adds	r2, r7, r0
 8000eb4:	8812      	ldrh	r2, [r2, #0]
 8000eb6:	188a      	adds	r2, r1, r2
 8000eb8:	801a      	strh	r2, [r3, #0]

        buttonInfos[numRegionHandlers] = btnInfo[i];
 8000eba:	197b      	adds	r3, r7, r5
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	00db      	lsls	r3, r3, #3
 8000ec0:	68ba      	ldr	r2, [r7, #8]
 8000ec2:	18d1      	adds	r1, r2, r3
 8000ec4:	4b3a      	ldr	r3, [pc, #232]	@ (8000fb0 <ILITEK_CreateGridButtons+0x1a8>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	4a3a      	ldr	r2, [pc, #232]	@ (8000fb4 <ILITEK_CreateGridButtons+0x1ac>)
 8000eca:	00db      	lsls	r3, r3, #3
 8000ecc:	18d3      	adds	r3, r2, r3
 8000ece:	000a      	movs	r2, r1
 8000ed0:	ca03      	ldmia	r2!, {r0, r1}
 8000ed2:	c303      	stmia	r3!, {r0, r1}

        printf("Registering button %u: '%s' at [%u,%u]-[%u,%u]\n", btnInfo[i].id, btnInfo[i].label, x0, y0, x1, y1);
 8000ed4:	197b      	adds	r3, r7, r5
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	00db      	lsls	r3, r3, #3
 8000eda:	68ba      	ldr	r2, [r7, #8]
 8000edc:	18d3      	adds	r3, r2, r3
 8000ede:	681c      	ldr	r4, [r3, #0]
 8000ee0:	197b      	adds	r3, r7, r5
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	00db      	lsls	r3, r3, #3
 8000ee6:	68ba      	ldr	r2, [r7, #8]
 8000ee8:	18d3      	adds	r3, r2, r3
 8000eea:	685d      	ldr	r5, [r3, #4]
 8000eec:	19bb      	adds	r3, r7, r6
 8000eee:	881e      	ldrh	r6, [r3, #0]
 8000ef0:	2040      	movs	r0, #64	@ 0x40
 8000ef2:	183b      	adds	r3, r7, r0
 8000ef4:	881b      	ldrh	r3, [r3, #0]
 8000ef6:	223e      	movs	r2, #62	@ 0x3e
 8000ef8:	18ba      	adds	r2, r7, r2
 8000efa:	8812      	ldrh	r2, [r2, #0]
 8000efc:	213c      	movs	r1, #60	@ 0x3c
 8000efe:	1879      	adds	r1, r7, r1
 8000f00:	8809      	ldrh	r1, [r1, #0]
 8000f02:	482d      	ldr	r0, [pc, #180]	@ (8000fb8 <ILITEK_CreateGridButtons+0x1b0>)
 8000f04:	9102      	str	r1, [sp, #8]
 8000f06:	9201      	str	r2, [sp, #4]
 8000f08:	9300      	str	r3, [sp, #0]
 8000f0a:	0033      	movs	r3, r6
 8000f0c:	002a      	movs	r2, r5
 8000f0e:	0021      	movs	r1, r4
 8000f10:	f002 fb34 	bl	800357c <iprintf>

        TouchRegionHandler handler = {
 8000f14:	2114      	movs	r1, #20
 8000f16:	187b      	adds	r3, r7, r1
 8000f18:	2642      	movs	r6, #66	@ 0x42
 8000f1a:	19ba      	adds	r2, r7, r6
 8000f1c:	8812      	ldrh	r2, [r2, #0]
 8000f1e:	801a      	strh	r2, [r3, #0]
 8000f20:	187b      	adds	r3, r7, r1
 8000f22:	2040      	movs	r0, #64	@ 0x40
 8000f24:	183a      	adds	r2, r7, r0
 8000f26:	8812      	ldrh	r2, [r2, #0]
 8000f28:	805a      	strh	r2, [r3, #2]
 8000f2a:	187b      	adds	r3, r7, r1
 8000f2c:	223e      	movs	r2, #62	@ 0x3e
 8000f2e:	18ba      	adds	r2, r7, r2
 8000f30:	8812      	ldrh	r2, [r2, #0]
 8000f32:	809a      	strh	r2, [r3, #4]
 8000f34:	187b      	adds	r3, r7, r1
 8000f36:	243c      	movs	r4, #60	@ 0x3c
 8000f38:	193a      	adds	r2, r7, r4
 8000f3a:	8812      	ldrh	r2, [r2, #0]
 8000f3c:	80da      	strh	r2, [r3, #6]
 8000f3e:	0008      	movs	r0, r1
 8000f40:	183b      	adds	r3, r7, r0
 8000f42:	683a      	ldr	r2, [r7, #0]
 8000f44:	609a      	str	r2, [r3, #8]
 8000f46:	183b      	adds	r3, r7, r0
 8000f48:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000f4a:	60da      	str	r2, [r3, #12]
 8000f4c:	183b      	adds	r3, r7, r0
 8000f4e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8000f50:	611a      	str	r2, [r3, #16]
 8000f52:	183b      	adds	r3, r7, r0
 8000f54:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8000f56:	615a      	str	r2, [r3, #20]
 8000f58:	183b      	adds	r3, r7, r0
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	761a      	strb	r2, [r3, #24]
 8000f5e:	183b      	adds	r3, r7, r0
 8000f60:	2200      	movs	r2, #0
 8000f62:	61da      	str	r2, [r3, #28]
 8000f64:	183b      	adds	r3, r7, r0
 8000f66:	2220      	movs	r2, #32
 8000f68:	2100      	movs	r1, #0
 8000f6a:	5499      	strb	r1, [r3, r2]
            .onTouchHold = onTouchHold,
            .holdTimeMs = holdTimeMs,
            .active = true,
            .lastDownTime = 0,
            .isHolding = false,
            .userContext = &buttonInfos[numRegionHandlers]
 8000f6c:	4b10      	ldr	r3, [pc, #64]	@ (8000fb0 <ILITEK_CreateGridButtons+0x1a8>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	00da      	lsls	r2, r3, #3
 8000f72:	4b10      	ldr	r3, [pc, #64]	@ (8000fb4 <ILITEK_CreateGridButtons+0x1ac>)
 8000f74:	18d2      	adds	r2, r2, r3
        TouchRegionHandler handler = {
 8000f76:	183b      	adds	r3, r7, r0
 8000f78:	625a      	str	r2, [r3, #36]	@ 0x24
        };

        ILITEK_RegisterRegionHandler(&handler);
 8000f7a:	183b      	adds	r3, r7, r0
 8000f7c:	0018      	movs	r0, r3
 8000f7e:	f7ff fe67 	bl	8000c50 <ILITEK_RegisterRegionHandler>
    for (uint8_t i = 0; i < count && numRegionHandlers < MAX_TOUCH_REGIONS; ++i) {
 8000f82:	2547      	movs	r5, #71	@ 0x47
 8000f84:	197b      	adds	r3, r7, r5
 8000f86:	197a      	adds	r2, r7, r5
 8000f88:	7812      	ldrb	r2, [r2, #0]
 8000f8a:	3201      	adds	r2, #1
 8000f8c:	701a      	strb	r2, [r3, #0]
 8000f8e:	2347      	movs	r3, #71	@ 0x47
 8000f90:	18fa      	adds	r2, r7, r3
 8000f92:	1dfb      	adds	r3, r7, #7
 8000f94:	7812      	ldrb	r2, [r2, #0]
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	d204      	bcs.n	8000fa6 <ILITEK_CreateGridButtons+0x19e>
 8000f9c:	4b04      	ldr	r3, [pc, #16]	@ (8000fb0 <ILITEK_CreateGridButtons+0x1a8>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	2b07      	cmp	r3, #7
 8000fa2:	d800      	bhi.n	8000fa6 <ILITEK_CreateGridButtons+0x19e>
 8000fa4:	e73d      	b.n	8000e22 <ILITEK_CreateGridButtons+0x1a>
    }
}
 8000fa6:	46c0      	nop			@ (mov r8, r8)
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	b013      	add	sp, #76	@ 0x4c
 8000fac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fae:	46c0      	nop			@ (mov r8, r8)
 8000fb0:	2000030c 	.word	0x2000030c
 8000fb4:	200002cc 	.word	0x200002cc
 8000fb8:	08004378 	.word	0x08004378

08000fbc <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	0002      	movs	r2, r0
 8000fc4:	1dbb      	adds	r3, r7, #6
 8000fc6:	801a      	strh	r2, [r3, #0]
    if (GPIO_Pin == TOUCH_INT_Pin) {
 8000fc8:	4b05      	ldr	r3, [pc, #20]	@ (8000fe0 <HAL_GPIO_EXTI_Callback+0x24>)
 8000fca:	881b      	ldrh	r3, [r3, #0]
 8000fcc:	1dba      	adds	r2, r7, #6
 8000fce:	8812      	ldrh	r2, [r2, #0]
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	d101      	bne.n	8000fd8 <HAL_GPIO_EXTI_Callback+0x1c>
        ILITEK_ProcessTouch();
 8000fd4:	f7ff fe64 	bl	8000ca0 <ILITEK_ProcessTouch>
    }
}
 8000fd8:	46c0      	nop			@ (mov r8, r8)
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	b002      	add	sp, #8
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	20000000 	.word	0x20000000

08000fe4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000fe4:	480d      	ldr	r0, [pc, #52]	@ (800101c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000fe6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000fe8:	f7ff fd1a 	bl	8000a20 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fec:	480c      	ldr	r0, [pc, #48]	@ (8001020 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fee:	490d      	ldr	r1, [pc, #52]	@ (8001024 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ff0:	4a0d      	ldr	r2, [pc, #52]	@ (8001028 <LoopForever+0xe>)
  movs r3, #0
 8000ff2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ff4:	e002      	b.n	8000ffc <LoopCopyDataInit>

08000ff6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ff6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ff8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ffa:	3304      	adds	r3, #4

08000ffc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ffc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ffe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001000:	d3f9      	bcc.n	8000ff6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001002:	4a0a      	ldr	r2, [pc, #40]	@ (800102c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001004:	4c0a      	ldr	r4, [pc, #40]	@ (8001030 <LoopForever+0x16>)
  movs r3, #0
 8001006:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001008:	e001      	b.n	800100e <LoopFillZerobss>

0800100a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800100a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800100c:	3204      	adds	r2, #4

0800100e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800100e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001010:	d3fb      	bcc.n	800100a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001012:	f002 fb6b 	bl	80036ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001016:	f7ff fb71 	bl	80006fc <main>

0800101a <LoopForever>:

LoopForever:
    b LoopForever
 800101a:	e7fe      	b.n	800101a <LoopForever>
   ldr   r0, =_estack
 800101c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001020:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001024:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001028:	0800447c 	.word	0x0800447c
  ldr r2, =_sbss
 800102c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001030:	200004c4 	.word	0x200004c4

08001034 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001034:	e7fe      	b.n	8001034 <ADC1_COMP_IRQHandler>
	...

08001038 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800103e:	1dfb      	adds	r3, r7, #7
 8001040:	2200      	movs	r2, #0
 8001042:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001044:	4b0b      	ldr	r3, [pc, #44]	@ (8001074 <HAL_Init+0x3c>)
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	4b0a      	ldr	r3, [pc, #40]	@ (8001074 <HAL_Init+0x3c>)
 800104a:	2140      	movs	r1, #64	@ 0x40
 800104c:	430a      	orrs	r2, r1
 800104e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001050:	2003      	movs	r0, #3
 8001052:	f000 f811 	bl	8001078 <HAL_InitTick>
 8001056:	1e03      	subs	r3, r0, #0
 8001058:	d003      	beq.n	8001062 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800105a:	1dfb      	adds	r3, r7, #7
 800105c:	2201      	movs	r2, #1
 800105e:	701a      	strb	r2, [r3, #0]
 8001060:	e001      	b.n	8001066 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001062:	f7ff fbff 	bl	8000864 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001066:	1dfb      	adds	r3, r7, #7
 8001068:	781b      	ldrb	r3, [r3, #0]
}
 800106a:	0018      	movs	r0, r3
 800106c:	46bd      	mov	sp, r7
 800106e:	b002      	add	sp, #8
 8001070:	bd80      	pop	{r7, pc}
 8001072:	46c0      	nop			@ (mov r8, r8)
 8001074:	40022000 	.word	0x40022000

08001078 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001078:	b590      	push	{r4, r7, lr}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001080:	4b14      	ldr	r3, [pc, #80]	@ (80010d4 <HAL_InitTick+0x5c>)
 8001082:	681c      	ldr	r4, [r3, #0]
 8001084:	4b14      	ldr	r3, [pc, #80]	@ (80010d8 <HAL_InitTick+0x60>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	0019      	movs	r1, r3
 800108a:	23fa      	movs	r3, #250	@ 0xfa
 800108c:	0098      	lsls	r0, r3, #2
 800108e:	f7ff f845 	bl	800011c <__udivsi3>
 8001092:	0003      	movs	r3, r0
 8001094:	0019      	movs	r1, r3
 8001096:	0020      	movs	r0, r4
 8001098:	f7ff f840 	bl	800011c <__udivsi3>
 800109c:	0003      	movs	r3, r0
 800109e:	0018      	movs	r0, r3
 80010a0:	f000 fb49 	bl	8001736 <HAL_SYSTICK_Config>
 80010a4:	1e03      	subs	r3, r0, #0
 80010a6:	d001      	beq.n	80010ac <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80010a8:	2301      	movs	r3, #1
 80010aa:	e00f      	b.n	80010cc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2b03      	cmp	r3, #3
 80010b0:	d80b      	bhi.n	80010ca <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010b2:	6879      	ldr	r1, [r7, #4]
 80010b4:	2301      	movs	r3, #1
 80010b6:	425b      	negs	r3, r3
 80010b8:	2200      	movs	r2, #0
 80010ba:	0018      	movs	r0, r3
 80010bc:	f000 fb16 	bl	80016ec <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010c0:	4b06      	ldr	r3, [pc, #24]	@ (80010dc <HAL_InitTick+0x64>)
 80010c2:	687a      	ldr	r2, [r7, #4]
 80010c4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010c6:	2300      	movs	r3, #0
 80010c8:	e000      	b.n	80010cc <HAL_InitTick+0x54>
    return HAL_ERROR;
 80010ca:	2301      	movs	r3, #1
}
 80010cc:	0018      	movs	r0, r3
 80010ce:	46bd      	mov	sp, r7
 80010d0:	b003      	add	sp, #12
 80010d2:	bd90      	pop	{r4, r7, pc}
 80010d4:	2000000c 	.word	0x2000000c
 80010d8:	20000014 	.word	0x20000014
 80010dc:	20000010 	.word	0x20000010

080010e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010e4:	4b05      	ldr	r3, [pc, #20]	@ (80010fc <HAL_IncTick+0x1c>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	001a      	movs	r2, r3
 80010ea:	4b05      	ldr	r3, [pc, #20]	@ (8001100 <HAL_IncTick+0x20>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	18d2      	adds	r2, r2, r3
 80010f0:	4b03      	ldr	r3, [pc, #12]	@ (8001100 <HAL_IncTick+0x20>)
 80010f2:	601a      	str	r2, [r3, #0]
}
 80010f4:	46c0      	nop			@ (mov r8, r8)
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	46c0      	nop			@ (mov r8, r8)
 80010fc:	20000014 	.word	0x20000014
 8001100:	20000374 	.word	0x20000374

08001104 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  return uwTick;
 8001108:	4b02      	ldr	r3, [pc, #8]	@ (8001114 <HAL_GetTick+0x10>)
 800110a:	681b      	ldr	r3, [r3, #0]
}
 800110c:	0018      	movs	r0, r3
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	46c0      	nop			@ (mov r8, r8)
 8001114:	20000374 	.word	0x20000374

08001118 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001120:	f7ff fff0 	bl	8001104 <HAL_GetTick>
 8001124:	0003      	movs	r3, r0
 8001126:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	3301      	adds	r3, #1
 8001130:	d005      	beq.n	800113e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001132:	4b0a      	ldr	r3, [pc, #40]	@ (800115c <HAL_Delay+0x44>)
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	001a      	movs	r2, r3
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	189b      	adds	r3, r3, r2
 800113c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800113e:	46c0      	nop			@ (mov r8, r8)
 8001140:	f7ff ffe0 	bl	8001104 <HAL_GetTick>
 8001144:	0002      	movs	r2, r0
 8001146:	68bb      	ldr	r3, [r7, #8]
 8001148:	1ad3      	subs	r3, r2, r3
 800114a:	68fa      	ldr	r2, [r7, #12]
 800114c:	429a      	cmp	r2, r3
 800114e:	d8f7      	bhi.n	8001140 <HAL_Delay+0x28>
  {
  }
}
 8001150:	46c0      	nop			@ (mov r8, r8)
 8001152:	46c0      	nop			@ (mov r8, r8)
 8001154:	46bd      	mov	sp, r7
 8001156:	b004      	add	sp, #16
 8001158:	bd80      	pop	{r7, pc}
 800115a:	46c0      	nop			@ (mov r8, r8)
 800115c:	20000014 	.word	0x20000014

08001160 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d101      	bne.n	8001172 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 800116e:	2301      	movs	r3, #1
 8001170:	e159      	b.n	8001426 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001176:	2b00      	cmp	r3, #0
 8001178:	d10a      	bne.n	8001190 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2200      	movs	r2, #0
 800117e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2250      	movs	r2, #80	@ 0x50
 8001184:	2100      	movs	r1, #0
 8001186:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	0018      	movs	r0, r3
 800118c:	f7ff f8b8 	bl	8000300 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001194:	2210      	movs	r2, #16
 8001196:	4013      	ands	r3, r2
 8001198:	2b10      	cmp	r3, #16
 800119a:	d005      	beq.n	80011a8 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	2204      	movs	r2, #4
 80011a4:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80011a6:	d00b      	beq.n	80011c0 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80011ac:	2210      	movs	r2, #16
 80011ae:	431a      	orrs	r2, r3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2250      	movs	r2, #80	@ 0x50
 80011b8:	2100      	movs	r1, #0
 80011ba:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80011bc:	2301      	movs	r3, #1
 80011be:	e132      	b.n	8001426 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80011c4:	4a9a      	ldr	r2, [pc, #616]	@ (8001430 <HAL_ADC_Init+0x2d0>)
 80011c6:	4013      	ands	r3, r2
 80011c8:	2202      	movs	r2, #2
 80011ca:	431a      	orrs	r2, r3
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	2203      	movs	r2, #3
 80011d8:	4013      	ands	r3, r2
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d108      	bne.n	80011f0 <HAL_ADC_Init+0x90>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	2201      	movs	r2, #1
 80011e6:	4013      	ands	r3, r2
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d101      	bne.n	80011f0 <HAL_ADC_Init+0x90>
 80011ec:	2301      	movs	r3, #1
 80011ee:	e000      	b.n	80011f2 <HAL_ADC_Init+0x92>
 80011f0:	2300      	movs	r3, #0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d149      	bne.n	800128a <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	685a      	ldr	r2, [r3, #4]
 80011fa:	23c0      	movs	r3, #192	@ 0xc0
 80011fc:	061b      	lsls	r3, r3, #24
 80011fe:	429a      	cmp	r2, r3
 8001200:	d00b      	beq.n	800121a <HAL_ADC_Init+0xba>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	685a      	ldr	r2, [r3, #4]
 8001206:	2380      	movs	r3, #128	@ 0x80
 8001208:	05db      	lsls	r3, r3, #23
 800120a:	429a      	cmp	r2, r3
 800120c:	d005      	beq.n	800121a <HAL_ADC_Init+0xba>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	685a      	ldr	r2, [r3, #4]
 8001212:	2380      	movs	r3, #128	@ 0x80
 8001214:	061b      	lsls	r3, r3, #24
 8001216:	429a      	cmp	r2, r3
 8001218:	d111      	bne.n	800123e <HAL_ADC_Init+0xde>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	691a      	ldr	r2, [r3, #16]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	0092      	lsls	r2, r2, #2
 8001226:	0892      	lsrs	r2, r2, #2
 8001228:	611a      	str	r2, [r3, #16]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	6919      	ldr	r1, [r3, #16]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	685a      	ldr	r2, [r3, #4]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	430a      	orrs	r2, r1
 800123a:	611a      	str	r2, [r3, #16]
 800123c:	e014      	b.n	8001268 <HAL_ADC_Init+0x108>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	691a      	ldr	r2, [r3, #16]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	0092      	lsls	r2, r2, #2
 800124a:	0892      	lsrs	r2, r2, #2
 800124c:	611a      	str	r2, [r3, #16]
 800124e:	4b79      	ldr	r3, [pc, #484]	@ (8001434 <HAL_ADC_Init+0x2d4>)
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	4b78      	ldr	r3, [pc, #480]	@ (8001434 <HAL_ADC_Init+0x2d4>)
 8001254:	4978      	ldr	r1, [pc, #480]	@ (8001438 <HAL_ADC_Init+0x2d8>)
 8001256:	400a      	ands	r2, r1
 8001258:	601a      	str	r2, [r3, #0]
 800125a:	4b76      	ldr	r3, [pc, #472]	@ (8001434 <HAL_ADC_Init+0x2d4>)
 800125c:	6819      	ldr	r1, [r3, #0]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	685a      	ldr	r2, [r3, #4]
 8001262:	4b74      	ldr	r3, [pc, #464]	@ (8001434 <HAL_ADC_Init+0x2d4>)
 8001264:	430a      	orrs	r2, r1
 8001266:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	68da      	ldr	r2, [r3, #12]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	2118      	movs	r1, #24
 8001274:	438a      	bics	r2, r1
 8001276:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	68d9      	ldr	r1, [r3, #12]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	689a      	ldr	r2, [r3, #8]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	430a      	orrs	r2, r1
 8001288:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 800128a:	4b6a      	ldr	r3, [pc, #424]	@ (8001434 <HAL_ADC_Init+0x2d4>)
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	4b69      	ldr	r3, [pc, #420]	@ (8001434 <HAL_ADC_Init+0x2d4>)
 8001290:	496a      	ldr	r1, [pc, #424]	@ (800143c <HAL_ADC_Init+0x2dc>)
 8001292:	400a      	ands	r2, r1
 8001294:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 8001296:	4b67      	ldr	r3, [pc, #412]	@ (8001434 <HAL_ADC_Init+0x2d4>)
 8001298:	6819      	ldr	r1, [r3, #0]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800129e:	065a      	lsls	r2, r3, #25
 80012a0:	4b64      	ldr	r3, [pc, #400]	@ (8001434 <HAL_ADC_Init+0x2d4>)
 80012a2:	430a      	orrs	r2, r1
 80012a4:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	689a      	ldr	r2, [r3, #8]
 80012ac:	2380      	movs	r3, #128	@ 0x80
 80012ae:	055b      	lsls	r3, r3, #21
 80012b0:	4013      	ands	r3, r2
 80012b2:	d108      	bne.n	80012c6 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	689a      	ldr	r2, [r3, #8]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	2180      	movs	r1, #128	@ 0x80
 80012c0:	0549      	lsls	r1, r1, #21
 80012c2:	430a      	orrs	r2, r1
 80012c4:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	68da      	ldr	r2, [r3, #12]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	495b      	ldr	r1, [pc, #364]	@ (8001440 <HAL_ADC_Init+0x2e0>)
 80012d2:	400a      	ands	r2, r1
 80012d4:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	68d9      	ldr	r1, [r3, #12]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	691b      	ldr	r3, [r3, #16]
 80012e4:	2b02      	cmp	r3, #2
 80012e6:	d101      	bne.n	80012ec <HAL_ADC_Init+0x18c>
 80012e8:	2304      	movs	r3, #4
 80012ea:	e000      	b.n	80012ee <HAL_ADC_Init+0x18e>
 80012ec:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80012ee:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2020      	movs	r0, #32
 80012f4:	5c1b      	ldrb	r3, [r3, r0]
 80012f6:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80012f8:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	202c      	movs	r0, #44	@ 0x2c
 80012fe:	5c1b      	ldrb	r3, [r3, r0]
 8001300:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001302:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001308:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	699b      	ldr	r3, [r3, #24]
 800130e:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8001310:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	69db      	ldr	r3, [r3, #28]
 8001316:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001318:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	430a      	orrs	r2, r1
 8001320:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001326:	23c2      	movs	r3, #194	@ 0xc2
 8001328:	33ff      	adds	r3, #255	@ 0xff
 800132a:	429a      	cmp	r2, r3
 800132c:	d00b      	beq.n	8001346 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	68d9      	ldr	r1, [r3, #12]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800133c:	431a      	orrs	r2, r3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	430a      	orrs	r2, r1
 8001344:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2221      	movs	r2, #33	@ 0x21
 800134a:	5c9b      	ldrb	r3, [r3, r2]
 800134c:	2b01      	cmp	r3, #1
 800134e:	d11a      	bne.n	8001386 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2220      	movs	r2, #32
 8001354:	5c9b      	ldrb	r3, [r3, r2]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d109      	bne.n	800136e <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	68da      	ldr	r2, [r3, #12]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2180      	movs	r1, #128	@ 0x80
 8001366:	0249      	lsls	r1, r1, #9
 8001368:	430a      	orrs	r2, r1
 800136a:	60da      	str	r2, [r3, #12]
 800136c:	e00b      	b.n	8001386 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001372:	2220      	movs	r2, #32
 8001374:	431a      	orrs	r2, r3
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800137e:	2201      	movs	r2, #1
 8001380:	431a      	orrs	r2, r3
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800138a:	2b01      	cmp	r3, #1
 800138c:	d11f      	bne.n	80013ce <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	691a      	ldr	r2, [r3, #16]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	492a      	ldr	r1, [pc, #168]	@ (8001444 <HAL_ADC_Init+0x2e4>)
 800139a:	400a      	ands	r2, r1
 800139c:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	6919      	ldr	r1, [r3, #16]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 80013ac:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 80013b2:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	430a      	orrs	r2, r1
 80013ba:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	691a      	ldr	r2, [r3, #16]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	2101      	movs	r1, #1
 80013c8:	430a      	orrs	r2, r1
 80013ca:	611a      	str	r2, [r3, #16]
 80013cc:	e00e      	b.n	80013ec <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	691b      	ldr	r3, [r3, #16]
 80013d4:	2201      	movs	r2, #1
 80013d6:	4013      	ands	r3, r2
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d107      	bne.n	80013ec <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	691a      	ldr	r2, [r3, #16]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	2101      	movs	r1, #1
 80013e8:	438a      	bics	r2, r1
 80013ea:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	695a      	ldr	r2, [r3, #20]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	2107      	movs	r1, #7
 80013f8:	438a      	bics	r2, r1
 80013fa:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	6959      	ldr	r1, [r3, #20]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	430a      	orrs	r2, r1
 800140c:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2200      	movs	r2, #0
 8001412:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001418:	2203      	movs	r2, #3
 800141a:	4393      	bics	r3, r2
 800141c:	2201      	movs	r2, #1
 800141e:	431a      	orrs	r2, r3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8001424:	2300      	movs	r3, #0
}
 8001426:	0018      	movs	r0, r3
 8001428:	46bd      	mov	sp, r7
 800142a:	b002      	add	sp, #8
 800142c:	bd80      	pop	{r7, pc}
 800142e:	46c0      	nop			@ (mov r8, r8)
 8001430:	fffffefd 	.word	0xfffffefd
 8001434:	40012708 	.word	0x40012708
 8001438:	ffc3ffff 	.word	0xffc3ffff
 800143c:	fdffffff 	.word	0xfdffffff
 8001440:	fffe0219 	.word	0xfffe0219
 8001444:	fffffc03 	.word	0xfffffc03

08001448 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2250      	movs	r2, #80	@ 0x50
 8001456:	5c9b      	ldrb	r3, [r3, r2]
 8001458:	2b01      	cmp	r3, #1
 800145a:	d101      	bne.n	8001460 <HAL_ADC_ConfigChannel+0x18>
 800145c:	2302      	movs	r3, #2
 800145e:	e06c      	b.n	800153a <HAL_ADC_ConfigChannel+0xf2>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2250      	movs	r2, #80	@ 0x50
 8001464:	2101      	movs	r1, #1
 8001466:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	2204      	movs	r2, #4
 8001470:	4013      	ands	r3, r2
 8001472:	d00b      	beq.n	800148c <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001478:	2220      	movs	r2, #32
 800147a:	431a      	orrs	r2, r3
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2250      	movs	r2, #80	@ 0x50
 8001484:	2100      	movs	r1, #0
 8001486:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001488:	2301      	movs	r3, #1
 800148a:	e056      	b.n	800153a <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	4a2c      	ldr	r2, [pc, #176]	@ (8001544 <HAL_ADC_ConfigChannel+0xfc>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d028      	beq.n	80014e8 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	035b      	lsls	r3, r3, #13
 80014a2:	0b5a      	lsrs	r2, r3, #13
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	430a      	orrs	r2, r1
 80014aa:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	2380      	movs	r3, #128	@ 0x80
 80014b2:	02db      	lsls	r3, r3, #11
 80014b4:	4013      	ands	r3, r2
 80014b6:	d009      	beq.n	80014cc <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 80014b8:	4b23      	ldr	r3, [pc, #140]	@ (8001548 <HAL_ADC_ConfigChannel+0x100>)
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	4b22      	ldr	r3, [pc, #136]	@ (8001548 <HAL_ADC_ConfigChannel+0x100>)
 80014be:	2180      	movs	r1, #128	@ 0x80
 80014c0:	0409      	lsls	r1, r1, #16
 80014c2:	430a      	orrs	r2, r1
 80014c4:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 80014c6:	200a      	movs	r0, #10
 80014c8:	f000 f844 	bl	8001554 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	2380      	movs	r3, #128	@ 0x80
 80014d2:	029b      	lsls	r3, r3, #10
 80014d4:	4013      	ands	r3, r2
 80014d6:	d02b      	beq.n	8001530 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 80014d8:	4b1b      	ldr	r3, [pc, #108]	@ (8001548 <HAL_ADC_ConfigChannel+0x100>)
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	4b1a      	ldr	r3, [pc, #104]	@ (8001548 <HAL_ADC_ConfigChannel+0x100>)
 80014de:	2180      	movs	r1, #128	@ 0x80
 80014e0:	03c9      	lsls	r1, r1, #15
 80014e2:	430a      	orrs	r2, r1
 80014e4:	601a      	str	r2, [r3, #0]
 80014e6:	e023      	b.n	8001530 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	035b      	lsls	r3, r3, #13
 80014f4:	0b5b      	lsrs	r3, r3, #13
 80014f6:	43d9      	mvns	r1, r3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	400a      	ands	r2, r1
 80014fe:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	2380      	movs	r3, #128	@ 0x80
 8001506:	02db      	lsls	r3, r3, #11
 8001508:	4013      	ands	r3, r2
 800150a:	d005      	beq.n	8001518 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 800150c:	4b0e      	ldr	r3, [pc, #56]	@ (8001548 <HAL_ADC_ConfigChannel+0x100>)
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	4b0d      	ldr	r3, [pc, #52]	@ (8001548 <HAL_ADC_ConfigChannel+0x100>)
 8001512:	490e      	ldr	r1, [pc, #56]	@ (800154c <HAL_ADC_ConfigChannel+0x104>)
 8001514:	400a      	ands	r2, r1
 8001516:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	2380      	movs	r3, #128	@ 0x80
 800151e:	029b      	lsls	r3, r3, #10
 8001520:	4013      	ands	r3, r2
 8001522:	d005      	beq.n	8001530 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 8001524:	4b08      	ldr	r3, [pc, #32]	@ (8001548 <HAL_ADC_ConfigChannel+0x100>)
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	4b07      	ldr	r3, [pc, #28]	@ (8001548 <HAL_ADC_ConfigChannel+0x100>)
 800152a:	4909      	ldr	r1, [pc, #36]	@ (8001550 <HAL_ADC_ConfigChannel+0x108>)
 800152c:	400a      	ands	r2, r1
 800152e:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2250      	movs	r2, #80	@ 0x50
 8001534:	2100      	movs	r1, #0
 8001536:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8001538:	2300      	movs	r3, #0
}
 800153a:	0018      	movs	r0, r3
 800153c:	46bd      	mov	sp, r7
 800153e:	b002      	add	sp, #8
 8001540:	bd80      	pop	{r7, pc}
 8001542:	46c0      	nop			@ (mov r8, r8)
 8001544:	00001001 	.word	0x00001001
 8001548:	40012708 	.word	0x40012708
 800154c:	ff7fffff 	.word	0xff7fffff
 8001550:	ffbfffff 	.word	0xffbfffff

08001554 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 800155c:	4b0b      	ldr	r3, [pc, #44]	@ (800158c <ADC_DelayMicroSecond+0x38>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	490b      	ldr	r1, [pc, #44]	@ (8001590 <ADC_DelayMicroSecond+0x3c>)
 8001562:	0018      	movs	r0, r3
 8001564:	f7fe fdda 	bl	800011c <__udivsi3>
 8001568:	0003      	movs	r3, r0
 800156a:	001a      	movs	r2, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	4353      	muls	r3, r2
 8001570:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 8001572:	e002      	b.n	800157a <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	3b01      	subs	r3, #1
 8001578:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d1f9      	bne.n	8001574 <ADC_DelayMicroSecond+0x20>
  }
}
 8001580:	46c0      	nop			@ (mov r8, r8)
 8001582:	46c0      	nop			@ (mov r8, r8)
 8001584:	46bd      	mov	sp, r7
 8001586:	b004      	add	sp, #16
 8001588:	bd80      	pop	{r7, pc}
 800158a:	46c0      	nop			@ (mov r8, r8)
 800158c:	2000000c 	.word	0x2000000c
 8001590:	000f4240 	.word	0x000f4240

08001594 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	0002      	movs	r2, r0
 800159c:	1dfb      	adds	r3, r7, #7
 800159e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80015a0:	1dfb      	adds	r3, r7, #7
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	2b7f      	cmp	r3, #127	@ 0x7f
 80015a6:	d809      	bhi.n	80015bc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015a8:	1dfb      	adds	r3, r7, #7
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	001a      	movs	r2, r3
 80015ae:	231f      	movs	r3, #31
 80015b0:	401a      	ands	r2, r3
 80015b2:	4b04      	ldr	r3, [pc, #16]	@ (80015c4 <__NVIC_EnableIRQ+0x30>)
 80015b4:	2101      	movs	r1, #1
 80015b6:	4091      	lsls	r1, r2
 80015b8:	000a      	movs	r2, r1
 80015ba:	601a      	str	r2, [r3, #0]
  }
}
 80015bc:	46c0      	nop			@ (mov r8, r8)
 80015be:	46bd      	mov	sp, r7
 80015c0:	b002      	add	sp, #8
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	e000e100 	.word	0xe000e100

080015c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015c8:	b590      	push	{r4, r7, lr}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	0002      	movs	r2, r0
 80015d0:	6039      	str	r1, [r7, #0]
 80015d2:	1dfb      	adds	r3, r7, #7
 80015d4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80015d6:	1dfb      	adds	r3, r7, #7
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	2b7f      	cmp	r3, #127	@ 0x7f
 80015dc:	d828      	bhi.n	8001630 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015de:	4a2f      	ldr	r2, [pc, #188]	@ (800169c <__NVIC_SetPriority+0xd4>)
 80015e0:	1dfb      	adds	r3, r7, #7
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	b25b      	sxtb	r3, r3
 80015e6:	089b      	lsrs	r3, r3, #2
 80015e8:	33c0      	adds	r3, #192	@ 0xc0
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	589b      	ldr	r3, [r3, r2]
 80015ee:	1dfa      	adds	r2, r7, #7
 80015f0:	7812      	ldrb	r2, [r2, #0]
 80015f2:	0011      	movs	r1, r2
 80015f4:	2203      	movs	r2, #3
 80015f6:	400a      	ands	r2, r1
 80015f8:	00d2      	lsls	r2, r2, #3
 80015fa:	21ff      	movs	r1, #255	@ 0xff
 80015fc:	4091      	lsls	r1, r2
 80015fe:	000a      	movs	r2, r1
 8001600:	43d2      	mvns	r2, r2
 8001602:	401a      	ands	r2, r3
 8001604:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	019b      	lsls	r3, r3, #6
 800160a:	22ff      	movs	r2, #255	@ 0xff
 800160c:	401a      	ands	r2, r3
 800160e:	1dfb      	adds	r3, r7, #7
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	0018      	movs	r0, r3
 8001614:	2303      	movs	r3, #3
 8001616:	4003      	ands	r3, r0
 8001618:	00db      	lsls	r3, r3, #3
 800161a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800161c:	481f      	ldr	r0, [pc, #124]	@ (800169c <__NVIC_SetPriority+0xd4>)
 800161e:	1dfb      	adds	r3, r7, #7
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	b25b      	sxtb	r3, r3
 8001624:	089b      	lsrs	r3, r3, #2
 8001626:	430a      	orrs	r2, r1
 8001628:	33c0      	adds	r3, #192	@ 0xc0
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800162e:	e031      	b.n	8001694 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001630:	4a1b      	ldr	r2, [pc, #108]	@ (80016a0 <__NVIC_SetPriority+0xd8>)
 8001632:	1dfb      	adds	r3, r7, #7
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	0019      	movs	r1, r3
 8001638:	230f      	movs	r3, #15
 800163a:	400b      	ands	r3, r1
 800163c:	3b08      	subs	r3, #8
 800163e:	089b      	lsrs	r3, r3, #2
 8001640:	3306      	adds	r3, #6
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	18d3      	adds	r3, r2, r3
 8001646:	3304      	adds	r3, #4
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	1dfa      	adds	r2, r7, #7
 800164c:	7812      	ldrb	r2, [r2, #0]
 800164e:	0011      	movs	r1, r2
 8001650:	2203      	movs	r2, #3
 8001652:	400a      	ands	r2, r1
 8001654:	00d2      	lsls	r2, r2, #3
 8001656:	21ff      	movs	r1, #255	@ 0xff
 8001658:	4091      	lsls	r1, r2
 800165a:	000a      	movs	r2, r1
 800165c:	43d2      	mvns	r2, r2
 800165e:	401a      	ands	r2, r3
 8001660:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	019b      	lsls	r3, r3, #6
 8001666:	22ff      	movs	r2, #255	@ 0xff
 8001668:	401a      	ands	r2, r3
 800166a:	1dfb      	adds	r3, r7, #7
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	0018      	movs	r0, r3
 8001670:	2303      	movs	r3, #3
 8001672:	4003      	ands	r3, r0
 8001674:	00db      	lsls	r3, r3, #3
 8001676:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001678:	4809      	ldr	r0, [pc, #36]	@ (80016a0 <__NVIC_SetPriority+0xd8>)
 800167a:	1dfb      	adds	r3, r7, #7
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	001c      	movs	r4, r3
 8001680:	230f      	movs	r3, #15
 8001682:	4023      	ands	r3, r4
 8001684:	3b08      	subs	r3, #8
 8001686:	089b      	lsrs	r3, r3, #2
 8001688:	430a      	orrs	r2, r1
 800168a:	3306      	adds	r3, #6
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	18c3      	adds	r3, r0, r3
 8001690:	3304      	adds	r3, #4
 8001692:	601a      	str	r2, [r3, #0]
}
 8001694:	46c0      	nop			@ (mov r8, r8)
 8001696:	46bd      	mov	sp, r7
 8001698:	b003      	add	sp, #12
 800169a:	bd90      	pop	{r4, r7, pc}
 800169c:	e000e100 	.word	0xe000e100
 80016a0:	e000ed00 	.word	0xe000ed00

080016a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	1e5a      	subs	r2, r3, #1
 80016b0:	2380      	movs	r3, #128	@ 0x80
 80016b2:	045b      	lsls	r3, r3, #17
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d301      	bcc.n	80016bc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016b8:	2301      	movs	r3, #1
 80016ba:	e010      	b.n	80016de <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016bc:	4b0a      	ldr	r3, [pc, #40]	@ (80016e8 <SysTick_Config+0x44>)
 80016be:	687a      	ldr	r2, [r7, #4]
 80016c0:	3a01      	subs	r2, #1
 80016c2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016c4:	2301      	movs	r3, #1
 80016c6:	425b      	negs	r3, r3
 80016c8:	2103      	movs	r1, #3
 80016ca:	0018      	movs	r0, r3
 80016cc:	f7ff ff7c 	bl	80015c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016d0:	4b05      	ldr	r3, [pc, #20]	@ (80016e8 <SysTick_Config+0x44>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016d6:	4b04      	ldr	r3, [pc, #16]	@ (80016e8 <SysTick_Config+0x44>)
 80016d8:	2207      	movs	r2, #7
 80016da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016dc:	2300      	movs	r3, #0
}
 80016de:	0018      	movs	r0, r3
 80016e0:	46bd      	mov	sp, r7
 80016e2:	b002      	add	sp, #8
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	46c0      	nop			@ (mov r8, r8)
 80016e8:	e000e010 	.word	0xe000e010

080016ec <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	60b9      	str	r1, [r7, #8]
 80016f4:	607a      	str	r2, [r7, #4]
 80016f6:	210f      	movs	r1, #15
 80016f8:	187b      	adds	r3, r7, r1
 80016fa:	1c02      	adds	r2, r0, #0
 80016fc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80016fe:	68ba      	ldr	r2, [r7, #8]
 8001700:	187b      	adds	r3, r7, r1
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	b25b      	sxtb	r3, r3
 8001706:	0011      	movs	r1, r2
 8001708:	0018      	movs	r0, r3
 800170a:	f7ff ff5d 	bl	80015c8 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 800170e:	46c0      	nop			@ (mov r8, r8)
 8001710:	46bd      	mov	sp, r7
 8001712:	b004      	add	sp, #16
 8001714:	bd80      	pop	{r7, pc}

08001716 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001716:	b580      	push	{r7, lr}
 8001718:	b082      	sub	sp, #8
 800171a:	af00      	add	r7, sp, #0
 800171c:	0002      	movs	r2, r0
 800171e:	1dfb      	adds	r3, r7, #7
 8001720:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001722:	1dfb      	adds	r3, r7, #7
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	b25b      	sxtb	r3, r3
 8001728:	0018      	movs	r0, r3
 800172a:	f7ff ff33 	bl	8001594 <__NVIC_EnableIRQ>
}
 800172e:	46c0      	nop			@ (mov r8, r8)
 8001730:	46bd      	mov	sp, r7
 8001732:	b002      	add	sp, #8
 8001734:	bd80      	pop	{r7, pc}

08001736 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001736:	b580      	push	{r7, lr}
 8001738:	b082      	sub	sp, #8
 800173a:	af00      	add	r7, sp, #0
 800173c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	0018      	movs	r0, r3
 8001742:	f7ff ffaf 	bl	80016a4 <SysTick_Config>
 8001746:	0003      	movs	r3, r0
}
 8001748:	0018      	movs	r0, r3
 800174a:	46bd      	mov	sp, r7
 800174c:	b002      	add	sp, #8
 800174e:	bd80      	pop	{r7, pc}

08001750 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d101      	bne.n	8001762 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e061      	b.n	8001826 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a32      	ldr	r2, [pc, #200]	@ (8001830 <HAL_DMA_Init+0xe0>)
 8001768:	4694      	mov	ip, r2
 800176a:	4463      	add	r3, ip
 800176c:	2114      	movs	r1, #20
 800176e:	0018      	movs	r0, r3
 8001770:	f7fe fcd4 	bl	800011c <__udivsi3>
 8001774:	0003      	movs	r3, r0
 8001776:	009a      	lsls	r2, r3, #2
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	4a2d      	ldr	r2, [pc, #180]	@ (8001834 <HAL_DMA_Init+0xe4>)
 8001780:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2225      	movs	r2, #37	@ 0x25
 8001786:	2102      	movs	r1, #2
 8001788:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	4a28      	ldr	r2, [pc, #160]	@ (8001838 <HAL_DMA_Init+0xe8>)
 8001796:	4013      	ands	r3, r2
 8001798:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80017a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	691b      	ldr	r3, [r3, #16]
 80017a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	699b      	ldr	r3, [r3, #24]
 80017b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6a1b      	ldr	r3, [r3, #32]
 80017c0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80017c2:	68fa      	ldr	r2, [r7, #12]
 80017c4:	4313      	orrs	r3, r2
 80017c6:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	68fa      	ldr	r2, [r7, #12]
 80017ce:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	689a      	ldr	r2, [r3, #8]
 80017d4:	2380      	movs	r3, #128	@ 0x80
 80017d6:	01db      	lsls	r3, r3, #7
 80017d8:	429a      	cmp	r2, r3
 80017da:	d018      	beq.n	800180e <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80017dc:	4b17      	ldr	r3, [pc, #92]	@ (800183c <HAL_DMA_Init+0xec>)
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017e4:	211c      	movs	r1, #28
 80017e6:	400b      	ands	r3, r1
 80017e8:	210f      	movs	r1, #15
 80017ea:	4099      	lsls	r1, r3
 80017ec:	000b      	movs	r3, r1
 80017ee:	43d9      	mvns	r1, r3
 80017f0:	4b12      	ldr	r3, [pc, #72]	@ (800183c <HAL_DMA_Init+0xec>)
 80017f2:	400a      	ands	r2, r1
 80017f4:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80017f6:	4b11      	ldr	r3, [pc, #68]	@ (800183c <HAL_DMA_Init+0xec>)
 80017f8:	6819      	ldr	r1, [r3, #0]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	685a      	ldr	r2, [r3, #4]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001802:	201c      	movs	r0, #28
 8001804:	4003      	ands	r3, r0
 8001806:	409a      	lsls	r2, r3
 8001808:	4b0c      	ldr	r3, [pc, #48]	@ (800183c <HAL_DMA_Init+0xec>)
 800180a:	430a      	orrs	r2, r1
 800180c:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2200      	movs	r2, #0
 8001812:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2225      	movs	r2, #37	@ 0x25
 8001818:	2101      	movs	r1, #1
 800181a:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2224      	movs	r2, #36	@ 0x24
 8001820:	2100      	movs	r1, #0
 8001822:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001824:	2300      	movs	r3, #0
}
 8001826:	0018      	movs	r0, r3
 8001828:	46bd      	mov	sp, r7
 800182a:	b004      	add	sp, #16
 800182c:	bd80      	pop	{r7, pc}
 800182e:	46c0      	nop			@ (mov r8, r8)
 8001830:	bffdfff8 	.word	0xbffdfff8
 8001834:	40020000 	.word	0x40020000
 8001838:	ffff800f 	.word	0xffff800f
 800183c:	400200a8 	.word	0x400200a8

08001840 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b084      	sub	sp, #16
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800185c:	221c      	movs	r2, #28
 800185e:	4013      	ands	r3, r2
 8001860:	2204      	movs	r2, #4
 8001862:	409a      	lsls	r2, r3
 8001864:	0013      	movs	r3, r2
 8001866:	68fa      	ldr	r2, [r7, #12]
 8001868:	4013      	ands	r3, r2
 800186a:	d026      	beq.n	80018ba <HAL_DMA_IRQHandler+0x7a>
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	2204      	movs	r2, #4
 8001870:	4013      	ands	r3, r2
 8001872:	d022      	beq.n	80018ba <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	2220      	movs	r2, #32
 800187c:	4013      	ands	r3, r2
 800187e:	d107      	bne.n	8001890 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	2104      	movs	r1, #4
 800188c:	438a      	bics	r2, r1
 800188e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001894:	221c      	movs	r2, #28
 8001896:	401a      	ands	r2, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800189c:	2104      	movs	r1, #4
 800189e:	4091      	lsls	r1, r2
 80018a0:	000a      	movs	r2, r1
 80018a2:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d100      	bne.n	80018ae <HAL_DMA_IRQHandler+0x6e>
 80018ac:	e071      	b.n	8001992 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	0010      	movs	r0, r2
 80018b6:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 80018b8:	e06b      	b.n	8001992 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018be:	221c      	movs	r2, #28
 80018c0:	4013      	ands	r3, r2
 80018c2:	2202      	movs	r2, #2
 80018c4:	409a      	lsls	r2, r3
 80018c6:	0013      	movs	r3, r2
 80018c8:	68fa      	ldr	r2, [r7, #12]
 80018ca:	4013      	ands	r3, r2
 80018cc:	d02d      	beq.n	800192a <HAL_DMA_IRQHandler+0xea>
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	2202      	movs	r2, #2
 80018d2:	4013      	ands	r3, r2
 80018d4:	d029      	beq.n	800192a <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	2220      	movs	r2, #32
 80018de:	4013      	ands	r3, r2
 80018e0:	d10b      	bne.n	80018fa <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	210a      	movs	r1, #10
 80018ee:	438a      	bics	r2, r1
 80018f0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2225      	movs	r2, #37	@ 0x25
 80018f6:	2101      	movs	r1, #1
 80018f8:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018fe:	221c      	movs	r2, #28
 8001900:	401a      	ands	r2, r3
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001906:	2102      	movs	r1, #2
 8001908:	4091      	lsls	r1, r2
 800190a:	000a      	movs	r2, r1
 800190c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2224      	movs	r2, #36	@ 0x24
 8001912:	2100      	movs	r1, #0
 8001914:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800191a:	2b00      	cmp	r3, #0
 800191c:	d039      	beq.n	8001992 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	0010      	movs	r0, r2
 8001926:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001928:	e033      	b.n	8001992 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800192e:	221c      	movs	r2, #28
 8001930:	4013      	ands	r3, r2
 8001932:	2208      	movs	r2, #8
 8001934:	409a      	lsls	r2, r3
 8001936:	0013      	movs	r3, r2
 8001938:	68fa      	ldr	r2, [r7, #12]
 800193a:	4013      	ands	r3, r2
 800193c:	d02a      	beq.n	8001994 <HAL_DMA_IRQHandler+0x154>
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	2208      	movs	r2, #8
 8001942:	4013      	ands	r3, r2
 8001944:	d026      	beq.n	8001994 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	210e      	movs	r1, #14
 8001952:	438a      	bics	r2, r1
 8001954:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800195a:	221c      	movs	r2, #28
 800195c:	401a      	ands	r2, r3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001962:	2101      	movs	r1, #1
 8001964:	4091      	lsls	r1, r2
 8001966:	000a      	movs	r2, r1
 8001968:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2201      	movs	r2, #1
 800196e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2225      	movs	r2, #37	@ 0x25
 8001974:	2101      	movs	r1, #1
 8001976:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2224      	movs	r2, #36	@ 0x24
 800197c:	2100      	movs	r1, #0
 800197e:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001984:	2b00      	cmp	r3, #0
 8001986:	d005      	beq.n	8001994 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800198c:	687a      	ldr	r2, [r7, #4]
 800198e:	0010      	movs	r0, r2
 8001990:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001992:	46c0      	nop			@ (mov r8, r8)
 8001994:	46c0      	nop			@ (mov r8, r8)
}
 8001996:	46bd      	mov	sp, r7
 8001998:	b004      	add	sp, #16
 800199a:	bd80      	pop	{r7, pc}

0800199c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b086      	sub	sp, #24
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80019a6:	2300      	movs	r3, #0
 80019a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019aa:	2300      	movs	r3, #0
 80019ac:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80019ae:	2300      	movs	r3, #0
 80019b0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80019b2:	e14f      	b.n	8001c54 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	2101      	movs	r1, #1
 80019ba:	697a      	ldr	r2, [r7, #20]
 80019bc:	4091      	lsls	r1, r2
 80019be:	000a      	movs	r2, r1
 80019c0:	4013      	ands	r3, r2
 80019c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d100      	bne.n	80019cc <HAL_GPIO_Init+0x30>
 80019ca:	e140      	b.n	8001c4e <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	2203      	movs	r2, #3
 80019d2:	4013      	ands	r3, r2
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d005      	beq.n	80019e4 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	2203      	movs	r2, #3
 80019de:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80019e0:	2b02      	cmp	r3, #2
 80019e2:	d130      	bne.n	8001a46 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	005b      	lsls	r3, r3, #1
 80019ee:	2203      	movs	r2, #3
 80019f0:	409a      	lsls	r2, r3
 80019f2:	0013      	movs	r3, r2
 80019f4:	43da      	mvns	r2, r3
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	4013      	ands	r3, r2
 80019fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	68da      	ldr	r2, [r3, #12]
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	005b      	lsls	r3, r3, #1
 8001a04:	409a      	lsls	r2, r3
 8001a06:	0013      	movs	r3, r2
 8001a08:	693a      	ldr	r2, [r7, #16]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	693a      	ldr	r2, [r7, #16]
 8001a12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	409a      	lsls	r2, r3
 8001a20:	0013      	movs	r3, r2
 8001a22:	43da      	mvns	r2, r3
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	4013      	ands	r3, r2
 8001a28:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	091b      	lsrs	r3, r3, #4
 8001a30:	2201      	movs	r2, #1
 8001a32:	401a      	ands	r2, r3
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	409a      	lsls	r2, r3
 8001a38:	0013      	movs	r3, r2
 8001a3a:	693a      	ldr	r2, [r7, #16]
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	693a      	ldr	r2, [r7, #16]
 8001a44:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	2203      	movs	r2, #3
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	2b03      	cmp	r3, #3
 8001a50:	d017      	beq.n	8001a82 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	68db      	ldr	r3, [r3, #12]
 8001a56:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	005b      	lsls	r3, r3, #1
 8001a5c:	2203      	movs	r2, #3
 8001a5e:	409a      	lsls	r2, r3
 8001a60:	0013      	movs	r3, r2
 8001a62:	43da      	mvns	r2, r3
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	4013      	ands	r3, r2
 8001a68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	689a      	ldr	r2, [r3, #8]
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	409a      	lsls	r2, r3
 8001a74:	0013      	movs	r3, r2
 8001a76:	693a      	ldr	r2, [r7, #16]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	693a      	ldr	r2, [r7, #16]
 8001a80:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	2203      	movs	r2, #3
 8001a88:	4013      	ands	r3, r2
 8001a8a:	2b02      	cmp	r3, #2
 8001a8c:	d123      	bne.n	8001ad6 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	08da      	lsrs	r2, r3, #3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	3208      	adds	r2, #8
 8001a96:	0092      	lsls	r2, r2, #2
 8001a98:	58d3      	ldr	r3, [r2, r3]
 8001a9a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	2207      	movs	r2, #7
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	220f      	movs	r2, #15
 8001aa6:	409a      	lsls	r2, r3
 8001aa8:	0013      	movs	r3, r2
 8001aaa:	43da      	mvns	r2, r3
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	4013      	ands	r3, r2
 8001ab0:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	691a      	ldr	r2, [r3, #16]
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	2107      	movs	r1, #7
 8001aba:	400b      	ands	r3, r1
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	409a      	lsls	r2, r3
 8001ac0:	0013      	movs	r3, r2
 8001ac2:	693a      	ldr	r2, [r7, #16]
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	08da      	lsrs	r2, r3, #3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	3208      	adds	r2, #8
 8001ad0:	0092      	lsls	r2, r2, #2
 8001ad2:	6939      	ldr	r1, [r7, #16]
 8001ad4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	005b      	lsls	r3, r3, #1
 8001ae0:	2203      	movs	r2, #3
 8001ae2:	409a      	lsls	r2, r3
 8001ae4:	0013      	movs	r3, r2
 8001ae6:	43da      	mvns	r2, r3
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	4013      	ands	r3, r2
 8001aec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	2203      	movs	r2, #3
 8001af4:	401a      	ands	r2, r3
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	005b      	lsls	r3, r3, #1
 8001afa:	409a      	lsls	r2, r3
 8001afc:	0013      	movs	r3, r2
 8001afe:	693a      	ldr	r2, [r7, #16]
 8001b00:	4313      	orrs	r3, r2
 8001b02:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	693a      	ldr	r2, [r7, #16]
 8001b08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	685a      	ldr	r2, [r3, #4]
 8001b0e:	23c0      	movs	r3, #192	@ 0xc0
 8001b10:	029b      	lsls	r3, r3, #10
 8001b12:	4013      	ands	r3, r2
 8001b14:	d100      	bne.n	8001b18 <HAL_GPIO_Init+0x17c>
 8001b16:	e09a      	b.n	8001c4e <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b18:	4b54      	ldr	r3, [pc, #336]	@ (8001c6c <HAL_GPIO_Init+0x2d0>)
 8001b1a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b1c:	4b53      	ldr	r3, [pc, #332]	@ (8001c6c <HAL_GPIO_Init+0x2d0>)
 8001b1e:	2101      	movs	r1, #1
 8001b20:	430a      	orrs	r2, r1
 8001b22:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b24:	4a52      	ldr	r2, [pc, #328]	@ (8001c70 <HAL_GPIO_Init+0x2d4>)
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	089b      	lsrs	r3, r3, #2
 8001b2a:	3302      	adds	r3, #2
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	589b      	ldr	r3, [r3, r2]
 8001b30:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	2203      	movs	r2, #3
 8001b36:	4013      	ands	r3, r2
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	220f      	movs	r2, #15
 8001b3c:	409a      	lsls	r2, r3
 8001b3e:	0013      	movs	r3, r2
 8001b40:	43da      	mvns	r2, r3
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	4013      	ands	r3, r2
 8001b46:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001b48:	687a      	ldr	r2, [r7, #4]
 8001b4a:	23a0      	movs	r3, #160	@ 0xa0
 8001b4c:	05db      	lsls	r3, r3, #23
 8001b4e:	429a      	cmp	r2, r3
 8001b50:	d019      	beq.n	8001b86 <HAL_GPIO_Init+0x1ea>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4a47      	ldr	r2, [pc, #284]	@ (8001c74 <HAL_GPIO_Init+0x2d8>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d013      	beq.n	8001b82 <HAL_GPIO_Init+0x1e6>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4a46      	ldr	r2, [pc, #280]	@ (8001c78 <HAL_GPIO_Init+0x2dc>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d00d      	beq.n	8001b7e <HAL_GPIO_Init+0x1e2>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4a45      	ldr	r2, [pc, #276]	@ (8001c7c <HAL_GPIO_Init+0x2e0>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d007      	beq.n	8001b7a <HAL_GPIO_Init+0x1de>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4a44      	ldr	r2, [pc, #272]	@ (8001c80 <HAL_GPIO_Init+0x2e4>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d101      	bne.n	8001b76 <HAL_GPIO_Init+0x1da>
 8001b72:	2305      	movs	r3, #5
 8001b74:	e008      	b.n	8001b88 <HAL_GPIO_Init+0x1ec>
 8001b76:	2306      	movs	r3, #6
 8001b78:	e006      	b.n	8001b88 <HAL_GPIO_Init+0x1ec>
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e004      	b.n	8001b88 <HAL_GPIO_Init+0x1ec>
 8001b7e:	2302      	movs	r3, #2
 8001b80:	e002      	b.n	8001b88 <HAL_GPIO_Init+0x1ec>
 8001b82:	2301      	movs	r3, #1
 8001b84:	e000      	b.n	8001b88 <HAL_GPIO_Init+0x1ec>
 8001b86:	2300      	movs	r3, #0
 8001b88:	697a      	ldr	r2, [r7, #20]
 8001b8a:	2103      	movs	r1, #3
 8001b8c:	400a      	ands	r2, r1
 8001b8e:	0092      	lsls	r2, r2, #2
 8001b90:	4093      	lsls	r3, r2
 8001b92:	693a      	ldr	r2, [r7, #16]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b98:	4935      	ldr	r1, [pc, #212]	@ (8001c70 <HAL_GPIO_Init+0x2d4>)
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	089b      	lsrs	r3, r3, #2
 8001b9e:	3302      	adds	r3, #2
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	693a      	ldr	r2, [r7, #16]
 8001ba4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ba6:	4b37      	ldr	r3, [pc, #220]	@ (8001c84 <HAL_GPIO_Init+0x2e8>)
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	43da      	mvns	r2, r3
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	685a      	ldr	r2, [r3, #4]
 8001bba:	2380      	movs	r3, #128	@ 0x80
 8001bbc:	035b      	lsls	r3, r3, #13
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	d003      	beq.n	8001bca <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8001bc2:	693a      	ldr	r2, [r7, #16]
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001bca:	4b2e      	ldr	r3, [pc, #184]	@ (8001c84 <HAL_GPIO_Init+0x2e8>)
 8001bcc:	693a      	ldr	r2, [r7, #16]
 8001bce:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001bd0:	4b2c      	ldr	r3, [pc, #176]	@ (8001c84 <HAL_GPIO_Init+0x2e8>)
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	43da      	mvns	r2, r3
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	4013      	ands	r3, r2
 8001bde:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685a      	ldr	r2, [r3, #4]
 8001be4:	2380      	movs	r3, #128	@ 0x80
 8001be6:	039b      	lsls	r3, r3, #14
 8001be8:	4013      	ands	r3, r2
 8001bea:	d003      	beq.n	8001bf4 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8001bec:	693a      	ldr	r2, [r7, #16]
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001bf4:	4b23      	ldr	r3, [pc, #140]	@ (8001c84 <HAL_GPIO_Init+0x2e8>)
 8001bf6:	693a      	ldr	r2, [r7, #16]
 8001bf8:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8001bfa:	4b22      	ldr	r3, [pc, #136]	@ (8001c84 <HAL_GPIO_Init+0x2e8>)
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	43da      	mvns	r2, r3
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	4013      	ands	r3, r2
 8001c08:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	685a      	ldr	r2, [r3, #4]
 8001c0e:	2380      	movs	r3, #128	@ 0x80
 8001c10:	029b      	lsls	r3, r3, #10
 8001c12:	4013      	ands	r3, r2
 8001c14:	d003      	beq.n	8001c1e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001c16:	693a      	ldr	r2, [r7, #16]
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001c1e:	4b19      	ldr	r3, [pc, #100]	@ (8001c84 <HAL_GPIO_Init+0x2e8>)
 8001c20:	693a      	ldr	r2, [r7, #16]
 8001c22:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c24:	4b17      	ldr	r3, [pc, #92]	@ (8001c84 <HAL_GPIO_Init+0x2e8>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	43da      	mvns	r2, r3
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	4013      	ands	r3, r2
 8001c32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	685a      	ldr	r2, [r3, #4]
 8001c38:	2380      	movs	r3, #128	@ 0x80
 8001c3a:	025b      	lsls	r3, r3, #9
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	d003      	beq.n	8001c48 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001c40:	693a      	ldr	r2, [r7, #16]
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001c48:	4b0e      	ldr	r3, [pc, #56]	@ (8001c84 <HAL_GPIO_Init+0x2e8>)
 8001c4a:	693a      	ldr	r2, [r7, #16]
 8001c4c:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	3301      	adds	r3, #1
 8001c52:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	40da      	lsrs	r2, r3
 8001c5c:	1e13      	subs	r3, r2, #0
 8001c5e:	d000      	beq.n	8001c62 <HAL_GPIO_Init+0x2c6>
 8001c60:	e6a8      	b.n	80019b4 <HAL_GPIO_Init+0x18>
  }
}
 8001c62:	46c0      	nop			@ (mov r8, r8)
 8001c64:	46c0      	nop			@ (mov r8, r8)
 8001c66:	46bd      	mov	sp, r7
 8001c68:	b006      	add	sp, #24
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	40021000 	.word	0x40021000
 8001c70:	40010000 	.word	0x40010000
 8001c74:	50000400 	.word	0x50000400
 8001c78:	50000800 	.word	0x50000800
 8001c7c:	50000c00 	.word	0x50000c00
 8001c80:	50001c00 	.word	0x50001c00
 8001c84:	40010400 	.word	0x40010400

08001c88 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	0008      	movs	r0, r1
 8001c92:	0011      	movs	r1, r2
 8001c94:	1cbb      	adds	r3, r7, #2
 8001c96:	1c02      	adds	r2, r0, #0
 8001c98:	801a      	strh	r2, [r3, #0]
 8001c9a:	1c7b      	adds	r3, r7, #1
 8001c9c:	1c0a      	adds	r2, r1, #0
 8001c9e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ca0:	1c7b      	adds	r3, r7, #1
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d004      	beq.n	8001cb2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ca8:	1cbb      	adds	r3, r7, #2
 8001caa:	881a      	ldrh	r2, [r3, #0]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001cb0:	e003      	b.n	8001cba <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001cb2:	1cbb      	adds	r3, r7, #2
 8001cb4:	881a      	ldrh	r2, [r3, #0]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001cba:	46c0      	nop			@ (mov r8, r8)
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	b002      	add	sp, #8
 8001cc0:	bd80      	pop	{r7, pc}
	...

08001cc4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	0002      	movs	r2, r0
 8001ccc:	1dbb      	adds	r3, r7, #6
 8001cce:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001cd0:	4b09      	ldr	r3, [pc, #36]	@ (8001cf8 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001cd2:	695b      	ldr	r3, [r3, #20]
 8001cd4:	1dba      	adds	r2, r7, #6
 8001cd6:	8812      	ldrh	r2, [r2, #0]
 8001cd8:	4013      	ands	r3, r2
 8001cda:	d008      	beq.n	8001cee <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001cdc:	4b06      	ldr	r3, [pc, #24]	@ (8001cf8 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001cde:	1dba      	adds	r2, r7, #6
 8001ce0:	8812      	ldrh	r2, [r2, #0]
 8001ce2:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ce4:	1dbb      	adds	r3, r7, #6
 8001ce6:	881b      	ldrh	r3, [r3, #0]
 8001ce8:	0018      	movs	r0, r3
 8001cea:	f7ff f967 	bl	8000fbc <HAL_GPIO_EXTI_Callback>
  }
}
 8001cee:	46c0      	nop			@ (mov r8, r8)
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	b002      	add	sp, #8
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	46c0      	nop			@ (mov r8, r8)
 8001cf8:	40010400 	.word	0x40010400

08001cfc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d101      	bne.n	8001d0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e08f      	b.n	8001e2e <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2241      	movs	r2, #65	@ 0x41
 8001d12:	5c9b      	ldrb	r3, [r3, r2]
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d107      	bne.n	8001d2a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2240      	movs	r2, #64	@ 0x40
 8001d1e:	2100      	movs	r1, #0
 8001d20:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	0018      	movs	r0, r3
 8001d26:	f7fe fc41 	bl	80005ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2241      	movs	r2, #65	@ 0x41
 8001d2e:	2124      	movs	r1, #36	@ 0x24
 8001d30:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	2101      	movs	r1, #1
 8001d3e:	438a      	bics	r2, r1
 8001d40:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	685a      	ldr	r2, [r3, #4]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	493b      	ldr	r1, [pc, #236]	@ (8001e38 <HAL_I2C_Init+0x13c>)
 8001d4c:	400a      	ands	r2, r1
 8001d4e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	689a      	ldr	r2, [r3, #8]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4938      	ldr	r1, [pc, #224]	@ (8001e3c <HAL_I2C_Init+0x140>)
 8001d5c:	400a      	ands	r2, r1
 8001d5e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d108      	bne.n	8001d7a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	689a      	ldr	r2, [r3, #8]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	2180      	movs	r1, #128	@ 0x80
 8001d72:	0209      	lsls	r1, r1, #8
 8001d74:	430a      	orrs	r2, r1
 8001d76:	609a      	str	r2, [r3, #8]
 8001d78:	e007      	b.n	8001d8a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	689a      	ldr	r2, [r3, #8]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	2184      	movs	r1, #132	@ 0x84
 8001d84:	0209      	lsls	r1, r1, #8
 8001d86:	430a      	orrs	r2, r1
 8001d88:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	68db      	ldr	r3, [r3, #12]
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	d109      	bne.n	8001da6 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	685a      	ldr	r2, [r3, #4]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2180      	movs	r1, #128	@ 0x80
 8001d9e:	0109      	lsls	r1, r1, #4
 8001da0:	430a      	orrs	r2, r1
 8001da2:	605a      	str	r2, [r3, #4]
 8001da4:	e007      	b.n	8001db6 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	685a      	ldr	r2, [r3, #4]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4923      	ldr	r1, [pc, #140]	@ (8001e40 <HAL_I2C_Init+0x144>)
 8001db2:	400a      	ands	r2, r1
 8001db4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	685a      	ldr	r2, [r3, #4]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4920      	ldr	r1, [pc, #128]	@ (8001e44 <HAL_I2C_Init+0x148>)
 8001dc2:	430a      	orrs	r2, r1
 8001dc4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	68da      	ldr	r2, [r3, #12]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	491a      	ldr	r1, [pc, #104]	@ (8001e3c <HAL_I2C_Init+0x140>)
 8001dd2:	400a      	ands	r2, r1
 8001dd4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	691a      	ldr	r2, [r3, #16]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	695b      	ldr	r3, [r3, #20]
 8001dde:	431a      	orrs	r2, r3
 8001de0:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	699b      	ldr	r3, [r3, #24]
 8001de6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	430a      	orrs	r2, r1
 8001dee:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	69d9      	ldr	r1, [r3, #28]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6a1a      	ldr	r2, [r3, #32]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	430a      	orrs	r2, r1
 8001dfe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	2101      	movs	r1, #1
 8001e0c:	430a      	orrs	r2, r1
 8001e0e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2200      	movs	r2, #0
 8001e14:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2241      	movs	r2, #65	@ 0x41
 8001e1a:	2120      	movs	r1, #32
 8001e1c:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2200      	movs	r2, #0
 8001e22:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2242      	movs	r2, #66	@ 0x42
 8001e28:	2100      	movs	r1, #0
 8001e2a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001e2c:	2300      	movs	r3, #0
}
 8001e2e:	0018      	movs	r0, r3
 8001e30:	46bd      	mov	sp, r7
 8001e32:	b002      	add	sp, #8
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	46c0      	nop			@ (mov r8, r8)
 8001e38:	f0ffffff 	.word	0xf0ffffff
 8001e3c:	ffff7fff 	.word	0xffff7fff
 8001e40:	fffff7ff 	.word	0xfffff7ff
 8001e44:	02008000 	.word	0x02008000

08001e48 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e48:	b590      	push	{r4, r7, lr}
 8001e4a:	b089      	sub	sp, #36	@ 0x24
 8001e4c:	af02      	add	r7, sp, #8
 8001e4e:	60f8      	str	r0, [r7, #12]
 8001e50:	000c      	movs	r4, r1
 8001e52:	0010      	movs	r0, r2
 8001e54:	0019      	movs	r1, r3
 8001e56:	230a      	movs	r3, #10
 8001e58:	18fb      	adds	r3, r7, r3
 8001e5a:	1c22      	adds	r2, r4, #0
 8001e5c:	801a      	strh	r2, [r3, #0]
 8001e5e:	2308      	movs	r3, #8
 8001e60:	18fb      	adds	r3, r7, r3
 8001e62:	1c02      	adds	r2, r0, #0
 8001e64:	801a      	strh	r2, [r3, #0]
 8001e66:	1dbb      	adds	r3, r7, #6
 8001e68:	1c0a      	adds	r2, r1, #0
 8001e6a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	2241      	movs	r2, #65	@ 0x41
 8001e70:	5c9b      	ldrb	r3, [r3, r2]
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	2b20      	cmp	r3, #32
 8001e76:	d000      	beq.n	8001e7a <HAL_I2C_Mem_Read+0x32>
 8001e78:	e110      	b.n	800209c <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d004      	beq.n	8001e8a <HAL_I2C_Mem_Read+0x42>
 8001e80:	232c      	movs	r3, #44	@ 0x2c
 8001e82:	18fb      	adds	r3, r7, r3
 8001e84:	881b      	ldrh	r3, [r3, #0]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d105      	bne.n	8001e96 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2280      	movs	r2, #128	@ 0x80
 8001e8e:	0092      	lsls	r2, r2, #2
 8001e90:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e103      	b.n	800209e <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	2240      	movs	r2, #64	@ 0x40
 8001e9a:	5c9b      	ldrb	r3, [r3, r2]
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d101      	bne.n	8001ea4 <HAL_I2C_Mem_Read+0x5c>
 8001ea0:	2302      	movs	r3, #2
 8001ea2:	e0fc      	b.n	800209e <HAL_I2C_Mem_Read+0x256>
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	2240      	movs	r2, #64	@ 0x40
 8001ea8:	2101      	movs	r1, #1
 8001eaa:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001eac:	f7ff f92a 	bl	8001104 <HAL_GetTick>
 8001eb0:	0003      	movs	r3, r0
 8001eb2:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001eb4:	2380      	movs	r3, #128	@ 0x80
 8001eb6:	0219      	lsls	r1, r3, #8
 8001eb8:	68f8      	ldr	r0, [r7, #12]
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	9300      	str	r3, [sp, #0]
 8001ebe:	2319      	movs	r3, #25
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	f000 f979 	bl	80021b8 <I2C_WaitOnFlagUntilTimeout>
 8001ec6:	1e03      	subs	r3, r0, #0
 8001ec8:	d001      	beq.n	8001ece <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e0e7      	b.n	800209e <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2241      	movs	r2, #65	@ 0x41
 8001ed2:	2122      	movs	r1, #34	@ 0x22
 8001ed4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	2242      	movs	r2, #66	@ 0x42
 8001eda:	2140      	movs	r1, #64	@ 0x40
 8001edc:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001ee8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	222c      	movs	r2, #44	@ 0x2c
 8001eee:	18ba      	adds	r2, r7, r2
 8001ef0:	8812      	ldrh	r2, [r2, #0]
 8001ef2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001efa:	1dbb      	adds	r3, r7, #6
 8001efc:	881c      	ldrh	r4, [r3, #0]
 8001efe:	2308      	movs	r3, #8
 8001f00:	18fb      	adds	r3, r7, r3
 8001f02:	881a      	ldrh	r2, [r3, #0]
 8001f04:	230a      	movs	r3, #10
 8001f06:	18fb      	adds	r3, r7, r3
 8001f08:	8819      	ldrh	r1, [r3, #0]
 8001f0a:	68f8      	ldr	r0, [r7, #12]
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	9301      	str	r3, [sp, #4]
 8001f10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f12:	9300      	str	r3, [sp, #0]
 8001f14:	0023      	movs	r3, r4
 8001f16:	f000 f8cb 	bl	80020b0 <I2C_RequestMemoryRead>
 8001f1a:	1e03      	subs	r3, r0, #0
 8001f1c:	d005      	beq.n	8001f2a <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	2240      	movs	r2, #64	@ 0x40
 8001f22:	2100      	movs	r1, #0
 8001f24:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e0b9      	b.n	800209e <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f2e:	b29b      	uxth	r3, r3
 8001f30:	2bff      	cmp	r3, #255	@ 0xff
 8001f32:	d911      	bls.n	8001f58 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = 1U;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2201      	movs	r2, #1
 8001f38:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f3e:	b2da      	uxtb	r2, r3
 8001f40:	2380      	movs	r3, #128	@ 0x80
 8001f42:	045c      	lsls	r4, r3, #17
 8001f44:	230a      	movs	r3, #10
 8001f46:	18fb      	adds	r3, r7, r3
 8001f48:	8819      	ldrh	r1, [r3, #0]
 8001f4a:	68f8      	ldr	r0, [r7, #12]
 8001f4c:	4b56      	ldr	r3, [pc, #344]	@ (80020a8 <HAL_I2C_Mem_Read+0x260>)
 8001f4e:	9300      	str	r3, [sp, #0]
 8001f50:	0023      	movs	r3, r4
 8001f52:	f000 fb0b 	bl	800256c <I2C_TransferConfig>
 8001f56:	e012      	b.n	8001f7e <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f5c:	b29a      	uxth	r2, r3
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f66:	b2da      	uxtb	r2, r3
 8001f68:	2380      	movs	r3, #128	@ 0x80
 8001f6a:	049c      	lsls	r4, r3, #18
 8001f6c:	230a      	movs	r3, #10
 8001f6e:	18fb      	adds	r3, r7, r3
 8001f70:	8819      	ldrh	r1, [r3, #0]
 8001f72:	68f8      	ldr	r0, [r7, #12]
 8001f74:	4b4c      	ldr	r3, [pc, #304]	@ (80020a8 <HAL_I2C_Mem_Read+0x260>)
 8001f76:	9300      	str	r3, [sp, #0]
 8001f78:	0023      	movs	r3, r4
 8001f7a:	f000 faf7 	bl	800256c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001f7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001f80:	68f8      	ldr	r0, [r7, #12]
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	9300      	str	r3, [sp, #0]
 8001f86:	0013      	movs	r3, r2
 8001f88:	2200      	movs	r2, #0
 8001f8a:	2104      	movs	r1, #4
 8001f8c:	f000 f914 	bl	80021b8 <I2C_WaitOnFlagUntilTimeout>
 8001f90:	1e03      	subs	r3, r0, #0
 8001f92:	d001      	beq.n	8001f98 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e082      	b.n	800209e <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fa2:	b2d2      	uxtb	r2, r2
 8001fa4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001faa:	1c5a      	adds	r2, r3, #1
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fb4:	3b01      	subs	r3, #1
 8001fb6:	b29a      	uxth	r2, r3
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fc0:	b29b      	uxth	r3, r3
 8001fc2:	3b01      	subs	r3, #1
 8001fc4:	b29a      	uxth	r2, r3
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fce:	b29b      	uxth	r3, r3
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d03a      	beq.n	800204a <HAL_I2C_Mem_Read+0x202>
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d136      	bne.n	800204a <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001fdc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001fde:	68f8      	ldr	r0, [r7, #12]
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	9300      	str	r3, [sp, #0]
 8001fe4:	0013      	movs	r3, r2
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	2180      	movs	r1, #128	@ 0x80
 8001fea:	f000 f8e5 	bl	80021b8 <I2C_WaitOnFlagUntilTimeout>
 8001fee:	1e03      	subs	r3, r0, #0
 8001ff0:	d001      	beq.n	8001ff6 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e053      	b.n	800209e <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	2bff      	cmp	r3, #255	@ 0xff
 8001ffe:	d911      	bls.n	8002024 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = 1U;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	2201      	movs	r2, #1
 8002004:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800200a:	b2da      	uxtb	r2, r3
 800200c:	2380      	movs	r3, #128	@ 0x80
 800200e:	045c      	lsls	r4, r3, #17
 8002010:	230a      	movs	r3, #10
 8002012:	18fb      	adds	r3, r7, r3
 8002014:	8819      	ldrh	r1, [r3, #0]
 8002016:	68f8      	ldr	r0, [r7, #12]
 8002018:	2300      	movs	r3, #0
 800201a:	9300      	str	r3, [sp, #0]
 800201c:	0023      	movs	r3, r4
 800201e:	f000 faa5 	bl	800256c <I2C_TransferConfig>
 8002022:	e012      	b.n	800204a <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002028:	b29a      	uxth	r2, r3
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002032:	b2da      	uxtb	r2, r3
 8002034:	2380      	movs	r3, #128	@ 0x80
 8002036:	049c      	lsls	r4, r3, #18
 8002038:	230a      	movs	r3, #10
 800203a:	18fb      	adds	r3, r7, r3
 800203c:	8819      	ldrh	r1, [r3, #0]
 800203e:	68f8      	ldr	r0, [r7, #12]
 8002040:	2300      	movs	r3, #0
 8002042:	9300      	str	r3, [sp, #0]
 8002044:	0023      	movs	r3, r4
 8002046:	f000 fa91 	bl	800256c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800204e:	b29b      	uxth	r3, r3
 8002050:	2b00      	cmp	r3, #0
 8002052:	d194      	bne.n	8001f7e <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002054:	697a      	ldr	r2, [r7, #20]
 8002056:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	0018      	movs	r0, r3
 800205c:	f000 f94a 	bl	80022f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002060:	1e03      	subs	r3, r0, #0
 8002062:	d001      	beq.n	8002068 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	e01a      	b.n	800209e <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	2220      	movs	r2, #32
 800206e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	685a      	ldr	r2, [r3, #4]
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	490c      	ldr	r1, [pc, #48]	@ (80020ac <HAL_I2C_Mem_Read+0x264>)
 800207c:	400a      	ands	r2, r1
 800207e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2241      	movs	r2, #65	@ 0x41
 8002084:	2120      	movs	r1, #32
 8002086:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2242      	movs	r2, #66	@ 0x42
 800208c:	2100      	movs	r1, #0
 800208e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2240      	movs	r2, #64	@ 0x40
 8002094:	2100      	movs	r1, #0
 8002096:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002098:	2300      	movs	r3, #0
 800209a:	e000      	b.n	800209e <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 800209c:	2302      	movs	r3, #2
  }
}
 800209e:	0018      	movs	r0, r3
 80020a0:	46bd      	mov	sp, r7
 80020a2:	b007      	add	sp, #28
 80020a4:	bd90      	pop	{r4, r7, pc}
 80020a6:	46c0      	nop			@ (mov r8, r8)
 80020a8:	80002400 	.word	0x80002400
 80020ac:	fe00e800 	.word	0xfe00e800

080020b0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80020b0:	b5b0      	push	{r4, r5, r7, lr}
 80020b2:	b086      	sub	sp, #24
 80020b4:	af02      	add	r7, sp, #8
 80020b6:	60f8      	str	r0, [r7, #12]
 80020b8:	000c      	movs	r4, r1
 80020ba:	0010      	movs	r0, r2
 80020bc:	0019      	movs	r1, r3
 80020be:	250a      	movs	r5, #10
 80020c0:	197b      	adds	r3, r7, r5
 80020c2:	1c22      	adds	r2, r4, #0
 80020c4:	801a      	strh	r2, [r3, #0]
 80020c6:	2308      	movs	r3, #8
 80020c8:	18fb      	adds	r3, r7, r3
 80020ca:	1c02      	adds	r2, r0, #0
 80020cc:	801a      	strh	r2, [r3, #0]
 80020ce:	1dbb      	adds	r3, r7, #6
 80020d0:	1c0a      	adds	r2, r1, #0
 80020d2:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80020d4:	1dbb      	adds	r3, r7, #6
 80020d6:	881b      	ldrh	r3, [r3, #0]
 80020d8:	b2da      	uxtb	r2, r3
 80020da:	197b      	adds	r3, r7, r5
 80020dc:	8819      	ldrh	r1, [r3, #0]
 80020de:	68f8      	ldr	r0, [r7, #12]
 80020e0:	4b23      	ldr	r3, [pc, #140]	@ (8002170 <I2C_RequestMemoryRead+0xc0>)
 80020e2:	9300      	str	r3, [sp, #0]
 80020e4:	2300      	movs	r3, #0
 80020e6:	f000 fa41 	bl	800256c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80020ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020ec:	6a39      	ldr	r1, [r7, #32]
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	0018      	movs	r0, r3
 80020f2:	f000 f8b9 	bl	8002268 <I2C_WaitOnTXISFlagUntilTimeout>
 80020f6:	1e03      	subs	r3, r0, #0
 80020f8:	d001      	beq.n	80020fe <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e033      	b.n	8002166 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80020fe:	1dbb      	adds	r3, r7, #6
 8002100:	881b      	ldrh	r3, [r3, #0]
 8002102:	2b01      	cmp	r3, #1
 8002104:	d107      	bne.n	8002116 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002106:	2308      	movs	r3, #8
 8002108:	18fb      	adds	r3, r7, r3
 800210a:	881b      	ldrh	r3, [r3, #0]
 800210c:	b2da      	uxtb	r2, r3
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	629a      	str	r2, [r3, #40]	@ 0x28
 8002114:	e019      	b.n	800214a <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002116:	2308      	movs	r3, #8
 8002118:	18fb      	adds	r3, r7, r3
 800211a:	881b      	ldrh	r3, [r3, #0]
 800211c:	0a1b      	lsrs	r3, r3, #8
 800211e:	b29b      	uxth	r3, r3
 8002120:	b2da      	uxtb	r2, r3
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002128:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800212a:	6a39      	ldr	r1, [r7, #32]
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	0018      	movs	r0, r3
 8002130:	f000 f89a 	bl	8002268 <I2C_WaitOnTXISFlagUntilTimeout>
 8002134:	1e03      	subs	r3, r0, #0
 8002136:	d001      	beq.n	800213c <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e014      	b.n	8002166 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800213c:	2308      	movs	r3, #8
 800213e:	18fb      	adds	r3, r7, r3
 8002140:	881b      	ldrh	r3, [r3, #0]
 8002142:	b2da      	uxtb	r2, r3
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800214a:	6a3a      	ldr	r2, [r7, #32]
 800214c:	68f8      	ldr	r0, [r7, #12]
 800214e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002150:	9300      	str	r3, [sp, #0]
 8002152:	0013      	movs	r3, r2
 8002154:	2200      	movs	r2, #0
 8002156:	2140      	movs	r1, #64	@ 0x40
 8002158:	f000 f82e 	bl	80021b8 <I2C_WaitOnFlagUntilTimeout>
 800215c:	1e03      	subs	r3, r0, #0
 800215e:	d001      	beq.n	8002164 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e000      	b.n	8002166 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8002164:	2300      	movs	r3, #0
}
 8002166:	0018      	movs	r0, r3
 8002168:	46bd      	mov	sp, r7
 800216a:	b004      	add	sp, #16
 800216c:	bdb0      	pop	{r4, r5, r7, pc}
 800216e:	46c0      	nop			@ (mov r8, r8)
 8002170:	80002000 	.word	0x80002000

08002174 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	699b      	ldr	r3, [r3, #24]
 8002182:	2202      	movs	r2, #2
 8002184:	4013      	ands	r3, r2
 8002186:	2b02      	cmp	r3, #2
 8002188:	d103      	bne.n	8002192 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	2200      	movs	r2, #0
 8002190:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	699b      	ldr	r3, [r3, #24]
 8002198:	2201      	movs	r2, #1
 800219a:	4013      	ands	r3, r2
 800219c:	2b01      	cmp	r3, #1
 800219e:	d007      	beq.n	80021b0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	699a      	ldr	r2, [r3, #24]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	2101      	movs	r1, #1
 80021ac:	430a      	orrs	r2, r1
 80021ae:	619a      	str	r2, [r3, #24]
  }
}
 80021b0:	46c0      	nop			@ (mov r8, r8)
 80021b2:	46bd      	mov	sp, r7
 80021b4:	b002      	add	sp, #8
 80021b6:	bd80      	pop	{r7, pc}

080021b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b084      	sub	sp, #16
 80021bc:	af00      	add	r7, sp, #0
 80021be:	60f8      	str	r0, [r7, #12]
 80021c0:	60b9      	str	r1, [r7, #8]
 80021c2:	603b      	str	r3, [r7, #0]
 80021c4:	1dfb      	adds	r3, r7, #7
 80021c6:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021c8:	e03a      	b.n	8002240 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80021ca:	69ba      	ldr	r2, [r7, #24]
 80021cc:	6839      	ldr	r1, [r7, #0]
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	0018      	movs	r0, r3
 80021d2:	f000 f8d3 	bl	800237c <I2C_IsErrorOccurred>
 80021d6:	1e03      	subs	r3, r0, #0
 80021d8:	d001      	beq.n	80021de <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e040      	b.n	8002260 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	3301      	adds	r3, #1
 80021e2:	d02d      	beq.n	8002240 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021e4:	f7fe ff8e 	bl	8001104 <HAL_GetTick>
 80021e8:	0002      	movs	r2, r0
 80021ea:	69bb      	ldr	r3, [r7, #24]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	683a      	ldr	r2, [r7, #0]
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d302      	bcc.n	80021fa <I2C_WaitOnFlagUntilTimeout+0x42>
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d122      	bne.n	8002240 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	699b      	ldr	r3, [r3, #24]
 8002200:	68ba      	ldr	r2, [r7, #8]
 8002202:	4013      	ands	r3, r2
 8002204:	68ba      	ldr	r2, [r7, #8]
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	425a      	negs	r2, r3
 800220a:	4153      	adcs	r3, r2
 800220c:	b2db      	uxtb	r3, r3
 800220e:	001a      	movs	r2, r3
 8002210:	1dfb      	adds	r3, r7, #7
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	429a      	cmp	r2, r3
 8002216:	d113      	bne.n	8002240 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800221c:	2220      	movs	r2, #32
 800221e:	431a      	orrs	r2, r3
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2241      	movs	r2, #65	@ 0x41
 8002228:	2120      	movs	r1, #32
 800222a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2242      	movs	r2, #66	@ 0x42
 8002230:	2100      	movs	r1, #0
 8002232:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2240      	movs	r2, #64	@ 0x40
 8002238:	2100      	movs	r1, #0
 800223a:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e00f      	b.n	8002260 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	699b      	ldr	r3, [r3, #24]
 8002246:	68ba      	ldr	r2, [r7, #8]
 8002248:	4013      	ands	r3, r2
 800224a:	68ba      	ldr	r2, [r7, #8]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	425a      	negs	r2, r3
 8002250:	4153      	adcs	r3, r2
 8002252:	b2db      	uxtb	r3, r3
 8002254:	001a      	movs	r2, r3
 8002256:	1dfb      	adds	r3, r7, #7
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	429a      	cmp	r2, r3
 800225c:	d0b5      	beq.n	80021ca <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800225e:	2300      	movs	r3, #0
}
 8002260:	0018      	movs	r0, r3
 8002262:	46bd      	mov	sp, r7
 8002264:	b004      	add	sp, #16
 8002266:	bd80      	pop	{r7, pc}

08002268 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b084      	sub	sp, #16
 800226c:	af00      	add	r7, sp, #0
 800226e:	60f8      	str	r0, [r7, #12]
 8002270:	60b9      	str	r1, [r7, #8]
 8002272:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002274:	e032      	b.n	80022dc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	68b9      	ldr	r1, [r7, #8]
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	0018      	movs	r0, r3
 800227e:	f000 f87d 	bl	800237c <I2C_IsErrorOccurred>
 8002282:	1e03      	subs	r3, r0, #0
 8002284:	d001      	beq.n	800228a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e030      	b.n	80022ec <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	3301      	adds	r3, #1
 800228e:	d025      	beq.n	80022dc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002290:	f7fe ff38 	bl	8001104 <HAL_GetTick>
 8002294:	0002      	movs	r2, r0
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	68ba      	ldr	r2, [r7, #8]
 800229c:	429a      	cmp	r2, r3
 800229e:	d302      	bcc.n	80022a6 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d11a      	bne.n	80022dc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	699b      	ldr	r3, [r3, #24]
 80022ac:	2202      	movs	r2, #2
 80022ae:	4013      	ands	r3, r2
 80022b0:	2b02      	cmp	r3, #2
 80022b2:	d013      	beq.n	80022dc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022b8:	2220      	movs	r2, #32
 80022ba:	431a      	orrs	r2, r3
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2241      	movs	r2, #65	@ 0x41
 80022c4:	2120      	movs	r1, #32
 80022c6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2242      	movs	r2, #66	@ 0x42
 80022cc:	2100      	movs	r1, #0
 80022ce:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2240      	movs	r2, #64	@ 0x40
 80022d4:	2100      	movs	r1, #0
 80022d6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e007      	b.n	80022ec <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	699b      	ldr	r3, [r3, #24]
 80022e2:	2202      	movs	r2, #2
 80022e4:	4013      	ands	r3, r2
 80022e6:	2b02      	cmp	r3, #2
 80022e8:	d1c5      	bne.n	8002276 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80022ea:	2300      	movs	r3, #0
}
 80022ec:	0018      	movs	r0, r3
 80022ee:	46bd      	mov	sp, r7
 80022f0:	b004      	add	sp, #16
 80022f2:	bd80      	pop	{r7, pc}

080022f4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	60f8      	str	r0, [r7, #12]
 80022fc:	60b9      	str	r1, [r7, #8]
 80022fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002300:	e02f      	b.n	8002362 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	68b9      	ldr	r1, [r7, #8]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	0018      	movs	r0, r3
 800230a:	f000 f837 	bl	800237c <I2C_IsErrorOccurred>
 800230e:	1e03      	subs	r3, r0, #0
 8002310:	d001      	beq.n	8002316 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e02d      	b.n	8002372 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002316:	f7fe fef5 	bl	8001104 <HAL_GetTick>
 800231a:	0002      	movs	r2, r0
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	68ba      	ldr	r2, [r7, #8]
 8002322:	429a      	cmp	r2, r3
 8002324:	d302      	bcc.n	800232c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d11a      	bne.n	8002362 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	699b      	ldr	r3, [r3, #24]
 8002332:	2220      	movs	r2, #32
 8002334:	4013      	ands	r3, r2
 8002336:	2b20      	cmp	r3, #32
 8002338:	d013      	beq.n	8002362 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800233e:	2220      	movs	r2, #32
 8002340:	431a      	orrs	r2, r3
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2241      	movs	r2, #65	@ 0x41
 800234a:	2120      	movs	r1, #32
 800234c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2242      	movs	r2, #66	@ 0x42
 8002352:	2100      	movs	r1, #0
 8002354:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2240      	movs	r2, #64	@ 0x40
 800235a:	2100      	movs	r1, #0
 800235c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e007      	b.n	8002372 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	699b      	ldr	r3, [r3, #24]
 8002368:	2220      	movs	r2, #32
 800236a:	4013      	ands	r3, r2
 800236c:	2b20      	cmp	r3, #32
 800236e:	d1c8      	bne.n	8002302 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002370:	2300      	movs	r3, #0
}
 8002372:	0018      	movs	r0, r3
 8002374:	46bd      	mov	sp, r7
 8002376:	b004      	add	sp, #16
 8002378:	bd80      	pop	{r7, pc}
	...

0800237c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b08a      	sub	sp, #40	@ 0x28
 8002380:	af00      	add	r7, sp, #0
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	60b9      	str	r1, [r7, #8]
 8002386:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002388:	2327      	movs	r3, #39	@ 0x27
 800238a:	18fb      	adds	r3, r7, r3
 800238c:	2200      	movs	r2, #0
 800238e:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	699b      	ldr	r3, [r3, #24]
 8002396:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002398:	2300      	movs	r3, #0
 800239a:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	2210      	movs	r2, #16
 80023a4:	4013      	ands	r3, r2
 80023a6:	d100      	bne.n	80023aa <I2C_IsErrorOccurred+0x2e>
 80023a8:	e079      	b.n	800249e <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	2210      	movs	r2, #16
 80023b0:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80023b2:	e057      	b.n	8002464 <I2C_IsErrorOccurred+0xe8>
 80023b4:	2227      	movs	r2, #39	@ 0x27
 80023b6:	18bb      	adds	r3, r7, r2
 80023b8:	18ba      	adds	r2, r7, r2
 80023ba:	7812      	ldrb	r2, [r2, #0]
 80023bc:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	3301      	adds	r3, #1
 80023c2:	d04f      	beq.n	8002464 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80023c4:	f7fe fe9e 	bl	8001104 <HAL_GetTick>
 80023c8:	0002      	movs	r2, r0
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	68ba      	ldr	r2, [r7, #8]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d302      	bcc.n	80023da <I2C_IsErrorOccurred+0x5e>
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d144      	bne.n	8002464 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	685a      	ldr	r2, [r3, #4]
 80023e0:	2380      	movs	r3, #128	@ 0x80
 80023e2:	01db      	lsls	r3, r3, #7
 80023e4:	4013      	ands	r3, r2
 80023e6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80023e8:	2013      	movs	r0, #19
 80023ea:	183b      	adds	r3, r7, r0
 80023ec:	68fa      	ldr	r2, [r7, #12]
 80023ee:	2142      	movs	r1, #66	@ 0x42
 80023f0:	5c52      	ldrb	r2, [r2, r1]
 80023f2:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	699a      	ldr	r2, [r3, #24]
 80023fa:	2380      	movs	r3, #128	@ 0x80
 80023fc:	021b      	lsls	r3, r3, #8
 80023fe:	401a      	ands	r2, r3
 8002400:	2380      	movs	r3, #128	@ 0x80
 8002402:	021b      	lsls	r3, r3, #8
 8002404:	429a      	cmp	r2, r3
 8002406:	d126      	bne.n	8002456 <I2C_IsErrorOccurred+0xda>
 8002408:	697a      	ldr	r2, [r7, #20]
 800240a:	2380      	movs	r3, #128	@ 0x80
 800240c:	01db      	lsls	r3, r3, #7
 800240e:	429a      	cmp	r2, r3
 8002410:	d021      	beq.n	8002456 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8002412:	183b      	adds	r3, r7, r0
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	2b20      	cmp	r3, #32
 8002418:	d01d      	beq.n	8002456 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	685a      	ldr	r2, [r3, #4]
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	2180      	movs	r1, #128	@ 0x80
 8002426:	01c9      	lsls	r1, r1, #7
 8002428:	430a      	orrs	r2, r1
 800242a:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800242c:	f7fe fe6a 	bl	8001104 <HAL_GetTick>
 8002430:	0003      	movs	r3, r0
 8002432:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002434:	e00f      	b.n	8002456 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002436:	f7fe fe65 	bl	8001104 <HAL_GetTick>
 800243a:	0002      	movs	r2, r0
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	2b19      	cmp	r3, #25
 8002442:	d908      	bls.n	8002456 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002444:	6a3b      	ldr	r3, [r7, #32]
 8002446:	2220      	movs	r2, #32
 8002448:	4313      	orrs	r3, r2
 800244a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800244c:	2327      	movs	r3, #39	@ 0x27
 800244e:	18fb      	adds	r3, r7, r3
 8002450:	2201      	movs	r2, #1
 8002452:	701a      	strb	r2, [r3, #0]

              break;
 8002454:	e006      	b.n	8002464 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	699b      	ldr	r3, [r3, #24]
 800245c:	2220      	movs	r2, #32
 800245e:	4013      	ands	r3, r2
 8002460:	2b20      	cmp	r3, #32
 8002462:	d1e8      	bne.n	8002436 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	699b      	ldr	r3, [r3, #24]
 800246a:	2220      	movs	r2, #32
 800246c:	4013      	ands	r3, r2
 800246e:	2b20      	cmp	r3, #32
 8002470:	d004      	beq.n	800247c <I2C_IsErrorOccurred+0x100>
 8002472:	2327      	movs	r3, #39	@ 0x27
 8002474:	18fb      	adds	r3, r7, r3
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d09b      	beq.n	80023b4 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800247c:	2327      	movs	r3, #39	@ 0x27
 800247e:	18fb      	adds	r3, r7, r3
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d103      	bne.n	800248e <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	2220      	movs	r2, #32
 800248c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800248e:	6a3b      	ldr	r3, [r7, #32]
 8002490:	2204      	movs	r2, #4
 8002492:	4313      	orrs	r3, r2
 8002494:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002496:	2327      	movs	r3, #39	@ 0x27
 8002498:	18fb      	adds	r3, r7, r3
 800249a:	2201      	movs	r2, #1
 800249c:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	699b      	ldr	r3, [r3, #24]
 80024a4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80024a6:	69ba      	ldr	r2, [r7, #24]
 80024a8:	2380      	movs	r3, #128	@ 0x80
 80024aa:	005b      	lsls	r3, r3, #1
 80024ac:	4013      	ands	r3, r2
 80024ae:	d00c      	beq.n	80024ca <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80024b0:	6a3b      	ldr	r3, [r7, #32]
 80024b2:	2201      	movs	r2, #1
 80024b4:	4313      	orrs	r3, r2
 80024b6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2280      	movs	r2, #128	@ 0x80
 80024be:	0052      	lsls	r2, r2, #1
 80024c0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80024c2:	2327      	movs	r3, #39	@ 0x27
 80024c4:	18fb      	adds	r3, r7, r3
 80024c6:	2201      	movs	r2, #1
 80024c8:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80024ca:	69ba      	ldr	r2, [r7, #24]
 80024cc:	2380      	movs	r3, #128	@ 0x80
 80024ce:	00db      	lsls	r3, r3, #3
 80024d0:	4013      	ands	r3, r2
 80024d2:	d00c      	beq.n	80024ee <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80024d4:	6a3b      	ldr	r3, [r7, #32]
 80024d6:	2208      	movs	r2, #8
 80024d8:	4313      	orrs	r3, r2
 80024da:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	2280      	movs	r2, #128	@ 0x80
 80024e2:	00d2      	lsls	r2, r2, #3
 80024e4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80024e6:	2327      	movs	r3, #39	@ 0x27
 80024e8:	18fb      	adds	r3, r7, r3
 80024ea:	2201      	movs	r2, #1
 80024ec:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80024ee:	69ba      	ldr	r2, [r7, #24]
 80024f0:	2380      	movs	r3, #128	@ 0x80
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	4013      	ands	r3, r2
 80024f6:	d00c      	beq.n	8002512 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80024f8:	6a3b      	ldr	r3, [r7, #32]
 80024fa:	2202      	movs	r2, #2
 80024fc:	4313      	orrs	r3, r2
 80024fe:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2280      	movs	r2, #128	@ 0x80
 8002506:	0092      	lsls	r2, r2, #2
 8002508:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800250a:	2327      	movs	r3, #39	@ 0x27
 800250c:	18fb      	adds	r3, r7, r3
 800250e:	2201      	movs	r2, #1
 8002510:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8002512:	2327      	movs	r3, #39	@ 0x27
 8002514:	18fb      	adds	r3, r7, r3
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d01d      	beq.n	8002558 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	0018      	movs	r0, r3
 8002520:	f7ff fe28 	bl	8002174 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	685a      	ldr	r2, [r3, #4]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	490e      	ldr	r1, [pc, #56]	@ (8002568 <I2C_IsErrorOccurred+0x1ec>)
 8002530:	400a      	ands	r2, r1
 8002532:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002538:	6a3b      	ldr	r3, [r7, #32]
 800253a:	431a      	orrs	r2, r3
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2241      	movs	r2, #65	@ 0x41
 8002544:	2120      	movs	r1, #32
 8002546:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2242      	movs	r2, #66	@ 0x42
 800254c:	2100      	movs	r1, #0
 800254e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2240      	movs	r2, #64	@ 0x40
 8002554:	2100      	movs	r1, #0
 8002556:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8002558:	2327      	movs	r3, #39	@ 0x27
 800255a:	18fb      	adds	r3, r7, r3
 800255c:	781b      	ldrb	r3, [r3, #0]
}
 800255e:	0018      	movs	r0, r3
 8002560:	46bd      	mov	sp, r7
 8002562:	b00a      	add	sp, #40	@ 0x28
 8002564:	bd80      	pop	{r7, pc}
 8002566:	46c0      	nop			@ (mov r8, r8)
 8002568:	fe00e800 	.word	0xfe00e800

0800256c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800256c:	b590      	push	{r4, r7, lr}
 800256e:	b087      	sub	sp, #28
 8002570:	af00      	add	r7, sp, #0
 8002572:	60f8      	str	r0, [r7, #12]
 8002574:	0008      	movs	r0, r1
 8002576:	0011      	movs	r1, r2
 8002578:	607b      	str	r3, [r7, #4]
 800257a:	240a      	movs	r4, #10
 800257c:	193b      	adds	r3, r7, r4
 800257e:	1c02      	adds	r2, r0, #0
 8002580:	801a      	strh	r2, [r3, #0]
 8002582:	2009      	movs	r0, #9
 8002584:	183b      	adds	r3, r7, r0
 8002586:	1c0a      	adds	r2, r1, #0
 8002588:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800258a:	193b      	adds	r3, r7, r4
 800258c:	881b      	ldrh	r3, [r3, #0]
 800258e:	059b      	lsls	r3, r3, #22
 8002590:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002592:	183b      	adds	r3, r7, r0
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	0419      	lsls	r1, r3, #16
 8002598:	23ff      	movs	r3, #255	@ 0xff
 800259a:	041b      	lsls	r3, r3, #16
 800259c:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800259e:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80025a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025a6:	4313      	orrs	r3, r2
 80025a8:	005b      	lsls	r3, r3, #1
 80025aa:	085b      	lsrs	r3, r3, #1
 80025ac:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80025b6:	0d51      	lsrs	r1, r2, #21
 80025b8:	2280      	movs	r2, #128	@ 0x80
 80025ba:	00d2      	lsls	r2, r2, #3
 80025bc:	400a      	ands	r2, r1
 80025be:	4907      	ldr	r1, [pc, #28]	@ (80025dc <I2C_TransferConfig+0x70>)
 80025c0:	430a      	orrs	r2, r1
 80025c2:	43d2      	mvns	r2, r2
 80025c4:	401a      	ands	r2, r3
 80025c6:	0011      	movs	r1, r2
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	697a      	ldr	r2, [r7, #20]
 80025ce:	430a      	orrs	r2, r1
 80025d0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80025d2:	46c0      	nop			@ (mov r8, r8)
 80025d4:	46bd      	mov	sp, r7
 80025d6:	b007      	add	sp, #28
 80025d8:	bd90      	pop	{r4, r7, pc}
 80025da:	46c0      	nop			@ (mov r8, r8)
 80025dc:	03ff63ff 	.word	0x03ff63ff

080025e0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2241      	movs	r2, #65	@ 0x41
 80025ee:	5c9b      	ldrb	r3, [r3, r2]
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	2b20      	cmp	r3, #32
 80025f4:	d138      	bne.n	8002668 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2240      	movs	r2, #64	@ 0x40
 80025fa:	5c9b      	ldrb	r3, [r3, r2]
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d101      	bne.n	8002604 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002600:	2302      	movs	r3, #2
 8002602:	e032      	b.n	800266a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2240      	movs	r2, #64	@ 0x40
 8002608:	2101      	movs	r1, #1
 800260a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2241      	movs	r2, #65	@ 0x41
 8002610:	2124      	movs	r1, #36	@ 0x24
 8002612:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	2101      	movs	r1, #1
 8002620:	438a      	bics	r2, r1
 8002622:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4911      	ldr	r1, [pc, #68]	@ (8002674 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002630:	400a      	ands	r2, r1
 8002632:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	6819      	ldr	r1, [r3, #0]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	683a      	ldr	r2, [r7, #0]
 8002640:	430a      	orrs	r2, r1
 8002642:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	2101      	movs	r1, #1
 8002650:	430a      	orrs	r2, r1
 8002652:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2241      	movs	r2, #65	@ 0x41
 8002658:	2120      	movs	r1, #32
 800265a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2240      	movs	r2, #64	@ 0x40
 8002660:	2100      	movs	r1, #0
 8002662:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002664:	2300      	movs	r3, #0
 8002666:	e000      	b.n	800266a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002668:	2302      	movs	r3, #2
  }
}
 800266a:	0018      	movs	r0, r3
 800266c:	46bd      	mov	sp, r7
 800266e:	b002      	add	sp, #8
 8002670:	bd80      	pop	{r7, pc}
 8002672:	46c0      	nop			@ (mov r8, r8)
 8002674:	ffffefff 	.word	0xffffefff

08002678 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2241      	movs	r2, #65	@ 0x41
 8002686:	5c9b      	ldrb	r3, [r3, r2]
 8002688:	b2db      	uxtb	r3, r3
 800268a:	2b20      	cmp	r3, #32
 800268c:	d139      	bne.n	8002702 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2240      	movs	r2, #64	@ 0x40
 8002692:	5c9b      	ldrb	r3, [r3, r2]
 8002694:	2b01      	cmp	r3, #1
 8002696:	d101      	bne.n	800269c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002698:	2302      	movs	r3, #2
 800269a:	e033      	b.n	8002704 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2240      	movs	r2, #64	@ 0x40
 80026a0:	2101      	movs	r1, #1
 80026a2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2241      	movs	r2, #65	@ 0x41
 80026a8:	2124      	movs	r1, #36	@ 0x24
 80026aa:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	2101      	movs	r1, #1
 80026b8:	438a      	bics	r2, r1
 80026ba:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	4a11      	ldr	r2, [pc, #68]	@ (800270c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80026c8:	4013      	ands	r3, r2
 80026ca:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	021b      	lsls	r3, r3, #8
 80026d0:	68fa      	ldr	r2, [r7, #12]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	68fa      	ldr	r2, [r7, #12]
 80026dc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	2101      	movs	r1, #1
 80026ea:	430a      	orrs	r2, r1
 80026ec:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2241      	movs	r2, #65	@ 0x41
 80026f2:	2120      	movs	r1, #32
 80026f4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2240      	movs	r2, #64	@ 0x40
 80026fa:	2100      	movs	r1, #0
 80026fc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80026fe:	2300      	movs	r3, #0
 8002700:	e000      	b.n	8002704 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002702:	2302      	movs	r3, #2
  }
}
 8002704:	0018      	movs	r0, r3
 8002706:	46bd      	mov	sp, r7
 8002708:	b004      	add	sp, #16
 800270a:	bd80      	pop	{r7, pc}
 800270c:	fffff0ff 	.word	0xfffff0ff

08002710 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002710:	b5b0      	push	{r4, r5, r7, lr}
 8002712:	b08a      	sub	sp, #40	@ 0x28
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d102      	bne.n	8002724 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	f000 fb5a 	bl	8002dd8 <HAL_RCC_OscConfig+0x6c8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002724:	4bce      	ldr	r3, [pc, #824]	@ (8002a60 <HAL_RCC_OscConfig+0x350>)
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	220c      	movs	r2, #12
 800272a:	4013      	ands	r3, r2
 800272c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800272e:	4bcc      	ldr	r3, [pc, #816]	@ (8002a60 <HAL_RCC_OscConfig+0x350>)
 8002730:	68da      	ldr	r2, [r3, #12]
 8002732:	2380      	movs	r3, #128	@ 0x80
 8002734:	025b      	lsls	r3, r3, #9
 8002736:	4013      	ands	r3, r2
 8002738:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	2201      	movs	r2, #1
 8002740:	4013      	ands	r3, r2
 8002742:	d100      	bne.n	8002746 <HAL_RCC_OscConfig+0x36>
 8002744:	e07c      	b.n	8002840 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002746:	6a3b      	ldr	r3, [r7, #32]
 8002748:	2b08      	cmp	r3, #8
 800274a:	d007      	beq.n	800275c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800274c:	6a3b      	ldr	r3, [r7, #32]
 800274e:	2b0c      	cmp	r3, #12
 8002750:	d111      	bne.n	8002776 <HAL_RCC_OscConfig+0x66>
 8002752:	69fa      	ldr	r2, [r7, #28]
 8002754:	2380      	movs	r3, #128	@ 0x80
 8002756:	025b      	lsls	r3, r3, #9
 8002758:	429a      	cmp	r2, r3
 800275a:	d10c      	bne.n	8002776 <HAL_RCC_OscConfig+0x66>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800275c:	4bc0      	ldr	r3, [pc, #768]	@ (8002a60 <HAL_RCC_OscConfig+0x350>)
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	2380      	movs	r3, #128	@ 0x80
 8002762:	029b      	lsls	r3, r3, #10
 8002764:	4013      	ands	r3, r2
 8002766:	d100      	bne.n	800276a <HAL_RCC_OscConfig+0x5a>
 8002768:	e069      	b.n	800283e <HAL_RCC_OscConfig+0x12e>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d165      	bne.n	800283e <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e330      	b.n	8002dd8 <HAL_RCC_OscConfig+0x6c8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685a      	ldr	r2, [r3, #4]
 800277a:	2380      	movs	r3, #128	@ 0x80
 800277c:	025b      	lsls	r3, r3, #9
 800277e:	429a      	cmp	r2, r3
 8002780:	d107      	bne.n	8002792 <HAL_RCC_OscConfig+0x82>
 8002782:	4bb7      	ldr	r3, [pc, #732]	@ (8002a60 <HAL_RCC_OscConfig+0x350>)
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	4bb6      	ldr	r3, [pc, #728]	@ (8002a60 <HAL_RCC_OscConfig+0x350>)
 8002788:	2180      	movs	r1, #128	@ 0x80
 800278a:	0249      	lsls	r1, r1, #9
 800278c:	430a      	orrs	r2, r1
 800278e:	601a      	str	r2, [r3, #0]
 8002790:	e027      	b.n	80027e2 <HAL_RCC_OscConfig+0xd2>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685a      	ldr	r2, [r3, #4]
 8002796:	23a0      	movs	r3, #160	@ 0xa0
 8002798:	02db      	lsls	r3, r3, #11
 800279a:	429a      	cmp	r2, r3
 800279c:	d10e      	bne.n	80027bc <HAL_RCC_OscConfig+0xac>
 800279e:	4bb0      	ldr	r3, [pc, #704]	@ (8002a60 <HAL_RCC_OscConfig+0x350>)
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	4baf      	ldr	r3, [pc, #700]	@ (8002a60 <HAL_RCC_OscConfig+0x350>)
 80027a4:	2180      	movs	r1, #128	@ 0x80
 80027a6:	02c9      	lsls	r1, r1, #11
 80027a8:	430a      	orrs	r2, r1
 80027aa:	601a      	str	r2, [r3, #0]
 80027ac:	4bac      	ldr	r3, [pc, #688]	@ (8002a60 <HAL_RCC_OscConfig+0x350>)
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	4bab      	ldr	r3, [pc, #684]	@ (8002a60 <HAL_RCC_OscConfig+0x350>)
 80027b2:	2180      	movs	r1, #128	@ 0x80
 80027b4:	0249      	lsls	r1, r1, #9
 80027b6:	430a      	orrs	r2, r1
 80027b8:	601a      	str	r2, [r3, #0]
 80027ba:	e012      	b.n	80027e2 <HAL_RCC_OscConfig+0xd2>
 80027bc:	4ba8      	ldr	r3, [pc, #672]	@ (8002a60 <HAL_RCC_OscConfig+0x350>)
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	4ba7      	ldr	r3, [pc, #668]	@ (8002a60 <HAL_RCC_OscConfig+0x350>)
 80027c2:	49a8      	ldr	r1, [pc, #672]	@ (8002a64 <HAL_RCC_OscConfig+0x354>)
 80027c4:	400a      	ands	r2, r1
 80027c6:	601a      	str	r2, [r3, #0]
 80027c8:	4ba5      	ldr	r3, [pc, #660]	@ (8002a60 <HAL_RCC_OscConfig+0x350>)
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	2380      	movs	r3, #128	@ 0x80
 80027ce:	025b      	lsls	r3, r3, #9
 80027d0:	4013      	ands	r3, r2
 80027d2:	60fb      	str	r3, [r7, #12]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	4ba2      	ldr	r3, [pc, #648]	@ (8002a60 <HAL_RCC_OscConfig+0x350>)
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	4ba1      	ldr	r3, [pc, #644]	@ (8002a60 <HAL_RCC_OscConfig+0x350>)
 80027dc:	49a2      	ldr	r1, [pc, #648]	@ (8002a68 <HAL_RCC_OscConfig+0x358>)
 80027de:	400a      	ands	r2, r1
 80027e0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d014      	beq.n	8002814 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ea:	f7fe fc8b 	bl	8001104 <HAL_GetTick>
 80027ee:	0003      	movs	r3, r0
 80027f0:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80027f2:	e008      	b.n	8002806 <HAL_RCC_OscConfig+0xf6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027f4:	f7fe fc86 	bl	8001104 <HAL_GetTick>
 80027f8:	0002      	movs	r2, r0
 80027fa:	69bb      	ldr	r3, [r7, #24]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	2b64      	cmp	r3, #100	@ 0x64
 8002800:	d901      	bls.n	8002806 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e2e8      	b.n	8002dd8 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002806:	4b96      	ldr	r3, [pc, #600]	@ (8002a60 <HAL_RCC_OscConfig+0x350>)
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	2380      	movs	r3, #128	@ 0x80
 800280c:	029b      	lsls	r3, r3, #10
 800280e:	4013      	ands	r3, r2
 8002810:	d0f0      	beq.n	80027f4 <HAL_RCC_OscConfig+0xe4>
 8002812:	e015      	b.n	8002840 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002814:	f7fe fc76 	bl	8001104 <HAL_GetTick>
 8002818:	0003      	movs	r3, r0
 800281a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800281c:	e008      	b.n	8002830 <HAL_RCC_OscConfig+0x120>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800281e:	f7fe fc71 	bl	8001104 <HAL_GetTick>
 8002822:	0002      	movs	r2, r0
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	2b64      	cmp	r3, #100	@ 0x64
 800282a:	d901      	bls.n	8002830 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	e2d3      	b.n	8002dd8 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002830:	4b8b      	ldr	r3, [pc, #556]	@ (8002a60 <HAL_RCC_OscConfig+0x350>)
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	2380      	movs	r3, #128	@ 0x80
 8002836:	029b      	lsls	r3, r3, #10
 8002838:	4013      	ands	r3, r2
 800283a:	d1f0      	bne.n	800281e <HAL_RCC_OscConfig+0x10e>
 800283c:	e000      	b.n	8002840 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800283e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	2202      	movs	r2, #2
 8002846:	4013      	ands	r3, r2
 8002848:	d100      	bne.n	800284c <HAL_RCC_OscConfig+0x13c>
 800284a:	e08b      	b.n	8002964 <HAL_RCC_OscConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002852:	6a3b      	ldr	r3, [r7, #32]
 8002854:	2b04      	cmp	r3, #4
 8002856:	d005      	beq.n	8002864 <HAL_RCC_OscConfig+0x154>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002858:	6a3b      	ldr	r3, [r7, #32]
 800285a:	2b0c      	cmp	r3, #12
 800285c:	d13e      	bne.n	80028dc <HAL_RCC_OscConfig+0x1cc>
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d13b      	bne.n	80028dc <HAL_RCC_OscConfig+0x1cc>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002864:	4b7e      	ldr	r3, [pc, #504]	@ (8002a60 <HAL_RCC_OscConfig+0x350>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	2204      	movs	r2, #4
 800286a:	4013      	ands	r3, r2
 800286c:	d004      	beq.n	8002878 <HAL_RCC_OscConfig+0x168>
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d101      	bne.n	8002878 <HAL_RCC_OscConfig+0x168>
      {
        return HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	e2af      	b.n	8002dd8 <HAL_RCC_OscConfig+0x6c8>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002878:	4b79      	ldr	r3, [pc, #484]	@ (8002a60 <HAL_RCC_OscConfig+0x350>)
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	4a7b      	ldr	r2, [pc, #492]	@ (8002a6c <HAL_RCC_OscConfig+0x35c>)
 800287e:	4013      	ands	r3, r2
 8002880:	0019      	movs	r1, r3
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	691b      	ldr	r3, [r3, #16]
 8002886:	021a      	lsls	r2, r3, #8
 8002888:	4b75      	ldr	r3, [pc, #468]	@ (8002a60 <HAL_RCC_OscConfig+0x350>)
 800288a:	430a      	orrs	r2, r1
 800288c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800288e:	4b74      	ldr	r3, [pc, #464]	@ (8002a60 <HAL_RCC_OscConfig+0x350>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	2209      	movs	r2, #9
 8002894:	4393      	bics	r3, r2
 8002896:	0019      	movs	r1, r3
 8002898:	4b71      	ldr	r3, [pc, #452]	@ (8002a60 <HAL_RCC_OscConfig+0x350>)
 800289a:	697a      	ldr	r2, [r7, #20]
 800289c:	430a      	orrs	r2, r1
 800289e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80028a0:	f000 fbe8 	bl	8003074 <HAL_RCC_GetSysClockFreq>
 80028a4:	0001      	movs	r1, r0
 80028a6:	4b6e      	ldr	r3, [pc, #440]	@ (8002a60 <HAL_RCC_OscConfig+0x350>)
 80028a8:	68db      	ldr	r3, [r3, #12]
 80028aa:	091b      	lsrs	r3, r3, #4
 80028ac:	220f      	movs	r2, #15
 80028ae:	4013      	ands	r3, r2
 80028b0:	4a6f      	ldr	r2, [pc, #444]	@ (8002a70 <HAL_RCC_OscConfig+0x360>)
 80028b2:	5cd3      	ldrb	r3, [r2, r3]
 80028b4:	000a      	movs	r2, r1
 80028b6:	40da      	lsrs	r2, r3
 80028b8:	4b6e      	ldr	r3, [pc, #440]	@ (8002a74 <HAL_RCC_OscConfig+0x364>)
 80028ba:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80028bc:	4b6e      	ldr	r3, [pc, #440]	@ (8002a78 <HAL_RCC_OscConfig+0x368>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	2513      	movs	r5, #19
 80028c2:	197c      	adds	r4, r7, r5
 80028c4:	0018      	movs	r0, r3
 80028c6:	f7fe fbd7 	bl	8001078 <HAL_InitTick>
 80028ca:	0003      	movs	r3, r0
 80028cc:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80028ce:	197b      	adds	r3, r7, r5
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d046      	beq.n	8002964 <HAL_RCC_OscConfig+0x254>
      {
        return status;
 80028d6:	197b      	adds	r3, r7, r5
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	e27d      	b.n	8002dd8 <HAL_RCC_OscConfig+0x6c8>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d027      	beq.n	8002932 <HAL_RCC_OscConfig+0x222>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80028e2:	4b5f      	ldr	r3, [pc, #380]	@ (8002a60 <HAL_RCC_OscConfig+0x350>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	2209      	movs	r2, #9
 80028e8:	4393      	bics	r3, r2
 80028ea:	0019      	movs	r1, r3
 80028ec:	4b5c      	ldr	r3, [pc, #368]	@ (8002a60 <HAL_RCC_OscConfig+0x350>)
 80028ee:	697a      	ldr	r2, [r7, #20]
 80028f0:	430a      	orrs	r2, r1
 80028f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f4:	f7fe fc06 	bl	8001104 <HAL_GetTick>
 80028f8:	0003      	movs	r3, r0
 80028fa:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80028fc:	e008      	b.n	8002910 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028fe:	f7fe fc01 	bl	8001104 <HAL_GetTick>
 8002902:	0002      	movs	r2, r0
 8002904:	69bb      	ldr	r3, [r7, #24]
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	2b02      	cmp	r3, #2
 800290a:	d901      	bls.n	8002910 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800290c:	2303      	movs	r3, #3
 800290e:	e263      	b.n	8002dd8 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002910:	4b53      	ldr	r3, [pc, #332]	@ (8002a60 <HAL_RCC_OscConfig+0x350>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	2204      	movs	r2, #4
 8002916:	4013      	ands	r3, r2
 8002918:	d0f1      	beq.n	80028fe <HAL_RCC_OscConfig+0x1ee>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800291a:	4b51      	ldr	r3, [pc, #324]	@ (8002a60 <HAL_RCC_OscConfig+0x350>)
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	4a53      	ldr	r2, [pc, #332]	@ (8002a6c <HAL_RCC_OscConfig+0x35c>)
 8002920:	4013      	ands	r3, r2
 8002922:	0019      	movs	r1, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	691b      	ldr	r3, [r3, #16]
 8002928:	021a      	lsls	r2, r3, #8
 800292a:	4b4d      	ldr	r3, [pc, #308]	@ (8002a60 <HAL_RCC_OscConfig+0x350>)
 800292c:	430a      	orrs	r2, r1
 800292e:	605a      	str	r2, [r3, #4]
 8002930:	e018      	b.n	8002964 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002932:	4b4b      	ldr	r3, [pc, #300]	@ (8002a60 <HAL_RCC_OscConfig+0x350>)
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	4b4a      	ldr	r3, [pc, #296]	@ (8002a60 <HAL_RCC_OscConfig+0x350>)
 8002938:	2101      	movs	r1, #1
 800293a:	438a      	bics	r2, r1
 800293c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800293e:	f7fe fbe1 	bl	8001104 <HAL_GetTick>
 8002942:	0003      	movs	r3, r0
 8002944:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002946:	e008      	b.n	800295a <HAL_RCC_OscConfig+0x24a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002948:	f7fe fbdc 	bl	8001104 <HAL_GetTick>
 800294c:	0002      	movs	r2, r0
 800294e:	69bb      	ldr	r3, [r7, #24]
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	2b02      	cmp	r3, #2
 8002954:	d901      	bls.n	800295a <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	e23e      	b.n	8002dd8 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800295a:	4b41      	ldr	r3, [pc, #260]	@ (8002a60 <HAL_RCC_OscConfig+0x350>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	2204      	movs	r2, #4
 8002960:	4013      	ands	r3, r2
 8002962:	d1f1      	bne.n	8002948 <HAL_RCC_OscConfig+0x238>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	2210      	movs	r2, #16
 800296a:	4013      	ands	r3, r2
 800296c:	d100      	bne.n	8002970 <HAL_RCC_OscConfig+0x260>
 800296e:	e0a1      	b.n	8002ab4 <HAL_RCC_OscConfig+0x3a4>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002970:	6a3b      	ldr	r3, [r7, #32]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d140      	bne.n	80029f8 <HAL_RCC_OscConfig+0x2e8>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002976:	4b3a      	ldr	r3, [pc, #232]	@ (8002a60 <HAL_RCC_OscConfig+0x350>)
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	2380      	movs	r3, #128	@ 0x80
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	4013      	ands	r3, r2
 8002980:	d005      	beq.n	800298e <HAL_RCC_OscConfig+0x27e>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	699b      	ldr	r3, [r3, #24]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d101      	bne.n	800298e <HAL_RCC_OscConfig+0x27e>
      {
        return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e224      	b.n	8002dd8 <HAL_RCC_OscConfig+0x6c8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800298e:	4b34      	ldr	r3, [pc, #208]	@ (8002a60 <HAL_RCC_OscConfig+0x350>)
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	4a3a      	ldr	r2, [pc, #232]	@ (8002a7c <HAL_RCC_OscConfig+0x36c>)
 8002994:	4013      	ands	r3, r2
 8002996:	0019      	movs	r1, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6a1a      	ldr	r2, [r3, #32]
 800299c:	4b30      	ldr	r3, [pc, #192]	@ (8002a60 <HAL_RCC_OscConfig+0x350>)
 800299e:	430a      	orrs	r2, r1
 80029a0:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029a2:	4b2f      	ldr	r3, [pc, #188]	@ (8002a60 <HAL_RCC_OscConfig+0x350>)
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	021b      	lsls	r3, r3, #8
 80029a8:	0a19      	lsrs	r1, r3, #8
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	69db      	ldr	r3, [r3, #28]
 80029ae:	061a      	lsls	r2, r3, #24
 80029b0:	4b2b      	ldr	r3, [pc, #172]	@ (8002a60 <HAL_RCC_OscConfig+0x350>)
 80029b2:	430a      	orrs	r2, r1
 80029b4:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6a1b      	ldr	r3, [r3, #32]
 80029ba:	0b5b      	lsrs	r3, r3, #13
 80029bc:	3301      	adds	r3, #1
 80029be:	2280      	movs	r2, #128	@ 0x80
 80029c0:	0212      	lsls	r2, r2, #8
 80029c2:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80029c4:	4b26      	ldr	r3, [pc, #152]	@ (8002a60 <HAL_RCC_OscConfig+0x350>)
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	091b      	lsrs	r3, r3, #4
 80029ca:	210f      	movs	r1, #15
 80029cc:	400b      	ands	r3, r1
 80029ce:	4928      	ldr	r1, [pc, #160]	@ (8002a70 <HAL_RCC_OscConfig+0x360>)
 80029d0:	5ccb      	ldrb	r3, [r1, r3]
 80029d2:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80029d4:	4b27      	ldr	r3, [pc, #156]	@ (8002a74 <HAL_RCC_OscConfig+0x364>)
 80029d6:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80029d8:	4b27      	ldr	r3, [pc, #156]	@ (8002a78 <HAL_RCC_OscConfig+0x368>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2513      	movs	r5, #19
 80029de:	197c      	adds	r4, r7, r5
 80029e0:	0018      	movs	r0, r3
 80029e2:	f7fe fb49 	bl	8001078 <HAL_InitTick>
 80029e6:	0003      	movs	r3, r0
 80029e8:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80029ea:	197b      	adds	r3, r7, r5
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d060      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x3a4>
        {
          return status;
 80029f2:	197b      	adds	r3, r7, r5
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	e1ef      	b.n	8002dd8 <HAL_RCC_OscConfig+0x6c8>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	699b      	ldr	r3, [r3, #24]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d03f      	beq.n	8002a80 <HAL_RCC_OscConfig+0x370>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002a00:	4b17      	ldr	r3, [pc, #92]	@ (8002a60 <HAL_RCC_OscConfig+0x350>)
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	4b16      	ldr	r3, [pc, #88]	@ (8002a60 <HAL_RCC_OscConfig+0x350>)
 8002a06:	2180      	movs	r1, #128	@ 0x80
 8002a08:	0049      	lsls	r1, r1, #1
 8002a0a:	430a      	orrs	r2, r1
 8002a0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a0e:	f7fe fb79 	bl	8001104 <HAL_GetTick>
 8002a12:	0003      	movs	r3, r0
 8002a14:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002a16:	e008      	b.n	8002a2a <HAL_RCC_OscConfig+0x31a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a18:	f7fe fb74 	bl	8001104 <HAL_GetTick>
 8002a1c:	0002      	movs	r2, r0
 8002a1e:	69bb      	ldr	r3, [r7, #24]
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d901      	bls.n	8002a2a <HAL_RCC_OscConfig+0x31a>
          {
            return HAL_TIMEOUT;
 8002a26:	2303      	movs	r3, #3
 8002a28:	e1d6      	b.n	8002dd8 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002a2a:	4b0d      	ldr	r3, [pc, #52]	@ (8002a60 <HAL_RCC_OscConfig+0x350>)
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	2380      	movs	r3, #128	@ 0x80
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	4013      	ands	r3, r2
 8002a34:	d0f0      	beq.n	8002a18 <HAL_RCC_OscConfig+0x308>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a36:	4b0a      	ldr	r3, [pc, #40]	@ (8002a60 <HAL_RCC_OscConfig+0x350>)
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	4a10      	ldr	r2, [pc, #64]	@ (8002a7c <HAL_RCC_OscConfig+0x36c>)
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	0019      	movs	r1, r3
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6a1a      	ldr	r2, [r3, #32]
 8002a44:	4b06      	ldr	r3, [pc, #24]	@ (8002a60 <HAL_RCC_OscConfig+0x350>)
 8002a46:	430a      	orrs	r2, r1
 8002a48:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a4a:	4b05      	ldr	r3, [pc, #20]	@ (8002a60 <HAL_RCC_OscConfig+0x350>)
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	021b      	lsls	r3, r3, #8
 8002a50:	0a19      	lsrs	r1, r3, #8
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	69db      	ldr	r3, [r3, #28]
 8002a56:	061a      	lsls	r2, r3, #24
 8002a58:	4b01      	ldr	r3, [pc, #4]	@ (8002a60 <HAL_RCC_OscConfig+0x350>)
 8002a5a:	430a      	orrs	r2, r1
 8002a5c:	605a      	str	r2, [r3, #4]
 8002a5e:	e029      	b.n	8002ab4 <HAL_RCC_OscConfig+0x3a4>
 8002a60:	40021000 	.word	0x40021000
 8002a64:	fffeffff 	.word	0xfffeffff
 8002a68:	fffbffff 	.word	0xfffbffff
 8002a6c:	ffffe0ff 	.word	0xffffe0ff
 8002a70:	08004428 	.word	0x08004428
 8002a74:	2000000c 	.word	0x2000000c
 8002a78:	20000010 	.word	0x20000010
 8002a7c:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002a80:	4bbe      	ldr	r3, [pc, #760]	@ (8002d7c <HAL_RCC_OscConfig+0x66c>)
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	4bbd      	ldr	r3, [pc, #756]	@ (8002d7c <HAL_RCC_OscConfig+0x66c>)
 8002a86:	49be      	ldr	r1, [pc, #760]	@ (8002d80 <HAL_RCC_OscConfig+0x670>)
 8002a88:	400a      	ands	r2, r1
 8002a8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a8c:	f7fe fb3a 	bl	8001104 <HAL_GetTick>
 8002a90:	0003      	movs	r3, r0
 8002a92:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002a94:	e008      	b.n	8002aa8 <HAL_RCC_OscConfig+0x398>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a96:	f7fe fb35 	bl	8001104 <HAL_GetTick>
 8002a9a:	0002      	movs	r2, r0
 8002a9c:	69bb      	ldr	r3, [r7, #24]
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	2b02      	cmp	r3, #2
 8002aa2:	d901      	bls.n	8002aa8 <HAL_RCC_OscConfig+0x398>
          {
            return HAL_TIMEOUT;
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	e197      	b.n	8002dd8 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002aa8:	4bb4      	ldr	r3, [pc, #720]	@ (8002d7c <HAL_RCC_OscConfig+0x66c>)
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	2380      	movs	r3, #128	@ 0x80
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	d1f0      	bne.n	8002a96 <HAL_RCC_OscConfig+0x386>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	2208      	movs	r2, #8
 8002aba:	4013      	ands	r3, r2
 8002abc:	d036      	beq.n	8002b2c <HAL_RCC_OscConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	695b      	ldr	r3, [r3, #20]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d019      	beq.n	8002afa <HAL_RCC_OscConfig+0x3ea>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ac6:	4bad      	ldr	r3, [pc, #692]	@ (8002d7c <HAL_RCC_OscConfig+0x66c>)
 8002ac8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002aca:	4bac      	ldr	r3, [pc, #688]	@ (8002d7c <HAL_RCC_OscConfig+0x66c>)
 8002acc:	2101      	movs	r1, #1
 8002ace:	430a      	orrs	r2, r1
 8002ad0:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ad2:	f7fe fb17 	bl	8001104 <HAL_GetTick>
 8002ad6:	0003      	movs	r3, r0
 8002ad8:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002ada:	e008      	b.n	8002aee <HAL_RCC_OscConfig+0x3de>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002adc:	f7fe fb12 	bl	8001104 <HAL_GetTick>
 8002ae0:	0002      	movs	r2, r0
 8002ae2:	69bb      	ldr	r3, [r7, #24]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d901      	bls.n	8002aee <HAL_RCC_OscConfig+0x3de>
        {
          return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e174      	b.n	8002dd8 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002aee:	4ba3      	ldr	r3, [pc, #652]	@ (8002d7c <HAL_RCC_OscConfig+0x66c>)
 8002af0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002af2:	2202      	movs	r2, #2
 8002af4:	4013      	ands	r3, r2
 8002af6:	d0f1      	beq.n	8002adc <HAL_RCC_OscConfig+0x3cc>
 8002af8:	e018      	b.n	8002b2c <HAL_RCC_OscConfig+0x41c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002afa:	4ba0      	ldr	r3, [pc, #640]	@ (8002d7c <HAL_RCC_OscConfig+0x66c>)
 8002afc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002afe:	4b9f      	ldr	r3, [pc, #636]	@ (8002d7c <HAL_RCC_OscConfig+0x66c>)
 8002b00:	2101      	movs	r1, #1
 8002b02:	438a      	bics	r2, r1
 8002b04:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b06:	f7fe fafd 	bl	8001104 <HAL_GetTick>
 8002b0a:	0003      	movs	r3, r0
 8002b0c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002b0e:	e008      	b.n	8002b22 <HAL_RCC_OscConfig+0x412>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b10:	f7fe faf8 	bl	8001104 <HAL_GetTick>
 8002b14:	0002      	movs	r2, r0
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d901      	bls.n	8002b22 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e15a      	b.n	8002dd8 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002b22:	4b96      	ldr	r3, [pc, #600]	@ (8002d7c <HAL_RCC_OscConfig+0x66c>)
 8002b24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b26:	2202      	movs	r2, #2
 8002b28:	4013      	ands	r3, r2
 8002b2a:	d1f1      	bne.n	8002b10 <HAL_RCC_OscConfig+0x400>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2204      	movs	r2, #4
 8002b32:	4013      	ands	r3, r2
 8002b34:	d100      	bne.n	8002b38 <HAL_RCC_OscConfig+0x428>
 8002b36:	e0ae      	b.n	8002c96 <HAL_RCC_OscConfig+0x586>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b38:	2027      	movs	r0, #39	@ 0x27
 8002b3a:	183b      	adds	r3, r7, r0
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b40:	4b8e      	ldr	r3, [pc, #568]	@ (8002d7c <HAL_RCC_OscConfig+0x66c>)
 8002b42:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002b44:	2380      	movs	r3, #128	@ 0x80
 8002b46:	055b      	lsls	r3, r3, #21
 8002b48:	4013      	ands	r3, r2
 8002b4a:	d109      	bne.n	8002b60 <HAL_RCC_OscConfig+0x450>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b4c:	4b8b      	ldr	r3, [pc, #556]	@ (8002d7c <HAL_RCC_OscConfig+0x66c>)
 8002b4e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002b50:	4b8a      	ldr	r3, [pc, #552]	@ (8002d7c <HAL_RCC_OscConfig+0x66c>)
 8002b52:	2180      	movs	r1, #128	@ 0x80
 8002b54:	0549      	lsls	r1, r1, #21
 8002b56:	430a      	orrs	r2, r1
 8002b58:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8002b5a:	183b      	adds	r3, r7, r0
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b60:	4b88      	ldr	r3, [pc, #544]	@ (8002d84 <HAL_RCC_OscConfig+0x674>)
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	2380      	movs	r3, #128	@ 0x80
 8002b66:	005b      	lsls	r3, r3, #1
 8002b68:	4013      	ands	r3, r2
 8002b6a:	d11a      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x492>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b6c:	4b85      	ldr	r3, [pc, #532]	@ (8002d84 <HAL_RCC_OscConfig+0x674>)
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	4b84      	ldr	r3, [pc, #528]	@ (8002d84 <HAL_RCC_OscConfig+0x674>)
 8002b72:	2180      	movs	r1, #128	@ 0x80
 8002b74:	0049      	lsls	r1, r1, #1
 8002b76:	430a      	orrs	r2, r1
 8002b78:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b7a:	f7fe fac3 	bl	8001104 <HAL_GetTick>
 8002b7e:	0003      	movs	r3, r0
 8002b80:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b82:	e008      	b.n	8002b96 <HAL_RCC_OscConfig+0x486>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b84:	f7fe fabe 	bl	8001104 <HAL_GetTick>
 8002b88:	0002      	movs	r2, r0
 8002b8a:	69bb      	ldr	r3, [r7, #24]
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	2b64      	cmp	r3, #100	@ 0x64
 8002b90:	d901      	bls.n	8002b96 <HAL_RCC_OscConfig+0x486>
        {
          return HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	e120      	b.n	8002dd8 <HAL_RCC_OscConfig+0x6c8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b96:	4b7b      	ldr	r3, [pc, #492]	@ (8002d84 <HAL_RCC_OscConfig+0x674>)
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	2380      	movs	r3, #128	@ 0x80
 8002b9c:	005b      	lsls	r3, r3, #1
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	d0f0      	beq.n	8002b84 <HAL_RCC_OscConfig+0x474>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	689a      	ldr	r2, [r3, #8]
 8002ba6:	2380      	movs	r3, #128	@ 0x80
 8002ba8:	005b      	lsls	r3, r3, #1
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d107      	bne.n	8002bbe <HAL_RCC_OscConfig+0x4ae>
 8002bae:	4b73      	ldr	r3, [pc, #460]	@ (8002d7c <HAL_RCC_OscConfig+0x66c>)
 8002bb0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002bb2:	4b72      	ldr	r3, [pc, #456]	@ (8002d7c <HAL_RCC_OscConfig+0x66c>)
 8002bb4:	2180      	movs	r1, #128	@ 0x80
 8002bb6:	0049      	lsls	r1, r1, #1
 8002bb8:	430a      	orrs	r2, r1
 8002bba:	651a      	str	r2, [r3, #80]	@ 0x50
 8002bbc:	e031      	b.n	8002c22 <HAL_RCC_OscConfig+0x512>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d10c      	bne.n	8002be0 <HAL_RCC_OscConfig+0x4d0>
 8002bc6:	4b6d      	ldr	r3, [pc, #436]	@ (8002d7c <HAL_RCC_OscConfig+0x66c>)
 8002bc8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002bca:	4b6c      	ldr	r3, [pc, #432]	@ (8002d7c <HAL_RCC_OscConfig+0x66c>)
 8002bcc:	496c      	ldr	r1, [pc, #432]	@ (8002d80 <HAL_RCC_OscConfig+0x670>)
 8002bce:	400a      	ands	r2, r1
 8002bd0:	651a      	str	r2, [r3, #80]	@ 0x50
 8002bd2:	4b6a      	ldr	r3, [pc, #424]	@ (8002d7c <HAL_RCC_OscConfig+0x66c>)
 8002bd4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002bd6:	4b69      	ldr	r3, [pc, #420]	@ (8002d7c <HAL_RCC_OscConfig+0x66c>)
 8002bd8:	496b      	ldr	r1, [pc, #428]	@ (8002d88 <HAL_RCC_OscConfig+0x678>)
 8002bda:	400a      	ands	r2, r1
 8002bdc:	651a      	str	r2, [r3, #80]	@ 0x50
 8002bde:	e020      	b.n	8002c22 <HAL_RCC_OscConfig+0x512>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	689a      	ldr	r2, [r3, #8]
 8002be4:	23a0      	movs	r3, #160	@ 0xa0
 8002be6:	00db      	lsls	r3, r3, #3
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d10e      	bne.n	8002c0a <HAL_RCC_OscConfig+0x4fa>
 8002bec:	4b63      	ldr	r3, [pc, #396]	@ (8002d7c <HAL_RCC_OscConfig+0x66c>)
 8002bee:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002bf0:	4b62      	ldr	r3, [pc, #392]	@ (8002d7c <HAL_RCC_OscConfig+0x66c>)
 8002bf2:	2180      	movs	r1, #128	@ 0x80
 8002bf4:	00c9      	lsls	r1, r1, #3
 8002bf6:	430a      	orrs	r2, r1
 8002bf8:	651a      	str	r2, [r3, #80]	@ 0x50
 8002bfa:	4b60      	ldr	r3, [pc, #384]	@ (8002d7c <HAL_RCC_OscConfig+0x66c>)
 8002bfc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002bfe:	4b5f      	ldr	r3, [pc, #380]	@ (8002d7c <HAL_RCC_OscConfig+0x66c>)
 8002c00:	2180      	movs	r1, #128	@ 0x80
 8002c02:	0049      	lsls	r1, r1, #1
 8002c04:	430a      	orrs	r2, r1
 8002c06:	651a      	str	r2, [r3, #80]	@ 0x50
 8002c08:	e00b      	b.n	8002c22 <HAL_RCC_OscConfig+0x512>
 8002c0a:	4b5c      	ldr	r3, [pc, #368]	@ (8002d7c <HAL_RCC_OscConfig+0x66c>)
 8002c0c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002c0e:	4b5b      	ldr	r3, [pc, #364]	@ (8002d7c <HAL_RCC_OscConfig+0x66c>)
 8002c10:	495b      	ldr	r1, [pc, #364]	@ (8002d80 <HAL_RCC_OscConfig+0x670>)
 8002c12:	400a      	ands	r2, r1
 8002c14:	651a      	str	r2, [r3, #80]	@ 0x50
 8002c16:	4b59      	ldr	r3, [pc, #356]	@ (8002d7c <HAL_RCC_OscConfig+0x66c>)
 8002c18:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002c1a:	4b58      	ldr	r3, [pc, #352]	@ (8002d7c <HAL_RCC_OscConfig+0x66c>)
 8002c1c:	495a      	ldr	r1, [pc, #360]	@ (8002d88 <HAL_RCC_OscConfig+0x678>)
 8002c1e:	400a      	ands	r2, r1
 8002c20:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d015      	beq.n	8002c56 <HAL_RCC_OscConfig+0x546>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c2a:	f7fe fa6b 	bl	8001104 <HAL_GetTick>
 8002c2e:	0003      	movs	r3, r0
 8002c30:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c32:	e009      	b.n	8002c48 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c34:	f7fe fa66 	bl	8001104 <HAL_GetTick>
 8002c38:	0002      	movs	r2, r0
 8002c3a:	69bb      	ldr	r3, [r7, #24]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	4a53      	ldr	r2, [pc, #332]	@ (8002d8c <HAL_RCC_OscConfig+0x67c>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d901      	bls.n	8002c48 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8002c44:	2303      	movs	r3, #3
 8002c46:	e0c7      	b.n	8002dd8 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c48:	4b4c      	ldr	r3, [pc, #304]	@ (8002d7c <HAL_RCC_OscConfig+0x66c>)
 8002c4a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002c4c:	2380      	movs	r3, #128	@ 0x80
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	4013      	ands	r3, r2
 8002c52:	d0ef      	beq.n	8002c34 <HAL_RCC_OscConfig+0x524>
 8002c54:	e014      	b.n	8002c80 <HAL_RCC_OscConfig+0x570>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c56:	f7fe fa55 	bl	8001104 <HAL_GetTick>
 8002c5a:	0003      	movs	r3, r0
 8002c5c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002c5e:	e009      	b.n	8002c74 <HAL_RCC_OscConfig+0x564>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c60:	f7fe fa50 	bl	8001104 <HAL_GetTick>
 8002c64:	0002      	movs	r2, r0
 8002c66:	69bb      	ldr	r3, [r7, #24]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	4a48      	ldr	r2, [pc, #288]	@ (8002d8c <HAL_RCC_OscConfig+0x67c>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d901      	bls.n	8002c74 <HAL_RCC_OscConfig+0x564>
        {
          return HAL_TIMEOUT;
 8002c70:	2303      	movs	r3, #3
 8002c72:	e0b1      	b.n	8002dd8 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002c74:	4b41      	ldr	r3, [pc, #260]	@ (8002d7c <HAL_RCC_OscConfig+0x66c>)
 8002c76:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002c78:	2380      	movs	r3, #128	@ 0x80
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	d1ef      	bne.n	8002c60 <HAL_RCC_OscConfig+0x550>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002c80:	2327      	movs	r3, #39	@ 0x27
 8002c82:	18fb      	adds	r3, r7, r3
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d105      	bne.n	8002c96 <HAL_RCC_OscConfig+0x586>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c8a:	4b3c      	ldr	r3, [pc, #240]	@ (8002d7c <HAL_RCC_OscConfig+0x66c>)
 8002c8c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002c8e:	4b3b      	ldr	r3, [pc, #236]	@ (8002d7c <HAL_RCC_OscConfig+0x66c>)
 8002c90:	493f      	ldr	r1, [pc, #252]	@ (8002d90 <HAL_RCC_OscConfig+0x680>)
 8002c92:	400a      	ands	r2, r1
 8002c94:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d100      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x590>
 8002c9e:	e09a      	b.n	8002dd6 <HAL_RCC_OscConfig+0x6c6>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ca0:	6a3b      	ldr	r3, [r7, #32]
 8002ca2:	2b0c      	cmp	r3, #12
 8002ca4:	d064      	beq.n	8002d70 <HAL_RCC_OscConfig+0x660>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	d145      	bne.n	8002d3a <HAL_RCC_OscConfig+0x62a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cae:	4b33      	ldr	r3, [pc, #204]	@ (8002d7c <HAL_RCC_OscConfig+0x66c>)
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	4b32      	ldr	r3, [pc, #200]	@ (8002d7c <HAL_RCC_OscConfig+0x66c>)
 8002cb4:	4937      	ldr	r1, [pc, #220]	@ (8002d94 <HAL_RCC_OscConfig+0x684>)
 8002cb6:	400a      	ands	r2, r1
 8002cb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cba:	f7fe fa23 	bl	8001104 <HAL_GetTick>
 8002cbe:	0003      	movs	r3, r0
 8002cc0:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002cc2:	e008      	b.n	8002cd6 <HAL_RCC_OscConfig+0x5c6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cc4:	f7fe fa1e 	bl	8001104 <HAL_GetTick>
 8002cc8:	0002      	movs	r2, r0
 8002cca:	69bb      	ldr	r3, [r7, #24]
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d901      	bls.n	8002cd6 <HAL_RCC_OscConfig+0x5c6>
          {
            return HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e080      	b.n	8002dd8 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002cd6:	4b29      	ldr	r3, [pc, #164]	@ (8002d7c <HAL_RCC_OscConfig+0x66c>)
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	2380      	movs	r3, #128	@ 0x80
 8002cdc:	049b      	lsls	r3, r3, #18
 8002cde:	4013      	ands	r3, r2
 8002ce0:	d1f0      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x5b4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ce2:	4b26      	ldr	r3, [pc, #152]	@ (8002d7c <HAL_RCC_OscConfig+0x66c>)
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	4a2c      	ldr	r2, [pc, #176]	@ (8002d98 <HAL_RCC_OscConfig+0x688>)
 8002ce8:	4013      	ands	r3, r2
 8002cea:	0019      	movs	r1, r3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cf4:	431a      	orrs	r2, r3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cfa:	431a      	orrs	r2, r3
 8002cfc:	4b1f      	ldr	r3, [pc, #124]	@ (8002d7c <HAL_RCC_OscConfig+0x66c>)
 8002cfe:	430a      	orrs	r2, r1
 8002d00:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d02:	4b1e      	ldr	r3, [pc, #120]	@ (8002d7c <HAL_RCC_OscConfig+0x66c>)
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	4b1d      	ldr	r3, [pc, #116]	@ (8002d7c <HAL_RCC_OscConfig+0x66c>)
 8002d08:	2180      	movs	r1, #128	@ 0x80
 8002d0a:	0449      	lsls	r1, r1, #17
 8002d0c:	430a      	orrs	r2, r1
 8002d0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d10:	f7fe f9f8 	bl	8001104 <HAL_GetTick>
 8002d14:	0003      	movs	r3, r0
 8002d16:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002d18:	e008      	b.n	8002d2c <HAL_RCC_OscConfig+0x61c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d1a:	f7fe f9f3 	bl	8001104 <HAL_GetTick>
 8002d1e:	0002      	movs	r2, r0
 8002d20:	69bb      	ldr	r3, [r7, #24]
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	d901      	bls.n	8002d2c <HAL_RCC_OscConfig+0x61c>
          {
            return HAL_TIMEOUT;
 8002d28:	2303      	movs	r3, #3
 8002d2a:	e055      	b.n	8002dd8 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002d2c:	4b13      	ldr	r3, [pc, #76]	@ (8002d7c <HAL_RCC_OscConfig+0x66c>)
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	2380      	movs	r3, #128	@ 0x80
 8002d32:	049b      	lsls	r3, r3, #18
 8002d34:	4013      	ands	r3, r2
 8002d36:	d0f0      	beq.n	8002d1a <HAL_RCC_OscConfig+0x60a>
 8002d38:	e04d      	b.n	8002dd6 <HAL_RCC_OscConfig+0x6c6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d3a:	4b10      	ldr	r3, [pc, #64]	@ (8002d7c <HAL_RCC_OscConfig+0x66c>)
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	4b0f      	ldr	r3, [pc, #60]	@ (8002d7c <HAL_RCC_OscConfig+0x66c>)
 8002d40:	4914      	ldr	r1, [pc, #80]	@ (8002d94 <HAL_RCC_OscConfig+0x684>)
 8002d42:	400a      	ands	r2, r1
 8002d44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d46:	f7fe f9dd 	bl	8001104 <HAL_GetTick>
 8002d4a:	0003      	movs	r3, r0
 8002d4c:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002d4e:	e008      	b.n	8002d62 <HAL_RCC_OscConfig+0x652>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d50:	f7fe f9d8 	bl	8001104 <HAL_GetTick>
 8002d54:	0002      	movs	r2, r0
 8002d56:	69bb      	ldr	r3, [r7, #24]
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	d901      	bls.n	8002d62 <HAL_RCC_OscConfig+0x652>
          {
            return HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	e03a      	b.n	8002dd8 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002d62:	4b06      	ldr	r3, [pc, #24]	@ (8002d7c <HAL_RCC_OscConfig+0x66c>)
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	2380      	movs	r3, #128	@ 0x80
 8002d68:	049b      	lsls	r3, r3, #18
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	d1f0      	bne.n	8002d50 <HAL_RCC_OscConfig+0x640>
 8002d6e:	e032      	b.n	8002dd6 <HAL_RCC_OscConfig+0x6c6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d111      	bne.n	8002d9c <HAL_RCC_OscConfig+0x68c>
      {
        return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e02d      	b.n	8002dd8 <HAL_RCC_OscConfig+0x6c8>
 8002d7c:	40021000 	.word	0x40021000
 8002d80:	fffffeff 	.word	0xfffffeff
 8002d84:	40007000 	.word	0x40007000
 8002d88:	fffffbff 	.word	0xfffffbff
 8002d8c:	00001388 	.word	0x00001388
 8002d90:	efffffff 	.word	0xefffffff
 8002d94:	feffffff 	.word	0xfeffffff
 8002d98:	ff02ffff 	.word	0xff02ffff
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002d9c:	4b10      	ldr	r3, [pc, #64]	@ (8002de0 <HAL_RCC_OscConfig+0x6d0>)
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002da2:	69fa      	ldr	r2, [r7, #28]
 8002da4:	2380      	movs	r3, #128	@ 0x80
 8002da6:	025b      	lsls	r3, r3, #9
 8002da8:	401a      	ands	r2, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d10f      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x6c2>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002db2:	69fa      	ldr	r2, [r7, #28]
 8002db4:	23f0      	movs	r3, #240	@ 0xf0
 8002db6:	039b      	lsls	r3, r3, #14
 8002db8:	401a      	ands	r2, r3
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d107      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x6c2>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002dc2:	69fa      	ldr	r2, [r7, #28]
 8002dc4:	23c0      	movs	r3, #192	@ 0xc0
 8002dc6:	041b      	lsls	r3, r3, #16
 8002dc8:	401a      	ands	r2, r3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d001      	beq.n	8002dd6 <HAL_RCC_OscConfig+0x6c6>
        {
          return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e000      	b.n	8002dd8 <HAL_RCC_OscConfig+0x6c8>
        }
      }
    }
  }
  return HAL_OK;
 8002dd6:	2300      	movs	r3, #0
}
 8002dd8:	0018      	movs	r0, r3
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	b00a      	add	sp, #40	@ 0x28
 8002dde:	bdb0      	pop	{r4, r5, r7, pc}
 8002de0:	40021000 	.word	0x40021000

08002de4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002de4:	b5b0      	push	{r4, r5, r7, lr}
 8002de6:	b084      	sub	sp, #16
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d101      	bne.n	8002df8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	e128      	b.n	800304a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002df8:	4b96      	ldr	r3, [pc, #600]	@ (8003054 <HAL_RCC_ClockConfig+0x270>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	4013      	ands	r3, r2
 8002e00:	683a      	ldr	r2, [r7, #0]
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d91e      	bls.n	8002e44 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e06:	4b93      	ldr	r3, [pc, #588]	@ (8003054 <HAL_RCC_ClockConfig+0x270>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	4393      	bics	r3, r2
 8002e0e:	0019      	movs	r1, r3
 8002e10:	4b90      	ldr	r3, [pc, #576]	@ (8003054 <HAL_RCC_ClockConfig+0x270>)
 8002e12:	683a      	ldr	r2, [r7, #0]
 8002e14:	430a      	orrs	r2, r1
 8002e16:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002e18:	f7fe f974 	bl	8001104 <HAL_GetTick>
 8002e1c:	0003      	movs	r3, r0
 8002e1e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e20:	e009      	b.n	8002e36 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e22:	f7fe f96f 	bl	8001104 <HAL_GetTick>
 8002e26:	0002      	movs	r2, r0
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	1ad3      	subs	r3, r2, r3
 8002e2c:	4a8a      	ldr	r2, [pc, #552]	@ (8003058 <HAL_RCC_ClockConfig+0x274>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d901      	bls.n	8002e36 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002e32:	2303      	movs	r3, #3
 8002e34:	e109      	b.n	800304a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e36:	4b87      	ldr	r3, [pc, #540]	@ (8003054 <HAL_RCC_ClockConfig+0x270>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	683a      	ldr	r2, [r7, #0]
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d1ee      	bne.n	8002e22 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	2202      	movs	r2, #2
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	d009      	beq.n	8002e62 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e4e:	4b83      	ldr	r3, [pc, #524]	@ (800305c <HAL_RCC_ClockConfig+0x278>)
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	22f0      	movs	r2, #240	@ 0xf0
 8002e54:	4393      	bics	r3, r2
 8002e56:	0019      	movs	r1, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	689a      	ldr	r2, [r3, #8]
 8002e5c:	4b7f      	ldr	r3, [pc, #508]	@ (800305c <HAL_RCC_ClockConfig+0x278>)
 8002e5e:	430a      	orrs	r2, r1
 8002e60:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	2201      	movs	r2, #1
 8002e68:	4013      	ands	r3, r2
 8002e6a:	d100      	bne.n	8002e6e <HAL_RCC_ClockConfig+0x8a>
 8002e6c:	e089      	b.n	8002f82 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d107      	bne.n	8002e86 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002e76:	4b79      	ldr	r3, [pc, #484]	@ (800305c <HAL_RCC_ClockConfig+0x278>)
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	2380      	movs	r3, #128	@ 0x80
 8002e7c:	029b      	lsls	r3, r3, #10
 8002e7e:	4013      	ands	r3, r2
 8002e80:	d120      	bne.n	8002ec4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e0e1      	b.n	800304a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	2b03      	cmp	r3, #3
 8002e8c:	d107      	bne.n	8002e9e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e8e:	4b73      	ldr	r3, [pc, #460]	@ (800305c <HAL_RCC_ClockConfig+0x278>)
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	2380      	movs	r3, #128	@ 0x80
 8002e94:	049b      	lsls	r3, r3, #18
 8002e96:	4013      	ands	r3, r2
 8002e98:	d114      	bne.n	8002ec4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e0d5      	b.n	800304a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d106      	bne.n	8002eb4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ea6:	4b6d      	ldr	r3, [pc, #436]	@ (800305c <HAL_RCC_ClockConfig+0x278>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	2204      	movs	r2, #4
 8002eac:	4013      	ands	r3, r2
 8002eae:	d109      	bne.n	8002ec4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e0ca      	b.n	800304a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002eb4:	4b69      	ldr	r3, [pc, #420]	@ (800305c <HAL_RCC_ClockConfig+0x278>)
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	2380      	movs	r3, #128	@ 0x80
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	d101      	bne.n	8002ec4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e0c2      	b.n	800304a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ec4:	4b65      	ldr	r3, [pc, #404]	@ (800305c <HAL_RCC_ClockConfig+0x278>)
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	2203      	movs	r2, #3
 8002eca:	4393      	bics	r3, r2
 8002ecc:	0019      	movs	r1, r3
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	685a      	ldr	r2, [r3, #4]
 8002ed2:	4b62      	ldr	r3, [pc, #392]	@ (800305c <HAL_RCC_ClockConfig+0x278>)
 8002ed4:	430a      	orrs	r2, r1
 8002ed6:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ed8:	f7fe f914 	bl	8001104 <HAL_GetTick>
 8002edc:	0003      	movs	r3, r0
 8002ede:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	d111      	bne.n	8002f0c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ee8:	e009      	b.n	8002efe <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002eea:	f7fe f90b 	bl	8001104 <HAL_GetTick>
 8002eee:	0002      	movs	r2, r0
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	4a58      	ldr	r2, [pc, #352]	@ (8003058 <HAL_RCC_ClockConfig+0x274>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d901      	bls.n	8002efe <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8002efa:	2303      	movs	r3, #3
 8002efc:	e0a5      	b.n	800304a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002efe:	4b57      	ldr	r3, [pc, #348]	@ (800305c <HAL_RCC_ClockConfig+0x278>)
 8002f00:	68db      	ldr	r3, [r3, #12]
 8002f02:	220c      	movs	r2, #12
 8002f04:	4013      	ands	r3, r2
 8002f06:	2b08      	cmp	r3, #8
 8002f08:	d1ef      	bne.n	8002eea <HAL_RCC_ClockConfig+0x106>
 8002f0a:	e03a      	b.n	8002f82 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	2b03      	cmp	r3, #3
 8002f12:	d111      	bne.n	8002f38 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f14:	e009      	b.n	8002f2a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f16:	f7fe f8f5 	bl	8001104 <HAL_GetTick>
 8002f1a:	0002      	movs	r2, r0
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	1ad3      	subs	r3, r2, r3
 8002f20:	4a4d      	ldr	r2, [pc, #308]	@ (8003058 <HAL_RCC_ClockConfig+0x274>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d901      	bls.n	8002f2a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e08f      	b.n	800304a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f2a:	4b4c      	ldr	r3, [pc, #304]	@ (800305c <HAL_RCC_ClockConfig+0x278>)
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	220c      	movs	r2, #12
 8002f30:	4013      	ands	r3, r2
 8002f32:	2b0c      	cmp	r3, #12
 8002f34:	d1ef      	bne.n	8002f16 <HAL_RCC_ClockConfig+0x132>
 8002f36:	e024      	b.n	8002f82 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d11b      	bne.n	8002f78 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f40:	e009      	b.n	8002f56 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f42:	f7fe f8df 	bl	8001104 <HAL_GetTick>
 8002f46:	0002      	movs	r2, r0
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	4a42      	ldr	r2, [pc, #264]	@ (8003058 <HAL_RCC_ClockConfig+0x274>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d901      	bls.n	8002f56 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e079      	b.n	800304a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f56:	4b41      	ldr	r3, [pc, #260]	@ (800305c <HAL_RCC_ClockConfig+0x278>)
 8002f58:	68db      	ldr	r3, [r3, #12]
 8002f5a:	220c      	movs	r2, #12
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	2b04      	cmp	r3, #4
 8002f60:	d1ef      	bne.n	8002f42 <HAL_RCC_ClockConfig+0x15e>
 8002f62:	e00e      	b.n	8002f82 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f64:	f7fe f8ce 	bl	8001104 <HAL_GetTick>
 8002f68:	0002      	movs	r2, r0
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	4a3a      	ldr	r2, [pc, #232]	@ (8003058 <HAL_RCC_ClockConfig+0x274>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d901      	bls.n	8002f78 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002f74:	2303      	movs	r3, #3
 8002f76:	e068      	b.n	800304a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002f78:	4b38      	ldr	r3, [pc, #224]	@ (800305c <HAL_RCC_ClockConfig+0x278>)
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	220c      	movs	r2, #12
 8002f7e:	4013      	ands	r3, r2
 8002f80:	d1f0      	bne.n	8002f64 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f82:	4b34      	ldr	r3, [pc, #208]	@ (8003054 <HAL_RCC_ClockConfig+0x270>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	2201      	movs	r2, #1
 8002f88:	4013      	ands	r3, r2
 8002f8a:	683a      	ldr	r2, [r7, #0]
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d21e      	bcs.n	8002fce <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f90:	4b30      	ldr	r3, [pc, #192]	@ (8003054 <HAL_RCC_ClockConfig+0x270>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	2201      	movs	r2, #1
 8002f96:	4393      	bics	r3, r2
 8002f98:	0019      	movs	r1, r3
 8002f9a:	4b2e      	ldr	r3, [pc, #184]	@ (8003054 <HAL_RCC_ClockConfig+0x270>)
 8002f9c:	683a      	ldr	r2, [r7, #0]
 8002f9e:	430a      	orrs	r2, r1
 8002fa0:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002fa2:	f7fe f8af 	bl	8001104 <HAL_GetTick>
 8002fa6:	0003      	movs	r3, r0
 8002fa8:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002faa:	e009      	b.n	8002fc0 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fac:	f7fe f8aa 	bl	8001104 <HAL_GetTick>
 8002fb0:	0002      	movs	r2, r0
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	4a28      	ldr	r2, [pc, #160]	@ (8003058 <HAL_RCC_ClockConfig+0x274>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d901      	bls.n	8002fc0 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002fbc:	2303      	movs	r3, #3
 8002fbe:	e044      	b.n	800304a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fc0:	4b24      	ldr	r3, [pc, #144]	@ (8003054 <HAL_RCC_ClockConfig+0x270>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	683a      	ldr	r2, [r7, #0]
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d1ee      	bne.n	8002fac <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	2204      	movs	r2, #4
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	d009      	beq.n	8002fec <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fd8:	4b20      	ldr	r3, [pc, #128]	@ (800305c <HAL_RCC_ClockConfig+0x278>)
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	4a20      	ldr	r2, [pc, #128]	@ (8003060 <HAL_RCC_ClockConfig+0x27c>)
 8002fde:	4013      	ands	r3, r2
 8002fe0:	0019      	movs	r1, r3
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	68da      	ldr	r2, [r3, #12]
 8002fe6:	4b1d      	ldr	r3, [pc, #116]	@ (800305c <HAL_RCC_ClockConfig+0x278>)
 8002fe8:	430a      	orrs	r2, r1
 8002fea:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	2208      	movs	r2, #8
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	d00a      	beq.n	800300c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002ff6:	4b19      	ldr	r3, [pc, #100]	@ (800305c <HAL_RCC_ClockConfig+0x278>)
 8002ff8:	68db      	ldr	r3, [r3, #12]
 8002ffa:	4a1a      	ldr	r2, [pc, #104]	@ (8003064 <HAL_RCC_ClockConfig+0x280>)
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	0019      	movs	r1, r3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	691b      	ldr	r3, [r3, #16]
 8003004:	00da      	lsls	r2, r3, #3
 8003006:	4b15      	ldr	r3, [pc, #84]	@ (800305c <HAL_RCC_ClockConfig+0x278>)
 8003008:	430a      	orrs	r2, r1
 800300a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800300c:	f000 f832 	bl	8003074 <HAL_RCC_GetSysClockFreq>
 8003010:	0001      	movs	r1, r0
 8003012:	4b12      	ldr	r3, [pc, #72]	@ (800305c <HAL_RCC_ClockConfig+0x278>)
 8003014:	68db      	ldr	r3, [r3, #12]
 8003016:	091b      	lsrs	r3, r3, #4
 8003018:	220f      	movs	r2, #15
 800301a:	4013      	ands	r3, r2
 800301c:	4a12      	ldr	r2, [pc, #72]	@ (8003068 <HAL_RCC_ClockConfig+0x284>)
 800301e:	5cd3      	ldrb	r3, [r2, r3]
 8003020:	000a      	movs	r2, r1
 8003022:	40da      	lsrs	r2, r3
 8003024:	4b11      	ldr	r3, [pc, #68]	@ (800306c <HAL_RCC_ClockConfig+0x288>)
 8003026:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003028:	4b11      	ldr	r3, [pc, #68]	@ (8003070 <HAL_RCC_ClockConfig+0x28c>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	250b      	movs	r5, #11
 800302e:	197c      	adds	r4, r7, r5
 8003030:	0018      	movs	r0, r3
 8003032:	f7fe f821 	bl	8001078 <HAL_InitTick>
 8003036:	0003      	movs	r3, r0
 8003038:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800303a:	197b      	adds	r3, r7, r5
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d002      	beq.n	8003048 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8003042:	197b      	adds	r3, r7, r5
 8003044:	781b      	ldrb	r3, [r3, #0]
 8003046:	e000      	b.n	800304a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8003048:	2300      	movs	r3, #0
}
 800304a:	0018      	movs	r0, r3
 800304c:	46bd      	mov	sp, r7
 800304e:	b004      	add	sp, #16
 8003050:	bdb0      	pop	{r4, r5, r7, pc}
 8003052:	46c0      	nop			@ (mov r8, r8)
 8003054:	40022000 	.word	0x40022000
 8003058:	00001388 	.word	0x00001388
 800305c:	40021000 	.word	0x40021000
 8003060:	fffff8ff 	.word	0xfffff8ff
 8003064:	ffffc7ff 	.word	0xffffc7ff
 8003068:	08004428 	.word	0x08004428
 800306c:	2000000c 	.word	0x2000000c
 8003070:	20000010 	.word	0x20000010

08003074 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b086      	sub	sp, #24
 8003078:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800307a:	4b3c      	ldr	r3, [pc, #240]	@ (800316c <HAL_RCC_GetSysClockFreq+0xf8>)
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	220c      	movs	r2, #12
 8003084:	4013      	ands	r3, r2
 8003086:	2b0c      	cmp	r3, #12
 8003088:	d013      	beq.n	80030b2 <HAL_RCC_GetSysClockFreq+0x3e>
 800308a:	d85c      	bhi.n	8003146 <HAL_RCC_GetSysClockFreq+0xd2>
 800308c:	2b04      	cmp	r3, #4
 800308e:	d002      	beq.n	8003096 <HAL_RCC_GetSysClockFreq+0x22>
 8003090:	2b08      	cmp	r3, #8
 8003092:	d00b      	beq.n	80030ac <HAL_RCC_GetSysClockFreq+0x38>
 8003094:	e057      	b.n	8003146 <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003096:	4b35      	ldr	r3, [pc, #212]	@ (800316c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	2210      	movs	r2, #16
 800309c:	4013      	ands	r3, r2
 800309e:	d002      	beq.n	80030a6 <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80030a0:	4b33      	ldr	r3, [pc, #204]	@ (8003170 <HAL_RCC_GetSysClockFreq+0xfc>)
 80030a2:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80030a4:	e05d      	b.n	8003162 <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 80030a6:	4b33      	ldr	r3, [pc, #204]	@ (8003174 <HAL_RCC_GetSysClockFreq+0x100>)
 80030a8:	613b      	str	r3, [r7, #16]
      break;
 80030aa:	e05a      	b.n	8003162 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80030ac:	4b32      	ldr	r3, [pc, #200]	@ (8003178 <HAL_RCC_GetSysClockFreq+0x104>)
 80030ae:	613b      	str	r3, [r7, #16]
      break;
 80030b0:	e057      	b.n	8003162 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	0c9b      	lsrs	r3, r3, #18
 80030b6:	220f      	movs	r2, #15
 80030b8:	4013      	ands	r3, r2
 80030ba:	4a30      	ldr	r2, [pc, #192]	@ (800317c <HAL_RCC_GetSysClockFreq+0x108>)
 80030bc:	5cd3      	ldrb	r3, [r2, r3]
 80030be:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	0d9b      	lsrs	r3, r3, #22
 80030c4:	2203      	movs	r2, #3
 80030c6:	4013      	ands	r3, r2
 80030c8:	3301      	adds	r3, #1
 80030ca:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030cc:	4b27      	ldr	r3, [pc, #156]	@ (800316c <HAL_RCC_GetSysClockFreq+0xf8>)
 80030ce:	68da      	ldr	r2, [r3, #12]
 80030d0:	2380      	movs	r3, #128	@ 0x80
 80030d2:	025b      	lsls	r3, r3, #9
 80030d4:	4013      	ands	r3, r2
 80030d6:	d00f      	beq.n	80030f8 <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 80030d8:	68b9      	ldr	r1, [r7, #8]
 80030da:	000a      	movs	r2, r1
 80030dc:	0152      	lsls	r2, r2, #5
 80030de:	1a52      	subs	r2, r2, r1
 80030e0:	0193      	lsls	r3, r2, #6
 80030e2:	1a9b      	subs	r3, r3, r2
 80030e4:	00db      	lsls	r3, r3, #3
 80030e6:	185b      	adds	r3, r3, r1
 80030e8:	025b      	lsls	r3, r3, #9
 80030ea:	6879      	ldr	r1, [r7, #4]
 80030ec:	0018      	movs	r0, r3
 80030ee:	f7fd f815 	bl	800011c <__udivsi3>
 80030f2:	0003      	movs	r3, r0
 80030f4:	617b      	str	r3, [r7, #20]
 80030f6:	e023      	b.n	8003140 <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80030f8:	4b1c      	ldr	r3, [pc, #112]	@ (800316c <HAL_RCC_GetSysClockFreq+0xf8>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	2210      	movs	r2, #16
 80030fe:	4013      	ands	r3, r2
 8003100:	d00f      	beq.n	8003122 <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 8003102:	68b9      	ldr	r1, [r7, #8]
 8003104:	000a      	movs	r2, r1
 8003106:	0152      	lsls	r2, r2, #5
 8003108:	1a52      	subs	r2, r2, r1
 800310a:	0193      	lsls	r3, r2, #6
 800310c:	1a9b      	subs	r3, r3, r2
 800310e:	00db      	lsls	r3, r3, #3
 8003110:	185b      	adds	r3, r3, r1
 8003112:	021b      	lsls	r3, r3, #8
 8003114:	6879      	ldr	r1, [r7, #4]
 8003116:	0018      	movs	r0, r3
 8003118:	f7fd f800 	bl	800011c <__udivsi3>
 800311c:	0003      	movs	r3, r0
 800311e:	617b      	str	r3, [r7, #20]
 8003120:	e00e      	b.n	8003140 <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 8003122:	68b9      	ldr	r1, [r7, #8]
 8003124:	000a      	movs	r2, r1
 8003126:	0152      	lsls	r2, r2, #5
 8003128:	1a52      	subs	r2, r2, r1
 800312a:	0193      	lsls	r3, r2, #6
 800312c:	1a9b      	subs	r3, r3, r2
 800312e:	00db      	lsls	r3, r3, #3
 8003130:	185b      	adds	r3, r3, r1
 8003132:	029b      	lsls	r3, r3, #10
 8003134:	6879      	ldr	r1, [r7, #4]
 8003136:	0018      	movs	r0, r3
 8003138:	f7fc fff0 	bl	800011c <__udivsi3>
 800313c:	0003      	movs	r3, r0
 800313e:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	613b      	str	r3, [r7, #16]
      break;
 8003144:	e00d      	b.n	8003162 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003146:	4b09      	ldr	r3, [pc, #36]	@ (800316c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	0b5b      	lsrs	r3, r3, #13
 800314c:	2207      	movs	r2, #7
 800314e:	4013      	ands	r3, r2
 8003150:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	3301      	adds	r3, #1
 8003156:	2280      	movs	r2, #128	@ 0x80
 8003158:	0212      	lsls	r2, r2, #8
 800315a:	409a      	lsls	r2, r3
 800315c:	0013      	movs	r3, r2
 800315e:	613b      	str	r3, [r7, #16]
      break;
 8003160:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003162:	693b      	ldr	r3, [r7, #16]
}
 8003164:	0018      	movs	r0, r3
 8003166:	46bd      	mov	sp, r7
 8003168:	b006      	add	sp, #24
 800316a:	bd80      	pop	{r7, pc}
 800316c:	40021000 	.word	0x40021000
 8003170:	003d0900 	.word	0x003d0900
 8003174:	00f42400 	.word	0x00f42400
 8003178:	007a1200 	.word	0x007a1200
 800317c:	08004438 	.word	0x08004438

08003180 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b086      	sub	sp, #24
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8003188:	2017      	movs	r0, #23
 800318a:	183b      	adds	r3, r7, r0
 800318c:	2200      	movs	r2, #0
 800318e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	2220      	movs	r2, #32
 8003196:	4013      	ands	r3, r2
 8003198:	d100      	bne.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x1c>
 800319a:	e0c7      	b.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800319c:	4b8b      	ldr	r3, [pc, #556]	@ (80033cc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800319e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80031a0:	2380      	movs	r3, #128	@ 0x80
 80031a2:	055b      	lsls	r3, r3, #21
 80031a4:	4013      	ands	r3, r2
 80031a6:	d109      	bne.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031a8:	4b88      	ldr	r3, [pc, #544]	@ (80033cc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80031aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80031ac:	4b87      	ldr	r3, [pc, #540]	@ (80033cc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80031ae:	2180      	movs	r1, #128	@ 0x80
 80031b0:	0549      	lsls	r1, r1, #21
 80031b2:	430a      	orrs	r2, r1
 80031b4:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 80031b6:	183b      	adds	r3, r7, r0
 80031b8:	2201      	movs	r2, #1
 80031ba:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031bc:	4b84      	ldr	r3, [pc, #528]	@ (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	2380      	movs	r3, #128	@ 0x80
 80031c2:	005b      	lsls	r3, r3, #1
 80031c4:	4013      	ands	r3, r2
 80031c6:	d11a      	bne.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031c8:	4b81      	ldr	r3, [pc, #516]	@ (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	4b80      	ldr	r3, [pc, #512]	@ (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80031ce:	2180      	movs	r1, #128	@ 0x80
 80031d0:	0049      	lsls	r1, r1, #1
 80031d2:	430a      	orrs	r2, r1
 80031d4:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031d6:	f7fd ff95 	bl	8001104 <HAL_GetTick>
 80031da:	0003      	movs	r3, r0
 80031dc:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031de:	e008      	b.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031e0:	f7fd ff90 	bl	8001104 <HAL_GetTick>
 80031e4:	0002      	movs	r2, r0
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	2b64      	cmp	r3, #100	@ 0x64
 80031ec:	d901      	bls.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	e0e8      	b.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x244>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031f2:	4b77      	ldr	r3, [pc, #476]	@ (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	2380      	movs	r3, #128	@ 0x80
 80031f8:	005b      	lsls	r3, r3, #1
 80031fa:	4013      	ands	r3, r2
 80031fc:	d0f0      	beq.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80031fe:	4b73      	ldr	r3, [pc, #460]	@ (80033cc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	23c0      	movs	r3, #192	@ 0xc0
 8003204:	039b      	lsls	r3, r3, #14
 8003206:	4013      	ands	r3, r2
 8003208:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	685a      	ldr	r2, [r3, #4]
 800320e:	23c0      	movs	r3, #192	@ 0xc0
 8003210:	039b      	lsls	r3, r3, #14
 8003212:	4013      	ands	r3, r2
 8003214:	68fa      	ldr	r2, [r7, #12]
 8003216:	429a      	cmp	r2, r3
 8003218:	d013      	beq.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685a      	ldr	r2, [r3, #4]
 800321e:	23c0      	movs	r3, #192	@ 0xc0
 8003220:	029b      	lsls	r3, r3, #10
 8003222:	401a      	ands	r2, r3
 8003224:	23c0      	movs	r3, #192	@ 0xc0
 8003226:	029b      	lsls	r3, r3, #10
 8003228:	429a      	cmp	r2, r3
 800322a:	d10a      	bne.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800322c:	4b67      	ldr	r3, [pc, #412]	@ (80033cc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	2380      	movs	r3, #128	@ 0x80
 8003232:	029b      	lsls	r3, r3, #10
 8003234:	401a      	ands	r2, r3
 8003236:	2380      	movs	r3, #128	@ 0x80
 8003238:	029b      	lsls	r3, r3, #10
 800323a:	429a      	cmp	r2, r3
 800323c:	d101      	bne.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e0c0      	b.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x244>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8003242:	4b62      	ldr	r3, [pc, #392]	@ (80033cc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003244:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003246:	23c0      	movs	r3, #192	@ 0xc0
 8003248:	029b      	lsls	r3, r3, #10
 800324a:	4013      	ands	r3, r2
 800324c:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d03b      	beq.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	685a      	ldr	r2, [r3, #4]
 8003258:	23c0      	movs	r3, #192	@ 0xc0
 800325a:	029b      	lsls	r3, r3, #10
 800325c:	4013      	ands	r3, r2
 800325e:	68fa      	ldr	r2, [r7, #12]
 8003260:	429a      	cmp	r2, r3
 8003262:	d033      	beq.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	2220      	movs	r2, #32
 800326a:	4013      	ands	r3, r2
 800326c:	d02e      	beq.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800326e:	4b57      	ldr	r3, [pc, #348]	@ (80033cc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003270:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003272:	4a58      	ldr	r2, [pc, #352]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003274:	4013      	ands	r3, r2
 8003276:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003278:	4b54      	ldr	r3, [pc, #336]	@ (80033cc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800327a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800327c:	4b53      	ldr	r3, [pc, #332]	@ (80033cc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800327e:	2180      	movs	r1, #128	@ 0x80
 8003280:	0309      	lsls	r1, r1, #12
 8003282:	430a      	orrs	r2, r1
 8003284:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003286:	4b51      	ldr	r3, [pc, #324]	@ (80033cc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003288:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800328a:	4b50      	ldr	r3, [pc, #320]	@ (80033cc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800328c:	4952      	ldr	r1, [pc, #328]	@ (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800328e:	400a      	ands	r2, r1
 8003290:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8003292:	4b4e      	ldr	r3, [pc, #312]	@ (80033cc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003294:	68fa      	ldr	r2, [r7, #12]
 8003296:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8003298:	68fa      	ldr	r2, [r7, #12]
 800329a:	2380      	movs	r3, #128	@ 0x80
 800329c:	005b      	lsls	r3, r3, #1
 800329e:	4013      	ands	r3, r2
 80032a0:	d014      	beq.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032a2:	f7fd ff2f 	bl	8001104 <HAL_GetTick>
 80032a6:	0003      	movs	r3, r0
 80032a8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80032aa:	e009      	b.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032ac:	f7fd ff2a 	bl	8001104 <HAL_GetTick>
 80032b0:	0002      	movs	r2, r0
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	4a49      	ldr	r2, [pc, #292]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d901      	bls.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 80032bc:	2303      	movs	r3, #3
 80032be:	e081      	b.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x244>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80032c0:	4b42      	ldr	r3, [pc, #264]	@ (80033cc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80032c2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80032c4:	2380      	movs	r3, #128	@ 0x80
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	4013      	ands	r3, r2
 80032ca:	d0ef      	beq.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	2220      	movs	r2, #32
 80032d2:	4013      	ands	r3, r2
 80032d4:	d01f      	beq.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	685a      	ldr	r2, [r3, #4]
 80032da:	23c0      	movs	r3, #192	@ 0xc0
 80032dc:	029b      	lsls	r3, r3, #10
 80032de:	401a      	ands	r2, r3
 80032e0:	23c0      	movs	r3, #192	@ 0xc0
 80032e2:	029b      	lsls	r3, r3, #10
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d10c      	bne.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x182>
 80032e8:	4b38      	ldr	r3, [pc, #224]	@ (80033cc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a3c      	ldr	r2, [pc, #240]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032ee:	4013      	ands	r3, r2
 80032f0:	0019      	movs	r1, r3
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	685a      	ldr	r2, [r3, #4]
 80032f6:	23c0      	movs	r3, #192	@ 0xc0
 80032f8:	039b      	lsls	r3, r3, #14
 80032fa:	401a      	ands	r2, r3
 80032fc:	4b33      	ldr	r3, [pc, #204]	@ (80033cc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80032fe:	430a      	orrs	r2, r1
 8003300:	601a      	str	r2, [r3, #0]
 8003302:	4b32      	ldr	r3, [pc, #200]	@ (80033cc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003304:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	685a      	ldr	r2, [r3, #4]
 800330a:	23c0      	movs	r3, #192	@ 0xc0
 800330c:	029b      	lsls	r3, r3, #10
 800330e:	401a      	ands	r2, r3
 8003310:	4b2e      	ldr	r3, [pc, #184]	@ (80033cc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003312:	430a      	orrs	r2, r1
 8003314:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003316:	2317      	movs	r3, #23
 8003318:	18fb      	adds	r3, r7, r3
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	2b01      	cmp	r3, #1
 800331e:	d105      	bne.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003320:	4b2a      	ldr	r3, [pc, #168]	@ (80033cc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003322:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003324:	4b29      	ldr	r3, [pc, #164]	@ (80033cc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003326:	492f      	ldr	r1, [pc, #188]	@ (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003328:	400a      	ands	r2, r1
 800332a:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	2201      	movs	r2, #1
 8003332:	4013      	ands	r3, r2
 8003334:	d009      	beq.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003336:	4b25      	ldr	r3, [pc, #148]	@ (80033cc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003338:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800333a:	2203      	movs	r2, #3
 800333c:	4393      	bics	r3, r2
 800333e:	0019      	movs	r1, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	689a      	ldr	r2, [r3, #8]
 8003344:	4b21      	ldr	r3, [pc, #132]	@ (80033cc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003346:	430a      	orrs	r2, r1
 8003348:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	2202      	movs	r2, #2
 8003350:	4013      	ands	r3, r2
 8003352:	d009      	beq.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003354:	4b1d      	ldr	r3, [pc, #116]	@ (80033cc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003356:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003358:	220c      	movs	r2, #12
 800335a:	4393      	bics	r3, r2
 800335c:	0019      	movs	r1, r3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	68da      	ldr	r2, [r3, #12]
 8003362:	4b1a      	ldr	r3, [pc, #104]	@ (80033cc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003364:	430a      	orrs	r2, r1
 8003366:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	2204      	movs	r2, #4
 800336e:	4013      	ands	r3, r2
 8003370:	d009      	beq.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003372:	4b16      	ldr	r3, [pc, #88]	@ (80033cc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003374:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003376:	4a1c      	ldr	r2, [pc, #112]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003378:	4013      	ands	r3, r2
 800337a:	0019      	movs	r1, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	691a      	ldr	r2, [r3, #16]
 8003380:	4b12      	ldr	r3, [pc, #72]	@ (80033cc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003382:	430a      	orrs	r2, r1
 8003384:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	2208      	movs	r2, #8
 800338c:	4013      	ands	r3, r2
 800338e:	d009      	beq.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003390:	4b0e      	ldr	r3, [pc, #56]	@ (80033cc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003392:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003394:	4a15      	ldr	r2, [pc, #84]	@ (80033ec <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003396:	4013      	ands	r3, r2
 8003398:	0019      	movs	r1, r3
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	695a      	ldr	r2, [r3, #20]
 800339e:	4b0b      	ldr	r3, [pc, #44]	@ (80033cc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80033a0:	430a      	orrs	r2, r1
 80033a2:	64da      	str	r2, [r3, #76]	@ 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	2280      	movs	r2, #128	@ 0x80
 80033aa:	4013      	ands	r3, r2
 80033ac:	d009      	beq.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x242>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80033ae:	4b07      	ldr	r3, [pc, #28]	@ (80033cc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80033b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033b2:	4a0f      	ldr	r2, [pc, #60]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 80033b4:	4013      	ands	r3, r2
 80033b6:	0019      	movs	r1, r3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	699a      	ldr	r2, [r3, #24]
 80033bc:	4b03      	ldr	r3, [pc, #12]	@ (80033cc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80033be:	430a      	orrs	r2, r1
 80033c0:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80033c2:	2300      	movs	r3, #0
}
 80033c4:	0018      	movs	r0, r3
 80033c6:	46bd      	mov	sp, r7
 80033c8:	b006      	add	sp, #24
 80033ca:	bd80      	pop	{r7, pc}
 80033cc:	40021000 	.word	0x40021000
 80033d0:	40007000 	.word	0x40007000
 80033d4:	fffcffff 	.word	0xfffcffff
 80033d8:	fff7ffff 	.word	0xfff7ffff
 80033dc:	00001388 	.word	0x00001388
 80033e0:	ffcfffff 	.word	0xffcfffff
 80033e4:	efffffff 	.word	0xefffffff
 80033e8:	fffff3ff 	.word	0xfffff3ff
 80033ec:	ffffcfff 	.word	0xffffcfff
 80033f0:	fff3ffff 	.word	0xfff3ffff

080033f4 <std>:
 80033f4:	2300      	movs	r3, #0
 80033f6:	b510      	push	{r4, lr}
 80033f8:	0004      	movs	r4, r0
 80033fa:	6003      	str	r3, [r0, #0]
 80033fc:	6043      	str	r3, [r0, #4]
 80033fe:	6083      	str	r3, [r0, #8]
 8003400:	8181      	strh	r1, [r0, #12]
 8003402:	6643      	str	r3, [r0, #100]	@ 0x64
 8003404:	81c2      	strh	r2, [r0, #14]
 8003406:	6103      	str	r3, [r0, #16]
 8003408:	6143      	str	r3, [r0, #20]
 800340a:	6183      	str	r3, [r0, #24]
 800340c:	0019      	movs	r1, r3
 800340e:	2208      	movs	r2, #8
 8003410:	305c      	adds	r0, #92	@ 0x5c
 8003412:	f000 f90f 	bl	8003634 <memset>
 8003416:	4b0b      	ldr	r3, [pc, #44]	@ (8003444 <std+0x50>)
 8003418:	6224      	str	r4, [r4, #32]
 800341a:	6263      	str	r3, [r4, #36]	@ 0x24
 800341c:	4b0a      	ldr	r3, [pc, #40]	@ (8003448 <std+0x54>)
 800341e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003420:	4b0a      	ldr	r3, [pc, #40]	@ (800344c <std+0x58>)
 8003422:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003424:	4b0a      	ldr	r3, [pc, #40]	@ (8003450 <std+0x5c>)
 8003426:	6323      	str	r3, [r4, #48]	@ 0x30
 8003428:	4b0a      	ldr	r3, [pc, #40]	@ (8003454 <std+0x60>)
 800342a:	429c      	cmp	r4, r3
 800342c:	d005      	beq.n	800343a <std+0x46>
 800342e:	4b0a      	ldr	r3, [pc, #40]	@ (8003458 <std+0x64>)
 8003430:	429c      	cmp	r4, r3
 8003432:	d002      	beq.n	800343a <std+0x46>
 8003434:	4b09      	ldr	r3, [pc, #36]	@ (800345c <std+0x68>)
 8003436:	429c      	cmp	r4, r3
 8003438:	d103      	bne.n	8003442 <std+0x4e>
 800343a:	0020      	movs	r0, r4
 800343c:	3058      	adds	r0, #88	@ 0x58
 800343e:	f000 f979 	bl	8003734 <__retarget_lock_init_recursive>
 8003442:	bd10      	pop	{r4, pc}
 8003444:	0800359d 	.word	0x0800359d
 8003448:	080035c5 	.word	0x080035c5
 800344c:	080035fd 	.word	0x080035fd
 8003450:	08003629 	.word	0x08003629
 8003454:	20000378 	.word	0x20000378
 8003458:	200003e0 	.word	0x200003e0
 800345c:	20000448 	.word	0x20000448

08003460 <stdio_exit_handler>:
 8003460:	b510      	push	{r4, lr}
 8003462:	4a03      	ldr	r2, [pc, #12]	@ (8003470 <stdio_exit_handler+0x10>)
 8003464:	4903      	ldr	r1, [pc, #12]	@ (8003474 <stdio_exit_handler+0x14>)
 8003466:	4804      	ldr	r0, [pc, #16]	@ (8003478 <stdio_exit_handler+0x18>)
 8003468:	f000 f86c 	bl	8003544 <_fwalk_sglue>
 800346c:	bd10      	pop	{r4, pc}
 800346e:	46c0      	nop			@ (mov r8, r8)
 8003470:	20000018 	.word	0x20000018
 8003474:	08003fc1 	.word	0x08003fc1
 8003478:	20000028 	.word	0x20000028

0800347c <cleanup_stdio>:
 800347c:	6841      	ldr	r1, [r0, #4]
 800347e:	4b0b      	ldr	r3, [pc, #44]	@ (80034ac <cleanup_stdio+0x30>)
 8003480:	b510      	push	{r4, lr}
 8003482:	0004      	movs	r4, r0
 8003484:	4299      	cmp	r1, r3
 8003486:	d001      	beq.n	800348c <cleanup_stdio+0x10>
 8003488:	f000 fd9a 	bl	8003fc0 <_fflush_r>
 800348c:	68a1      	ldr	r1, [r4, #8]
 800348e:	4b08      	ldr	r3, [pc, #32]	@ (80034b0 <cleanup_stdio+0x34>)
 8003490:	4299      	cmp	r1, r3
 8003492:	d002      	beq.n	800349a <cleanup_stdio+0x1e>
 8003494:	0020      	movs	r0, r4
 8003496:	f000 fd93 	bl	8003fc0 <_fflush_r>
 800349a:	68e1      	ldr	r1, [r4, #12]
 800349c:	4b05      	ldr	r3, [pc, #20]	@ (80034b4 <cleanup_stdio+0x38>)
 800349e:	4299      	cmp	r1, r3
 80034a0:	d002      	beq.n	80034a8 <cleanup_stdio+0x2c>
 80034a2:	0020      	movs	r0, r4
 80034a4:	f000 fd8c 	bl	8003fc0 <_fflush_r>
 80034a8:	bd10      	pop	{r4, pc}
 80034aa:	46c0      	nop			@ (mov r8, r8)
 80034ac:	20000378 	.word	0x20000378
 80034b0:	200003e0 	.word	0x200003e0
 80034b4:	20000448 	.word	0x20000448

080034b8 <global_stdio_init.part.0>:
 80034b8:	b510      	push	{r4, lr}
 80034ba:	4b09      	ldr	r3, [pc, #36]	@ (80034e0 <global_stdio_init.part.0+0x28>)
 80034bc:	4a09      	ldr	r2, [pc, #36]	@ (80034e4 <global_stdio_init.part.0+0x2c>)
 80034be:	2104      	movs	r1, #4
 80034c0:	601a      	str	r2, [r3, #0]
 80034c2:	4809      	ldr	r0, [pc, #36]	@ (80034e8 <global_stdio_init.part.0+0x30>)
 80034c4:	2200      	movs	r2, #0
 80034c6:	f7ff ff95 	bl	80033f4 <std>
 80034ca:	2201      	movs	r2, #1
 80034cc:	2109      	movs	r1, #9
 80034ce:	4807      	ldr	r0, [pc, #28]	@ (80034ec <global_stdio_init.part.0+0x34>)
 80034d0:	f7ff ff90 	bl	80033f4 <std>
 80034d4:	2202      	movs	r2, #2
 80034d6:	2112      	movs	r1, #18
 80034d8:	4805      	ldr	r0, [pc, #20]	@ (80034f0 <global_stdio_init.part.0+0x38>)
 80034da:	f7ff ff8b 	bl	80033f4 <std>
 80034de:	bd10      	pop	{r4, pc}
 80034e0:	200004b0 	.word	0x200004b0
 80034e4:	08003461 	.word	0x08003461
 80034e8:	20000378 	.word	0x20000378
 80034ec:	200003e0 	.word	0x200003e0
 80034f0:	20000448 	.word	0x20000448

080034f4 <__sfp_lock_acquire>:
 80034f4:	b510      	push	{r4, lr}
 80034f6:	4802      	ldr	r0, [pc, #8]	@ (8003500 <__sfp_lock_acquire+0xc>)
 80034f8:	f000 f91d 	bl	8003736 <__retarget_lock_acquire_recursive>
 80034fc:	bd10      	pop	{r4, pc}
 80034fe:	46c0      	nop			@ (mov r8, r8)
 8003500:	200004b9 	.word	0x200004b9

08003504 <__sfp_lock_release>:
 8003504:	b510      	push	{r4, lr}
 8003506:	4802      	ldr	r0, [pc, #8]	@ (8003510 <__sfp_lock_release+0xc>)
 8003508:	f000 f916 	bl	8003738 <__retarget_lock_release_recursive>
 800350c:	bd10      	pop	{r4, pc}
 800350e:	46c0      	nop			@ (mov r8, r8)
 8003510:	200004b9 	.word	0x200004b9

08003514 <__sinit>:
 8003514:	b510      	push	{r4, lr}
 8003516:	0004      	movs	r4, r0
 8003518:	f7ff ffec 	bl	80034f4 <__sfp_lock_acquire>
 800351c:	6a23      	ldr	r3, [r4, #32]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d002      	beq.n	8003528 <__sinit+0x14>
 8003522:	f7ff ffef 	bl	8003504 <__sfp_lock_release>
 8003526:	bd10      	pop	{r4, pc}
 8003528:	4b04      	ldr	r3, [pc, #16]	@ (800353c <__sinit+0x28>)
 800352a:	6223      	str	r3, [r4, #32]
 800352c:	4b04      	ldr	r3, [pc, #16]	@ (8003540 <__sinit+0x2c>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d1f6      	bne.n	8003522 <__sinit+0xe>
 8003534:	f7ff ffc0 	bl	80034b8 <global_stdio_init.part.0>
 8003538:	e7f3      	b.n	8003522 <__sinit+0xe>
 800353a:	46c0      	nop			@ (mov r8, r8)
 800353c:	0800347d 	.word	0x0800347d
 8003540:	200004b0 	.word	0x200004b0

08003544 <_fwalk_sglue>:
 8003544:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003546:	0014      	movs	r4, r2
 8003548:	2600      	movs	r6, #0
 800354a:	9000      	str	r0, [sp, #0]
 800354c:	9101      	str	r1, [sp, #4]
 800354e:	68a5      	ldr	r5, [r4, #8]
 8003550:	6867      	ldr	r7, [r4, #4]
 8003552:	3f01      	subs	r7, #1
 8003554:	d504      	bpl.n	8003560 <_fwalk_sglue+0x1c>
 8003556:	6824      	ldr	r4, [r4, #0]
 8003558:	2c00      	cmp	r4, #0
 800355a:	d1f8      	bne.n	800354e <_fwalk_sglue+0xa>
 800355c:	0030      	movs	r0, r6
 800355e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003560:	89ab      	ldrh	r3, [r5, #12]
 8003562:	2b01      	cmp	r3, #1
 8003564:	d908      	bls.n	8003578 <_fwalk_sglue+0x34>
 8003566:	220e      	movs	r2, #14
 8003568:	5eab      	ldrsh	r3, [r5, r2]
 800356a:	3301      	adds	r3, #1
 800356c:	d004      	beq.n	8003578 <_fwalk_sglue+0x34>
 800356e:	0029      	movs	r1, r5
 8003570:	9800      	ldr	r0, [sp, #0]
 8003572:	9b01      	ldr	r3, [sp, #4]
 8003574:	4798      	blx	r3
 8003576:	4306      	orrs	r6, r0
 8003578:	3568      	adds	r5, #104	@ 0x68
 800357a:	e7ea      	b.n	8003552 <_fwalk_sglue+0xe>

0800357c <iprintf>:
 800357c:	b40f      	push	{r0, r1, r2, r3}
 800357e:	b507      	push	{r0, r1, r2, lr}
 8003580:	4905      	ldr	r1, [pc, #20]	@ (8003598 <iprintf+0x1c>)
 8003582:	ab04      	add	r3, sp, #16
 8003584:	6808      	ldr	r0, [r1, #0]
 8003586:	cb04      	ldmia	r3!, {r2}
 8003588:	6881      	ldr	r1, [r0, #8]
 800358a:	9301      	str	r3, [sp, #4]
 800358c:	f000 f9fa 	bl	8003984 <_vfiprintf_r>
 8003590:	b003      	add	sp, #12
 8003592:	bc08      	pop	{r3}
 8003594:	b004      	add	sp, #16
 8003596:	4718      	bx	r3
 8003598:	20000024 	.word	0x20000024

0800359c <__sread>:
 800359c:	b570      	push	{r4, r5, r6, lr}
 800359e:	000c      	movs	r4, r1
 80035a0:	250e      	movs	r5, #14
 80035a2:	5f49      	ldrsh	r1, [r1, r5]
 80035a4:	f000 f874 	bl	8003690 <_read_r>
 80035a8:	2800      	cmp	r0, #0
 80035aa:	db03      	blt.n	80035b4 <__sread+0x18>
 80035ac:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80035ae:	181b      	adds	r3, r3, r0
 80035b0:	6563      	str	r3, [r4, #84]	@ 0x54
 80035b2:	bd70      	pop	{r4, r5, r6, pc}
 80035b4:	89a3      	ldrh	r3, [r4, #12]
 80035b6:	4a02      	ldr	r2, [pc, #8]	@ (80035c0 <__sread+0x24>)
 80035b8:	4013      	ands	r3, r2
 80035ba:	81a3      	strh	r3, [r4, #12]
 80035bc:	e7f9      	b.n	80035b2 <__sread+0x16>
 80035be:	46c0      	nop			@ (mov r8, r8)
 80035c0:	ffffefff 	.word	0xffffefff

080035c4 <__swrite>:
 80035c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035c6:	001f      	movs	r7, r3
 80035c8:	898b      	ldrh	r3, [r1, #12]
 80035ca:	0005      	movs	r5, r0
 80035cc:	000c      	movs	r4, r1
 80035ce:	0016      	movs	r6, r2
 80035d0:	05db      	lsls	r3, r3, #23
 80035d2:	d505      	bpl.n	80035e0 <__swrite+0x1c>
 80035d4:	230e      	movs	r3, #14
 80035d6:	5ec9      	ldrsh	r1, [r1, r3]
 80035d8:	2200      	movs	r2, #0
 80035da:	2302      	movs	r3, #2
 80035dc:	f000 f844 	bl	8003668 <_lseek_r>
 80035e0:	89a3      	ldrh	r3, [r4, #12]
 80035e2:	4a05      	ldr	r2, [pc, #20]	@ (80035f8 <__swrite+0x34>)
 80035e4:	0028      	movs	r0, r5
 80035e6:	4013      	ands	r3, r2
 80035e8:	81a3      	strh	r3, [r4, #12]
 80035ea:	0032      	movs	r2, r6
 80035ec:	230e      	movs	r3, #14
 80035ee:	5ee1      	ldrsh	r1, [r4, r3]
 80035f0:	003b      	movs	r3, r7
 80035f2:	f000 f861 	bl	80036b8 <_write_r>
 80035f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80035f8:	ffffefff 	.word	0xffffefff

080035fc <__sseek>:
 80035fc:	b570      	push	{r4, r5, r6, lr}
 80035fe:	000c      	movs	r4, r1
 8003600:	250e      	movs	r5, #14
 8003602:	5f49      	ldrsh	r1, [r1, r5]
 8003604:	f000 f830 	bl	8003668 <_lseek_r>
 8003608:	89a3      	ldrh	r3, [r4, #12]
 800360a:	1c42      	adds	r2, r0, #1
 800360c:	d103      	bne.n	8003616 <__sseek+0x1a>
 800360e:	4a05      	ldr	r2, [pc, #20]	@ (8003624 <__sseek+0x28>)
 8003610:	4013      	ands	r3, r2
 8003612:	81a3      	strh	r3, [r4, #12]
 8003614:	bd70      	pop	{r4, r5, r6, pc}
 8003616:	2280      	movs	r2, #128	@ 0x80
 8003618:	0152      	lsls	r2, r2, #5
 800361a:	4313      	orrs	r3, r2
 800361c:	81a3      	strh	r3, [r4, #12]
 800361e:	6560      	str	r0, [r4, #84]	@ 0x54
 8003620:	e7f8      	b.n	8003614 <__sseek+0x18>
 8003622:	46c0      	nop			@ (mov r8, r8)
 8003624:	ffffefff 	.word	0xffffefff

08003628 <__sclose>:
 8003628:	b510      	push	{r4, lr}
 800362a:	230e      	movs	r3, #14
 800362c:	5ec9      	ldrsh	r1, [r1, r3]
 800362e:	f000 f809 	bl	8003644 <_close_r>
 8003632:	bd10      	pop	{r4, pc}

08003634 <memset>:
 8003634:	0003      	movs	r3, r0
 8003636:	1882      	adds	r2, r0, r2
 8003638:	4293      	cmp	r3, r2
 800363a:	d100      	bne.n	800363e <memset+0xa>
 800363c:	4770      	bx	lr
 800363e:	7019      	strb	r1, [r3, #0]
 8003640:	3301      	adds	r3, #1
 8003642:	e7f9      	b.n	8003638 <memset+0x4>

08003644 <_close_r>:
 8003644:	2300      	movs	r3, #0
 8003646:	b570      	push	{r4, r5, r6, lr}
 8003648:	4d06      	ldr	r5, [pc, #24]	@ (8003664 <_close_r+0x20>)
 800364a:	0004      	movs	r4, r0
 800364c:	0008      	movs	r0, r1
 800364e:	602b      	str	r3, [r5, #0]
 8003650:	f7fd f983 	bl	800095a <_close>
 8003654:	1c43      	adds	r3, r0, #1
 8003656:	d103      	bne.n	8003660 <_close_r+0x1c>
 8003658:	682b      	ldr	r3, [r5, #0]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d000      	beq.n	8003660 <_close_r+0x1c>
 800365e:	6023      	str	r3, [r4, #0]
 8003660:	bd70      	pop	{r4, r5, r6, pc}
 8003662:	46c0      	nop			@ (mov r8, r8)
 8003664:	200004b4 	.word	0x200004b4

08003668 <_lseek_r>:
 8003668:	b570      	push	{r4, r5, r6, lr}
 800366a:	0004      	movs	r4, r0
 800366c:	0008      	movs	r0, r1
 800366e:	0011      	movs	r1, r2
 8003670:	001a      	movs	r2, r3
 8003672:	2300      	movs	r3, #0
 8003674:	4d05      	ldr	r5, [pc, #20]	@ (800368c <_lseek_r+0x24>)
 8003676:	602b      	str	r3, [r5, #0]
 8003678:	f7fd f990 	bl	800099c <_lseek>
 800367c:	1c43      	adds	r3, r0, #1
 800367e:	d103      	bne.n	8003688 <_lseek_r+0x20>
 8003680:	682b      	ldr	r3, [r5, #0]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d000      	beq.n	8003688 <_lseek_r+0x20>
 8003686:	6023      	str	r3, [r4, #0]
 8003688:	bd70      	pop	{r4, r5, r6, pc}
 800368a:	46c0      	nop			@ (mov r8, r8)
 800368c:	200004b4 	.word	0x200004b4

08003690 <_read_r>:
 8003690:	b570      	push	{r4, r5, r6, lr}
 8003692:	0004      	movs	r4, r0
 8003694:	0008      	movs	r0, r1
 8003696:	0011      	movs	r1, r2
 8003698:	001a      	movs	r2, r3
 800369a:	2300      	movs	r3, #0
 800369c:	4d05      	ldr	r5, [pc, #20]	@ (80036b4 <_read_r+0x24>)
 800369e:	602b      	str	r3, [r5, #0]
 80036a0:	f7fd f922 	bl	80008e8 <_read>
 80036a4:	1c43      	adds	r3, r0, #1
 80036a6:	d103      	bne.n	80036b0 <_read_r+0x20>
 80036a8:	682b      	ldr	r3, [r5, #0]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d000      	beq.n	80036b0 <_read_r+0x20>
 80036ae:	6023      	str	r3, [r4, #0]
 80036b0:	bd70      	pop	{r4, r5, r6, pc}
 80036b2:	46c0      	nop			@ (mov r8, r8)
 80036b4:	200004b4 	.word	0x200004b4

080036b8 <_write_r>:
 80036b8:	b570      	push	{r4, r5, r6, lr}
 80036ba:	0004      	movs	r4, r0
 80036bc:	0008      	movs	r0, r1
 80036be:	0011      	movs	r1, r2
 80036c0:	001a      	movs	r2, r3
 80036c2:	2300      	movs	r3, #0
 80036c4:	4d05      	ldr	r5, [pc, #20]	@ (80036dc <_write_r+0x24>)
 80036c6:	602b      	str	r3, [r5, #0]
 80036c8:	f7fd f92b 	bl	8000922 <_write>
 80036cc:	1c43      	adds	r3, r0, #1
 80036ce:	d103      	bne.n	80036d8 <_write_r+0x20>
 80036d0:	682b      	ldr	r3, [r5, #0]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d000      	beq.n	80036d8 <_write_r+0x20>
 80036d6:	6023      	str	r3, [r4, #0]
 80036d8:	bd70      	pop	{r4, r5, r6, pc}
 80036da:	46c0      	nop			@ (mov r8, r8)
 80036dc:	200004b4 	.word	0x200004b4

080036e0 <__errno>:
 80036e0:	4b01      	ldr	r3, [pc, #4]	@ (80036e8 <__errno+0x8>)
 80036e2:	6818      	ldr	r0, [r3, #0]
 80036e4:	4770      	bx	lr
 80036e6:	46c0      	nop			@ (mov r8, r8)
 80036e8:	20000024 	.word	0x20000024

080036ec <__libc_init_array>:
 80036ec:	b570      	push	{r4, r5, r6, lr}
 80036ee:	2600      	movs	r6, #0
 80036f0:	4c0c      	ldr	r4, [pc, #48]	@ (8003724 <__libc_init_array+0x38>)
 80036f2:	4d0d      	ldr	r5, [pc, #52]	@ (8003728 <__libc_init_array+0x3c>)
 80036f4:	1b64      	subs	r4, r4, r5
 80036f6:	10a4      	asrs	r4, r4, #2
 80036f8:	42a6      	cmp	r6, r4
 80036fa:	d109      	bne.n	8003710 <__libc_init_array+0x24>
 80036fc:	2600      	movs	r6, #0
 80036fe:	f000 fdd9 	bl	80042b4 <_init>
 8003702:	4c0a      	ldr	r4, [pc, #40]	@ (800372c <__libc_init_array+0x40>)
 8003704:	4d0a      	ldr	r5, [pc, #40]	@ (8003730 <__libc_init_array+0x44>)
 8003706:	1b64      	subs	r4, r4, r5
 8003708:	10a4      	asrs	r4, r4, #2
 800370a:	42a6      	cmp	r6, r4
 800370c:	d105      	bne.n	800371a <__libc_init_array+0x2e>
 800370e:	bd70      	pop	{r4, r5, r6, pc}
 8003710:	00b3      	lsls	r3, r6, #2
 8003712:	58eb      	ldr	r3, [r5, r3]
 8003714:	4798      	blx	r3
 8003716:	3601      	adds	r6, #1
 8003718:	e7ee      	b.n	80036f8 <__libc_init_array+0xc>
 800371a:	00b3      	lsls	r3, r6, #2
 800371c:	58eb      	ldr	r3, [r5, r3]
 800371e:	4798      	blx	r3
 8003720:	3601      	adds	r6, #1
 8003722:	e7f2      	b.n	800370a <__libc_init_array+0x1e>
 8003724:	08004474 	.word	0x08004474
 8003728:	08004474 	.word	0x08004474
 800372c:	08004478 	.word	0x08004478
 8003730:	08004474 	.word	0x08004474

08003734 <__retarget_lock_init_recursive>:
 8003734:	4770      	bx	lr

08003736 <__retarget_lock_acquire_recursive>:
 8003736:	4770      	bx	lr

08003738 <__retarget_lock_release_recursive>:
 8003738:	4770      	bx	lr
	...

0800373c <_free_r>:
 800373c:	b570      	push	{r4, r5, r6, lr}
 800373e:	0005      	movs	r5, r0
 8003740:	1e0c      	subs	r4, r1, #0
 8003742:	d010      	beq.n	8003766 <_free_r+0x2a>
 8003744:	3c04      	subs	r4, #4
 8003746:	6823      	ldr	r3, [r4, #0]
 8003748:	2b00      	cmp	r3, #0
 800374a:	da00      	bge.n	800374e <_free_r+0x12>
 800374c:	18e4      	adds	r4, r4, r3
 800374e:	0028      	movs	r0, r5
 8003750:	f000 f8e0 	bl	8003914 <__malloc_lock>
 8003754:	4a1d      	ldr	r2, [pc, #116]	@ (80037cc <_free_r+0x90>)
 8003756:	6813      	ldr	r3, [r2, #0]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d105      	bne.n	8003768 <_free_r+0x2c>
 800375c:	6063      	str	r3, [r4, #4]
 800375e:	6014      	str	r4, [r2, #0]
 8003760:	0028      	movs	r0, r5
 8003762:	f000 f8df 	bl	8003924 <__malloc_unlock>
 8003766:	bd70      	pop	{r4, r5, r6, pc}
 8003768:	42a3      	cmp	r3, r4
 800376a:	d908      	bls.n	800377e <_free_r+0x42>
 800376c:	6820      	ldr	r0, [r4, #0]
 800376e:	1821      	adds	r1, r4, r0
 8003770:	428b      	cmp	r3, r1
 8003772:	d1f3      	bne.n	800375c <_free_r+0x20>
 8003774:	6819      	ldr	r1, [r3, #0]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	1809      	adds	r1, r1, r0
 800377a:	6021      	str	r1, [r4, #0]
 800377c:	e7ee      	b.n	800375c <_free_r+0x20>
 800377e:	001a      	movs	r2, r3
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d001      	beq.n	800378a <_free_r+0x4e>
 8003786:	42a3      	cmp	r3, r4
 8003788:	d9f9      	bls.n	800377e <_free_r+0x42>
 800378a:	6811      	ldr	r1, [r2, #0]
 800378c:	1850      	adds	r0, r2, r1
 800378e:	42a0      	cmp	r0, r4
 8003790:	d10b      	bne.n	80037aa <_free_r+0x6e>
 8003792:	6820      	ldr	r0, [r4, #0]
 8003794:	1809      	adds	r1, r1, r0
 8003796:	1850      	adds	r0, r2, r1
 8003798:	6011      	str	r1, [r2, #0]
 800379a:	4283      	cmp	r3, r0
 800379c:	d1e0      	bne.n	8003760 <_free_r+0x24>
 800379e:	6818      	ldr	r0, [r3, #0]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	1841      	adds	r1, r0, r1
 80037a4:	6011      	str	r1, [r2, #0]
 80037a6:	6053      	str	r3, [r2, #4]
 80037a8:	e7da      	b.n	8003760 <_free_r+0x24>
 80037aa:	42a0      	cmp	r0, r4
 80037ac:	d902      	bls.n	80037b4 <_free_r+0x78>
 80037ae:	230c      	movs	r3, #12
 80037b0:	602b      	str	r3, [r5, #0]
 80037b2:	e7d5      	b.n	8003760 <_free_r+0x24>
 80037b4:	6820      	ldr	r0, [r4, #0]
 80037b6:	1821      	adds	r1, r4, r0
 80037b8:	428b      	cmp	r3, r1
 80037ba:	d103      	bne.n	80037c4 <_free_r+0x88>
 80037bc:	6819      	ldr	r1, [r3, #0]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	1809      	adds	r1, r1, r0
 80037c2:	6021      	str	r1, [r4, #0]
 80037c4:	6063      	str	r3, [r4, #4]
 80037c6:	6054      	str	r4, [r2, #4]
 80037c8:	e7ca      	b.n	8003760 <_free_r+0x24>
 80037ca:	46c0      	nop			@ (mov r8, r8)
 80037cc:	200004c0 	.word	0x200004c0

080037d0 <sbrk_aligned>:
 80037d0:	b570      	push	{r4, r5, r6, lr}
 80037d2:	4e0f      	ldr	r6, [pc, #60]	@ (8003810 <sbrk_aligned+0x40>)
 80037d4:	000d      	movs	r5, r1
 80037d6:	6831      	ldr	r1, [r6, #0]
 80037d8:	0004      	movs	r4, r0
 80037da:	2900      	cmp	r1, #0
 80037dc:	d102      	bne.n	80037e4 <sbrk_aligned+0x14>
 80037de:	f000 fcbb 	bl	8004158 <_sbrk_r>
 80037e2:	6030      	str	r0, [r6, #0]
 80037e4:	0029      	movs	r1, r5
 80037e6:	0020      	movs	r0, r4
 80037e8:	f000 fcb6 	bl	8004158 <_sbrk_r>
 80037ec:	1c43      	adds	r3, r0, #1
 80037ee:	d103      	bne.n	80037f8 <sbrk_aligned+0x28>
 80037f0:	2501      	movs	r5, #1
 80037f2:	426d      	negs	r5, r5
 80037f4:	0028      	movs	r0, r5
 80037f6:	bd70      	pop	{r4, r5, r6, pc}
 80037f8:	2303      	movs	r3, #3
 80037fa:	1cc5      	adds	r5, r0, #3
 80037fc:	439d      	bics	r5, r3
 80037fe:	42a8      	cmp	r0, r5
 8003800:	d0f8      	beq.n	80037f4 <sbrk_aligned+0x24>
 8003802:	1a29      	subs	r1, r5, r0
 8003804:	0020      	movs	r0, r4
 8003806:	f000 fca7 	bl	8004158 <_sbrk_r>
 800380a:	3001      	adds	r0, #1
 800380c:	d1f2      	bne.n	80037f4 <sbrk_aligned+0x24>
 800380e:	e7ef      	b.n	80037f0 <sbrk_aligned+0x20>
 8003810:	200004bc 	.word	0x200004bc

08003814 <_malloc_r>:
 8003814:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003816:	2203      	movs	r2, #3
 8003818:	1ccb      	adds	r3, r1, #3
 800381a:	4393      	bics	r3, r2
 800381c:	3308      	adds	r3, #8
 800381e:	0005      	movs	r5, r0
 8003820:	001f      	movs	r7, r3
 8003822:	2b0c      	cmp	r3, #12
 8003824:	d234      	bcs.n	8003890 <_malloc_r+0x7c>
 8003826:	270c      	movs	r7, #12
 8003828:	42b9      	cmp	r1, r7
 800382a:	d833      	bhi.n	8003894 <_malloc_r+0x80>
 800382c:	0028      	movs	r0, r5
 800382e:	f000 f871 	bl	8003914 <__malloc_lock>
 8003832:	4e37      	ldr	r6, [pc, #220]	@ (8003910 <_malloc_r+0xfc>)
 8003834:	6833      	ldr	r3, [r6, #0]
 8003836:	001c      	movs	r4, r3
 8003838:	2c00      	cmp	r4, #0
 800383a:	d12f      	bne.n	800389c <_malloc_r+0x88>
 800383c:	0039      	movs	r1, r7
 800383e:	0028      	movs	r0, r5
 8003840:	f7ff ffc6 	bl	80037d0 <sbrk_aligned>
 8003844:	0004      	movs	r4, r0
 8003846:	1c43      	adds	r3, r0, #1
 8003848:	d15f      	bne.n	800390a <_malloc_r+0xf6>
 800384a:	6834      	ldr	r4, [r6, #0]
 800384c:	9400      	str	r4, [sp, #0]
 800384e:	9b00      	ldr	r3, [sp, #0]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d14a      	bne.n	80038ea <_malloc_r+0xd6>
 8003854:	2c00      	cmp	r4, #0
 8003856:	d052      	beq.n	80038fe <_malloc_r+0xea>
 8003858:	6823      	ldr	r3, [r4, #0]
 800385a:	0028      	movs	r0, r5
 800385c:	18e3      	adds	r3, r4, r3
 800385e:	9900      	ldr	r1, [sp, #0]
 8003860:	9301      	str	r3, [sp, #4]
 8003862:	f000 fc79 	bl	8004158 <_sbrk_r>
 8003866:	9b01      	ldr	r3, [sp, #4]
 8003868:	4283      	cmp	r3, r0
 800386a:	d148      	bne.n	80038fe <_malloc_r+0xea>
 800386c:	6823      	ldr	r3, [r4, #0]
 800386e:	0028      	movs	r0, r5
 8003870:	1aff      	subs	r7, r7, r3
 8003872:	0039      	movs	r1, r7
 8003874:	f7ff ffac 	bl	80037d0 <sbrk_aligned>
 8003878:	3001      	adds	r0, #1
 800387a:	d040      	beq.n	80038fe <_malloc_r+0xea>
 800387c:	6823      	ldr	r3, [r4, #0]
 800387e:	19db      	adds	r3, r3, r7
 8003880:	6023      	str	r3, [r4, #0]
 8003882:	6833      	ldr	r3, [r6, #0]
 8003884:	685a      	ldr	r2, [r3, #4]
 8003886:	2a00      	cmp	r2, #0
 8003888:	d133      	bne.n	80038f2 <_malloc_r+0xde>
 800388a:	9b00      	ldr	r3, [sp, #0]
 800388c:	6033      	str	r3, [r6, #0]
 800388e:	e019      	b.n	80038c4 <_malloc_r+0xb0>
 8003890:	2b00      	cmp	r3, #0
 8003892:	dac9      	bge.n	8003828 <_malloc_r+0x14>
 8003894:	230c      	movs	r3, #12
 8003896:	602b      	str	r3, [r5, #0]
 8003898:	2000      	movs	r0, #0
 800389a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800389c:	6821      	ldr	r1, [r4, #0]
 800389e:	1bc9      	subs	r1, r1, r7
 80038a0:	d420      	bmi.n	80038e4 <_malloc_r+0xd0>
 80038a2:	290b      	cmp	r1, #11
 80038a4:	d90a      	bls.n	80038bc <_malloc_r+0xa8>
 80038a6:	19e2      	adds	r2, r4, r7
 80038a8:	6027      	str	r7, [r4, #0]
 80038aa:	42a3      	cmp	r3, r4
 80038ac:	d104      	bne.n	80038b8 <_malloc_r+0xa4>
 80038ae:	6032      	str	r2, [r6, #0]
 80038b0:	6863      	ldr	r3, [r4, #4]
 80038b2:	6011      	str	r1, [r2, #0]
 80038b4:	6053      	str	r3, [r2, #4]
 80038b6:	e005      	b.n	80038c4 <_malloc_r+0xb0>
 80038b8:	605a      	str	r2, [r3, #4]
 80038ba:	e7f9      	b.n	80038b0 <_malloc_r+0x9c>
 80038bc:	6862      	ldr	r2, [r4, #4]
 80038be:	42a3      	cmp	r3, r4
 80038c0:	d10e      	bne.n	80038e0 <_malloc_r+0xcc>
 80038c2:	6032      	str	r2, [r6, #0]
 80038c4:	0028      	movs	r0, r5
 80038c6:	f000 f82d 	bl	8003924 <__malloc_unlock>
 80038ca:	0020      	movs	r0, r4
 80038cc:	2207      	movs	r2, #7
 80038ce:	300b      	adds	r0, #11
 80038d0:	1d23      	adds	r3, r4, #4
 80038d2:	4390      	bics	r0, r2
 80038d4:	1ac2      	subs	r2, r0, r3
 80038d6:	4298      	cmp	r0, r3
 80038d8:	d0df      	beq.n	800389a <_malloc_r+0x86>
 80038da:	1a1b      	subs	r3, r3, r0
 80038dc:	50a3      	str	r3, [r4, r2]
 80038de:	e7dc      	b.n	800389a <_malloc_r+0x86>
 80038e0:	605a      	str	r2, [r3, #4]
 80038e2:	e7ef      	b.n	80038c4 <_malloc_r+0xb0>
 80038e4:	0023      	movs	r3, r4
 80038e6:	6864      	ldr	r4, [r4, #4]
 80038e8:	e7a6      	b.n	8003838 <_malloc_r+0x24>
 80038ea:	9c00      	ldr	r4, [sp, #0]
 80038ec:	6863      	ldr	r3, [r4, #4]
 80038ee:	9300      	str	r3, [sp, #0]
 80038f0:	e7ad      	b.n	800384e <_malloc_r+0x3a>
 80038f2:	001a      	movs	r2, r3
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	42a3      	cmp	r3, r4
 80038f8:	d1fb      	bne.n	80038f2 <_malloc_r+0xde>
 80038fa:	2300      	movs	r3, #0
 80038fc:	e7da      	b.n	80038b4 <_malloc_r+0xa0>
 80038fe:	230c      	movs	r3, #12
 8003900:	0028      	movs	r0, r5
 8003902:	602b      	str	r3, [r5, #0]
 8003904:	f000 f80e 	bl	8003924 <__malloc_unlock>
 8003908:	e7c6      	b.n	8003898 <_malloc_r+0x84>
 800390a:	6007      	str	r7, [r0, #0]
 800390c:	e7da      	b.n	80038c4 <_malloc_r+0xb0>
 800390e:	46c0      	nop			@ (mov r8, r8)
 8003910:	200004c0 	.word	0x200004c0

08003914 <__malloc_lock>:
 8003914:	b510      	push	{r4, lr}
 8003916:	4802      	ldr	r0, [pc, #8]	@ (8003920 <__malloc_lock+0xc>)
 8003918:	f7ff ff0d 	bl	8003736 <__retarget_lock_acquire_recursive>
 800391c:	bd10      	pop	{r4, pc}
 800391e:	46c0      	nop			@ (mov r8, r8)
 8003920:	200004b8 	.word	0x200004b8

08003924 <__malloc_unlock>:
 8003924:	b510      	push	{r4, lr}
 8003926:	4802      	ldr	r0, [pc, #8]	@ (8003930 <__malloc_unlock+0xc>)
 8003928:	f7ff ff06 	bl	8003738 <__retarget_lock_release_recursive>
 800392c:	bd10      	pop	{r4, pc}
 800392e:	46c0      	nop			@ (mov r8, r8)
 8003930:	200004b8 	.word	0x200004b8

08003934 <__sfputc_r>:
 8003934:	6893      	ldr	r3, [r2, #8]
 8003936:	b510      	push	{r4, lr}
 8003938:	3b01      	subs	r3, #1
 800393a:	6093      	str	r3, [r2, #8]
 800393c:	2b00      	cmp	r3, #0
 800393e:	da04      	bge.n	800394a <__sfputc_r+0x16>
 8003940:	6994      	ldr	r4, [r2, #24]
 8003942:	42a3      	cmp	r3, r4
 8003944:	db07      	blt.n	8003956 <__sfputc_r+0x22>
 8003946:	290a      	cmp	r1, #10
 8003948:	d005      	beq.n	8003956 <__sfputc_r+0x22>
 800394a:	6813      	ldr	r3, [r2, #0]
 800394c:	1c58      	adds	r0, r3, #1
 800394e:	6010      	str	r0, [r2, #0]
 8003950:	7019      	strb	r1, [r3, #0]
 8003952:	0008      	movs	r0, r1
 8003954:	bd10      	pop	{r4, pc}
 8003956:	f000 fb5e 	bl	8004016 <__swbuf_r>
 800395a:	0001      	movs	r1, r0
 800395c:	e7f9      	b.n	8003952 <__sfputc_r+0x1e>

0800395e <__sfputs_r>:
 800395e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003960:	0006      	movs	r6, r0
 8003962:	000f      	movs	r7, r1
 8003964:	0014      	movs	r4, r2
 8003966:	18d5      	adds	r5, r2, r3
 8003968:	42ac      	cmp	r4, r5
 800396a:	d101      	bne.n	8003970 <__sfputs_r+0x12>
 800396c:	2000      	movs	r0, #0
 800396e:	e007      	b.n	8003980 <__sfputs_r+0x22>
 8003970:	7821      	ldrb	r1, [r4, #0]
 8003972:	003a      	movs	r2, r7
 8003974:	0030      	movs	r0, r6
 8003976:	f7ff ffdd 	bl	8003934 <__sfputc_r>
 800397a:	3401      	adds	r4, #1
 800397c:	1c43      	adds	r3, r0, #1
 800397e:	d1f3      	bne.n	8003968 <__sfputs_r+0xa>
 8003980:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003984 <_vfiprintf_r>:
 8003984:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003986:	b0a1      	sub	sp, #132	@ 0x84
 8003988:	000f      	movs	r7, r1
 800398a:	0015      	movs	r5, r2
 800398c:	001e      	movs	r6, r3
 800398e:	9003      	str	r0, [sp, #12]
 8003990:	2800      	cmp	r0, #0
 8003992:	d004      	beq.n	800399e <_vfiprintf_r+0x1a>
 8003994:	6a03      	ldr	r3, [r0, #32]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d101      	bne.n	800399e <_vfiprintf_r+0x1a>
 800399a:	f7ff fdbb 	bl	8003514 <__sinit>
 800399e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80039a0:	07db      	lsls	r3, r3, #31
 80039a2:	d405      	bmi.n	80039b0 <_vfiprintf_r+0x2c>
 80039a4:	89bb      	ldrh	r3, [r7, #12]
 80039a6:	059b      	lsls	r3, r3, #22
 80039a8:	d402      	bmi.n	80039b0 <_vfiprintf_r+0x2c>
 80039aa:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80039ac:	f7ff fec3 	bl	8003736 <__retarget_lock_acquire_recursive>
 80039b0:	89bb      	ldrh	r3, [r7, #12]
 80039b2:	071b      	lsls	r3, r3, #28
 80039b4:	d502      	bpl.n	80039bc <_vfiprintf_r+0x38>
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d113      	bne.n	80039e4 <_vfiprintf_r+0x60>
 80039bc:	0039      	movs	r1, r7
 80039be:	9803      	ldr	r0, [sp, #12]
 80039c0:	f000 fb6c 	bl	800409c <__swsetup_r>
 80039c4:	2800      	cmp	r0, #0
 80039c6:	d00d      	beq.n	80039e4 <_vfiprintf_r+0x60>
 80039c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80039ca:	07db      	lsls	r3, r3, #31
 80039cc:	d503      	bpl.n	80039d6 <_vfiprintf_r+0x52>
 80039ce:	2001      	movs	r0, #1
 80039d0:	4240      	negs	r0, r0
 80039d2:	b021      	add	sp, #132	@ 0x84
 80039d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039d6:	89bb      	ldrh	r3, [r7, #12]
 80039d8:	059b      	lsls	r3, r3, #22
 80039da:	d4f8      	bmi.n	80039ce <_vfiprintf_r+0x4a>
 80039dc:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80039de:	f7ff feab 	bl	8003738 <__retarget_lock_release_recursive>
 80039e2:	e7f4      	b.n	80039ce <_vfiprintf_r+0x4a>
 80039e4:	2300      	movs	r3, #0
 80039e6:	ac08      	add	r4, sp, #32
 80039e8:	6163      	str	r3, [r4, #20]
 80039ea:	3320      	adds	r3, #32
 80039ec:	7663      	strb	r3, [r4, #25]
 80039ee:	3310      	adds	r3, #16
 80039f0:	76a3      	strb	r3, [r4, #26]
 80039f2:	9607      	str	r6, [sp, #28]
 80039f4:	002e      	movs	r6, r5
 80039f6:	7833      	ldrb	r3, [r6, #0]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d001      	beq.n	8003a00 <_vfiprintf_r+0x7c>
 80039fc:	2b25      	cmp	r3, #37	@ 0x25
 80039fe:	d148      	bne.n	8003a92 <_vfiprintf_r+0x10e>
 8003a00:	1b73      	subs	r3, r6, r5
 8003a02:	9305      	str	r3, [sp, #20]
 8003a04:	42ae      	cmp	r6, r5
 8003a06:	d00b      	beq.n	8003a20 <_vfiprintf_r+0x9c>
 8003a08:	002a      	movs	r2, r5
 8003a0a:	0039      	movs	r1, r7
 8003a0c:	9803      	ldr	r0, [sp, #12]
 8003a0e:	f7ff ffa6 	bl	800395e <__sfputs_r>
 8003a12:	3001      	adds	r0, #1
 8003a14:	d100      	bne.n	8003a18 <_vfiprintf_r+0x94>
 8003a16:	e0ae      	b.n	8003b76 <_vfiprintf_r+0x1f2>
 8003a18:	6963      	ldr	r3, [r4, #20]
 8003a1a:	9a05      	ldr	r2, [sp, #20]
 8003a1c:	189b      	adds	r3, r3, r2
 8003a1e:	6163      	str	r3, [r4, #20]
 8003a20:	7833      	ldrb	r3, [r6, #0]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d100      	bne.n	8003a28 <_vfiprintf_r+0xa4>
 8003a26:	e0a6      	b.n	8003b76 <_vfiprintf_r+0x1f2>
 8003a28:	2201      	movs	r2, #1
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	4252      	negs	r2, r2
 8003a2e:	6062      	str	r2, [r4, #4]
 8003a30:	a904      	add	r1, sp, #16
 8003a32:	3254      	adds	r2, #84	@ 0x54
 8003a34:	1852      	adds	r2, r2, r1
 8003a36:	1c75      	adds	r5, r6, #1
 8003a38:	6023      	str	r3, [r4, #0]
 8003a3a:	60e3      	str	r3, [r4, #12]
 8003a3c:	60a3      	str	r3, [r4, #8]
 8003a3e:	7013      	strb	r3, [r2, #0]
 8003a40:	65a3      	str	r3, [r4, #88]	@ 0x58
 8003a42:	4b59      	ldr	r3, [pc, #356]	@ (8003ba8 <_vfiprintf_r+0x224>)
 8003a44:	2205      	movs	r2, #5
 8003a46:	0018      	movs	r0, r3
 8003a48:	7829      	ldrb	r1, [r5, #0]
 8003a4a:	9305      	str	r3, [sp, #20]
 8003a4c:	f000 fb96 	bl	800417c <memchr>
 8003a50:	1c6e      	adds	r6, r5, #1
 8003a52:	2800      	cmp	r0, #0
 8003a54:	d11f      	bne.n	8003a96 <_vfiprintf_r+0x112>
 8003a56:	6822      	ldr	r2, [r4, #0]
 8003a58:	06d3      	lsls	r3, r2, #27
 8003a5a:	d504      	bpl.n	8003a66 <_vfiprintf_r+0xe2>
 8003a5c:	2353      	movs	r3, #83	@ 0x53
 8003a5e:	a904      	add	r1, sp, #16
 8003a60:	185b      	adds	r3, r3, r1
 8003a62:	2120      	movs	r1, #32
 8003a64:	7019      	strb	r1, [r3, #0]
 8003a66:	0713      	lsls	r3, r2, #28
 8003a68:	d504      	bpl.n	8003a74 <_vfiprintf_r+0xf0>
 8003a6a:	2353      	movs	r3, #83	@ 0x53
 8003a6c:	a904      	add	r1, sp, #16
 8003a6e:	185b      	adds	r3, r3, r1
 8003a70:	212b      	movs	r1, #43	@ 0x2b
 8003a72:	7019      	strb	r1, [r3, #0]
 8003a74:	782b      	ldrb	r3, [r5, #0]
 8003a76:	2b2a      	cmp	r3, #42	@ 0x2a
 8003a78:	d016      	beq.n	8003aa8 <_vfiprintf_r+0x124>
 8003a7a:	002e      	movs	r6, r5
 8003a7c:	2100      	movs	r1, #0
 8003a7e:	200a      	movs	r0, #10
 8003a80:	68e3      	ldr	r3, [r4, #12]
 8003a82:	7832      	ldrb	r2, [r6, #0]
 8003a84:	1c75      	adds	r5, r6, #1
 8003a86:	3a30      	subs	r2, #48	@ 0x30
 8003a88:	2a09      	cmp	r2, #9
 8003a8a:	d950      	bls.n	8003b2e <_vfiprintf_r+0x1aa>
 8003a8c:	2900      	cmp	r1, #0
 8003a8e:	d111      	bne.n	8003ab4 <_vfiprintf_r+0x130>
 8003a90:	e017      	b.n	8003ac2 <_vfiprintf_r+0x13e>
 8003a92:	3601      	adds	r6, #1
 8003a94:	e7af      	b.n	80039f6 <_vfiprintf_r+0x72>
 8003a96:	9b05      	ldr	r3, [sp, #20]
 8003a98:	6822      	ldr	r2, [r4, #0]
 8003a9a:	1ac0      	subs	r0, r0, r3
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	4083      	lsls	r3, r0
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	0035      	movs	r5, r6
 8003aa4:	6023      	str	r3, [r4, #0]
 8003aa6:	e7cc      	b.n	8003a42 <_vfiprintf_r+0xbe>
 8003aa8:	9b07      	ldr	r3, [sp, #28]
 8003aaa:	1d19      	adds	r1, r3, #4
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	9107      	str	r1, [sp, #28]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	db01      	blt.n	8003ab8 <_vfiprintf_r+0x134>
 8003ab4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003ab6:	e004      	b.n	8003ac2 <_vfiprintf_r+0x13e>
 8003ab8:	425b      	negs	r3, r3
 8003aba:	60e3      	str	r3, [r4, #12]
 8003abc:	2302      	movs	r3, #2
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	6023      	str	r3, [r4, #0]
 8003ac2:	7833      	ldrb	r3, [r6, #0]
 8003ac4:	2b2e      	cmp	r3, #46	@ 0x2e
 8003ac6:	d10c      	bne.n	8003ae2 <_vfiprintf_r+0x15e>
 8003ac8:	7873      	ldrb	r3, [r6, #1]
 8003aca:	2b2a      	cmp	r3, #42	@ 0x2a
 8003acc:	d134      	bne.n	8003b38 <_vfiprintf_r+0x1b4>
 8003ace:	9b07      	ldr	r3, [sp, #28]
 8003ad0:	3602      	adds	r6, #2
 8003ad2:	1d1a      	adds	r2, r3, #4
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	9207      	str	r2, [sp, #28]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	da01      	bge.n	8003ae0 <_vfiprintf_r+0x15c>
 8003adc:	2301      	movs	r3, #1
 8003ade:	425b      	negs	r3, r3
 8003ae0:	9309      	str	r3, [sp, #36]	@ 0x24
 8003ae2:	4d32      	ldr	r5, [pc, #200]	@ (8003bac <_vfiprintf_r+0x228>)
 8003ae4:	2203      	movs	r2, #3
 8003ae6:	0028      	movs	r0, r5
 8003ae8:	7831      	ldrb	r1, [r6, #0]
 8003aea:	f000 fb47 	bl	800417c <memchr>
 8003aee:	2800      	cmp	r0, #0
 8003af0:	d006      	beq.n	8003b00 <_vfiprintf_r+0x17c>
 8003af2:	2340      	movs	r3, #64	@ 0x40
 8003af4:	1b40      	subs	r0, r0, r5
 8003af6:	4083      	lsls	r3, r0
 8003af8:	6822      	ldr	r2, [r4, #0]
 8003afa:	3601      	adds	r6, #1
 8003afc:	4313      	orrs	r3, r2
 8003afe:	6023      	str	r3, [r4, #0]
 8003b00:	7831      	ldrb	r1, [r6, #0]
 8003b02:	2206      	movs	r2, #6
 8003b04:	482a      	ldr	r0, [pc, #168]	@ (8003bb0 <_vfiprintf_r+0x22c>)
 8003b06:	1c75      	adds	r5, r6, #1
 8003b08:	7621      	strb	r1, [r4, #24]
 8003b0a:	f000 fb37 	bl	800417c <memchr>
 8003b0e:	2800      	cmp	r0, #0
 8003b10:	d040      	beq.n	8003b94 <_vfiprintf_r+0x210>
 8003b12:	4b28      	ldr	r3, [pc, #160]	@ (8003bb4 <_vfiprintf_r+0x230>)
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d122      	bne.n	8003b5e <_vfiprintf_r+0x1da>
 8003b18:	2207      	movs	r2, #7
 8003b1a:	9b07      	ldr	r3, [sp, #28]
 8003b1c:	3307      	adds	r3, #7
 8003b1e:	4393      	bics	r3, r2
 8003b20:	3308      	adds	r3, #8
 8003b22:	9307      	str	r3, [sp, #28]
 8003b24:	6963      	ldr	r3, [r4, #20]
 8003b26:	9a04      	ldr	r2, [sp, #16]
 8003b28:	189b      	adds	r3, r3, r2
 8003b2a:	6163      	str	r3, [r4, #20]
 8003b2c:	e762      	b.n	80039f4 <_vfiprintf_r+0x70>
 8003b2e:	4343      	muls	r3, r0
 8003b30:	002e      	movs	r6, r5
 8003b32:	2101      	movs	r1, #1
 8003b34:	189b      	adds	r3, r3, r2
 8003b36:	e7a4      	b.n	8003a82 <_vfiprintf_r+0xfe>
 8003b38:	2300      	movs	r3, #0
 8003b3a:	200a      	movs	r0, #10
 8003b3c:	0019      	movs	r1, r3
 8003b3e:	3601      	adds	r6, #1
 8003b40:	6063      	str	r3, [r4, #4]
 8003b42:	7832      	ldrb	r2, [r6, #0]
 8003b44:	1c75      	adds	r5, r6, #1
 8003b46:	3a30      	subs	r2, #48	@ 0x30
 8003b48:	2a09      	cmp	r2, #9
 8003b4a:	d903      	bls.n	8003b54 <_vfiprintf_r+0x1d0>
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d0c8      	beq.n	8003ae2 <_vfiprintf_r+0x15e>
 8003b50:	9109      	str	r1, [sp, #36]	@ 0x24
 8003b52:	e7c6      	b.n	8003ae2 <_vfiprintf_r+0x15e>
 8003b54:	4341      	muls	r1, r0
 8003b56:	002e      	movs	r6, r5
 8003b58:	2301      	movs	r3, #1
 8003b5a:	1889      	adds	r1, r1, r2
 8003b5c:	e7f1      	b.n	8003b42 <_vfiprintf_r+0x1be>
 8003b5e:	aa07      	add	r2, sp, #28
 8003b60:	9200      	str	r2, [sp, #0]
 8003b62:	0021      	movs	r1, r4
 8003b64:	003a      	movs	r2, r7
 8003b66:	4b14      	ldr	r3, [pc, #80]	@ (8003bb8 <_vfiprintf_r+0x234>)
 8003b68:	9803      	ldr	r0, [sp, #12]
 8003b6a:	e000      	b.n	8003b6e <_vfiprintf_r+0x1ea>
 8003b6c:	bf00      	nop
 8003b6e:	9004      	str	r0, [sp, #16]
 8003b70:	9b04      	ldr	r3, [sp, #16]
 8003b72:	3301      	adds	r3, #1
 8003b74:	d1d6      	bne.n	8003b24 <_vfiprintf_r+0x1a0>
 8003b76:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003b78:	07db      	lsls	r3, r3, #31
 8003b7a:	d405      	bmi.n	8003b88 <_vfiprintf_r+0x204>
 8003b7c:	89bb      	ldrh	r3, [r7, #12]
 8003b7e:	059b      	lsls	r3, r3, #22
 8003b80:	d402      	bmi.n	8003b88 <_vfiprintf_r+0x204>
 8003b82:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8003b84:	f7ff fdd8 	bl	8003738 <__retarget_lock_release_recursive>
 8003b88:	89bb      	ldrh	r3, [r7, #12]
 8003b8a:	065b      	lsls	r3, r3, #25
 8003b8c:	d500      	bpl.n	8003b90 <_vfiprintf_r+0x20c>
 8003b8e:	e71e      	b.n	80039ce <_vfiprintf_r+0x4a>
 8003b90:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8003b92:	e71e      	b.n	80039d2 <_vfiprintf_r+0x4e>
 8003b94:	aa07      	add	r2, sp, #28
 8003b96:	9200      	str	r2, [sp, #0]
 8003b98:	0021      	movs	r1, r4
 8003b9a:	003a      	movs	r2, r7
 8003b9c:	4b06      	ldr	r3, [pc, #24]	@ (8003bb8 <_vfiprintf_r+0x234>)
 8003b9e:	9803      	ldr	r0, [sp, #12]
 8003ba0:	f000 f87c 	bl	8003c9c <_printf_i>
 8003ba4:	e7e3      	b.n	8003b6e <_vfiprintf_r+0x1ea>
 8003ba6:	46c0      	nop			@ (mov r8, r8)
 8003ba8:	08004441 	.word	0x08004441
 8003bac:	08004447 	.word	0x08004447
 8003bb0:	0800444b 	.word	0x0800444b
 8003bb4:	00000000 	.word	0x00000000
 8003bb8:	0800395f 	.word	0x0800395f

08003bbc <_printf_common>:
 8003bbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003bbe:	0016      	movs	r6, r2
 8003bc0:	9301      	str	r3, [sp, #4]
 8003bc2:	688a      	ldr	r2, [r1, #8]
 8003bc4:	690b      	ldr	r3, [r1, #16]
 8003bc6:	000c      	movs	r4, r1
 8003bc8:	9000      	str	r0, [sp, #0]
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	da00      	bge.n	8003bd0 <_printf_common+0x14>
 8003bce:	0013      	movs	r3, r2
 8003bd0:	0022      	movs	r2, r4
 8003bd2:	6033      	str	r3, [r6, #0]
 8003bd4:	3243      	adds	r2, #67	@ 0x43
 8003bd6:	7812      	ldrb	r2, [r2, #0]
 8003bd8:	2a00      	cmp	r2, #0
 8003bda:	d001      	beq.n	8003be0 <_printf_common+0x24>
 8003bdc:	3301      	adds	r3, #1
 8003bde:	6033      	str	r3, [r6, #0]
 8003be0:	6823      	ldr	r3, [r4, #0]
 8003be2:	069b      	lsls	r3, r3, #26
 8003be4:	d502      	bpl.n	8003bec <_printf_common+0x30>
 8003be6:	6833      	ldr	r3, [r6, #0]
 8003be8:	3302      	adds	r3, #2
 8003bea:	6033      	str	r3, [r6, #0]
 8003bec:	6822      	ldr	r2, [r4, #0]
 8003bee:	2306      	movs	r3, #6
 8003bf0:	0015      	movs	r5, r2
 8003bf2:	401d      	ands	r5, r3
 8003bf4:	421a      	tst	r2, r3
 8003bf6:	d027      	beq.n	8003c48 <_printf_common+0x8c>
 8003bf8:	0023      	movs	r3, r4
 8003bfa:	3343      	adds	r3, #67	@ 0x43
 8003bfc:	781b      	ldrb	r3, [r3, #0]
 8003bfe:	1e5a      	subs	r2, r3, #1
 8003c00:	4193      	sbcs	r3, r2
 8003c02:	6822      	ldr	r2, [r4, #0]
 8003c04:	0692      	lsls	r2, r2, #26
 8003c06:	d430      	bmi.n	8003c6a <_printf_common+0xae>
 8003c08:	0022      	movs	r2, r4
 8003c0a:	9901      	ldr	r1, [sp, #4]
 8003c0c:	9800      	ldr	r0, [sp, #0]
 8003c0e:	9d08      	ldr	r5, [sp, #32]
 8003c10:	3243      	adds	r2, #67	@ 0x43
 8003c12:	47a8      	blx	r5
 8003c14:	3001      	adds	r0, #1
 8003c16:	d025      	beq.n	8003c64 <_printf_common+0xa8>
 8003c18:	2206      	movs	r2, #6
 8003c1a:	6823      	ldr	r3, [r4, #0]
 8003c1c:	2500      	movs	r5, #0
 8003c1e:	4013      	ands	r3, r2
 8003c20:	2b04      	cmp	r3, #4
 8003c22:	d105      	bne.n	8003c30 <_printf_common+0x74>
 8003c24:	6833      	ldr	r3, [r6, #0]
 8003c26:	68e5      	ldr	r5, [r4, #12]
 8003c28:	1aed      	subs	r5, r5, r3
 8003c2a:	43eb      	mvns	r3, r5
 8003c2c:	17db      	asrs	r3, r3, #31
 8003c2e:	401d      	ands	r5, r3
 8003c30:	68a3      	ldr	r3, [r4, #8]
 8003c32:	6922      	ldr	r2, [r4, #16]
 8003c34:	4293      	cmp	r3, r2
 8003c36:	dd01      	ble.n	8003c3c <_printf_common+0x80>
 8003c38:	1a9b      	subs	r3, r3, r2
 8003c3a:	18ed      	adds	r5, r5, r3
 8003c3c:	2600      	movs	r6, #0
 8003c3e:	42b5      	cmp	r5, r6
 8003c40:	d120      	bne.n	8003c84 <_printf_common+0xc8>
 8003c42:	2000      	movs	r0, #0
 8003c44:	e010      	b.n	8003c68 <_printf_common+0xac>
 8003c46:	3501      	adds	r5, #1
 8003c48:	68e3      	ldr	r3, [r4, #12]
 8003c4a:	6832      	ldr	r2, [r6, #0]
 8003c4c:	1a9b      	subs	r3, r3, r2
 8003c4e:	42ab      	cmp	r3, r5
 8003c50:	ddd2      	ble.n	8003bf8 <_printf_common+0x3c>
 8003c52:	0022      	movs	r2, r4
 8003c54:	2301      	movs	r3, #1
 8003c56:	9901      	ldr	r1, [sp, #4]
 8003c58:	9800      	ldr	r0, [sp, #0]
 8003c5a:	9f08      	ldr	r7, [sp, #32]
 8003c5c:	3219      	adds	r2, #25
 8003c5e:	47b8      	blx	r7
 8003c60:	3001      	adds	r0, #1
 8003c62:	d1f0      	bne.n	8003c46 <_printf_common+0x8a>
 8003c64:	2001      	movs	r0, #1
 8003c66:	4240      	negs	r0, r0
 8003c68:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003c6a:	2030      	movs	r0, #48	@ 0x30
 8003c6c:	18e1      	adds	r1, r4, r3
 8003c6e:	3143      	adds	r1, #67	@ 0x43
 8003c70:	7008      	strb	r0, [r1, #0]
 8003c72:	0021      	movs	r1, r4
 8003c74:	1c5a      	adds	r2, r3, #1
 8003c76:	3145      	adds	r1, #69	@ 0x45
 8003c78:	7809      	ldrb	r1, [r1, #0]
 8003c7a:	18a2      	adds	r2, r4, r2
 8003c7c:	3243      	adds	r2, #67	@ 0x43
 8003c7e:	3302      	adds	r3, #2
 8003c80:	7011      	strb	r1, [r2, #0]
 8003c82:	e7c1      	b.n	8003c08 <_printf_common+0x4c>
 8003c84:	0022      	movs	r2, r4
 8003c86:	2301      	movs	r3, #1
 8003c88:	9901      	ldr	r1, [sp, #4]
 8003c8a:	9800      	ldr	r0, [sp, #0]
 8003c8c:	9f08      	ldr	r7, [sp, #32]
 8003c8e:	321a      	adds	r2, #26
 8003c90:	47b8      	blx	r7
 8003c92:	3001      	adds	r0, #1
 8003c94:	d0e6      	beq.n	8003c64 <_printf_common+0xa8>
 8003c96:	3601      	adds	r6, #1
 8003c98:	e7d1      	b.n	8003c3e <_printf_common+0x82>
	...

08003c9c <_printf_i>:
 8003c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c9e:	b08b      	sub	sp, #44	@ 0x2c
 8003ca0:	9206      	str	r2, [sp, #24]
 8003ca2:	000a      	movs	r2, r1
 8003ca4:	3243      	adds	r2, #67	@ 0x43
 8003ca6:	9307      	str	r3, [sp, #28]
 8003ca8:	9005      	str	r0, [sp, #20]
 8003caa:	9203      	str	r2, [sp, #12]
 8003cac:	7e0a      	ldrb	r2, [r1, #24]
 8003cae:	000c      	movs	r4, r1
 8003cb0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8003cb2:	2a78      	cmp	r2, #120	@ 0x78
 8003cb4:	d809      	bhi.n	8003cca <_printf_i+0x2e>
 8003cb6:	2a62      	cmp	r2, #98	@ 0x62
 8003cb8:	d80b      	bhi.n	8003cd2 <_printf_i+0x36>
 8003cba:	2a00      	cmp	r2, #0
 8003cbc:	d100      	bne.n	8003cc0 <_printf_i+0x24>
 8003cbe:	e0ba      	b.n	8003e36 <_printf_i+0x19a>
 8003cc0:	497a      	ldr	r1, [pc, #488]	@ (8003eac <_printf_i+0x210>)
 8003cc2:	9104      	str	r1, [sp, #16]
 8003cc4:	2a58      	cmp	r2, #88	@ 0x58
 8003cc6:	d100      	bne.n	8003cca <_printf_i+0x2e>
 8003cc8:	e08e      	b.n	8003de8 <_printf_i+0x14c>
 8003cca:	0025      	movs	r5, r4
 8003ccc:	3542      	adds	r5, #66	@ 0x42
 8003cce:	702a      	strb	r2, [r5, #0]
 8003cd0:	e022      	b.n	8003d18 <_printf_i+0x7c>
 8003cd2:	0010      	movs	r0, r2
 8003cd4:	3863      	subs	r0, #99	@ 0x63
 8003cd6:	2815      	cmp	r0, #21
 8003cd8:	d8f7      	bhi.n	8003cca <_printf_i+0x2e>
 8003cda:	f7fc fa15 	bl	8000108 <__gnu_thumb1_case_shi>
 8003cde:	0016      	.short	0x0016
 8003ce0:	fff6001f 	.word	0xfff6001f
 8003ce4:	fff6fff6 	.word	0xfff6fff6
 8003ce8:	001ffff6 	.word	0x001ffff6
 8003cec:	fff6fff6 	.word	0xfff6fff6
 8003cf0:	fff6fff6 	.word	0xfff6fff6
 8003cf4:	0036009f 	.word	0x0036009f
 8003cf8:	fff6007e 	.word	0xfff6007e
 8003cfc:	00b0fff6 	.word	0x00b0fff6
 8003d00:	0036fff6 	.word	0x0036fff6
 8003d04:	fff6fff6 	.word	0xfff6fff6
 8003d08:	0082      	.short	0x0082
 8003d0a:	0025      	movs	r5, r4
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	3542      	adds	r5, #66	@ 0x42
 8003d10:	1d11      	adds	r1, r2, #4
 8003d12:	6019      	str	r1, [r3, #0]
 8003d14:	6813      	ldr	r3, [r2, #0]
 8003d16:	702b      	strb	r3, [r5, #0]
 8003d18:	2301      	movs	r3, #1
 8003d1a:	e09e      	b.n	8003e5a <_printf_i+0x1be>
 8003d1c:	6818      	ldr	r0, [r3, #0]
 8003d1e:	6809      	ldr	r1, [r1, #0]
 8003d20:	1d02      	adds	r2, r0, #4
 8003d22:	060d      	lsls	r5, r1, #24
 8003d24:	d50b      	bpl.n	8003d3e <_printf_i+0xa2>
 8003d26:	6806      	ldr	r6, [r0, #0]
 8003d28:	601a      	str	r2, [r3, #0]
 8003d2a:	2e00      	cmp	r6, #0
 8003d2c:	da03      	bge.n	8003d36 <_printf_i+0x9a>
 8003d2e:	232d      	movs	r3, #45	@ 0x2d
 8003d30:	9a03      	ldr	r2, [sp, #12]
 8003d32:	4276      	negs	r6, r6
 8003d34:	7013      	strb	r3, [r2, #0]
 8003d36:	4b5d      	ldr	r3, [pc, #372]	@ (8003eac <_printf_i+0x210>)
 8003d38:	270a      	movs	r7, #10
 8003d3a:	9304      	str	r3, [sp, #16]
 8003d3c:	e018      	b.n	8003d70 <_printf_i+0xd4>
 8003d3e:	6806      	ldr	r6, [r0, #0]
 8003d40:	601a      	str	r2, [r3, #0]
 8003d42:	0649      	lsls	r1, r1, #25
 8003d44:	d5f1      	bpl.n	8003d2a <_printf_i+0x8e>
 8003d46:	b236      	sxth	r6, r6
 8003d48:	e7ef      	b.n	8003d2a <_printf_i+0x8e>
 8003d4a:	6808      	ldr	r0, [r1, #0]
 8003d4c:	6819      	ldr	r1, [r3, #0]
 8003d4e:	c940      	ldmia	r1!, {r6}
 8003d50:	0605      	lsls	r5, r0, #24
 8003d52:	d402      	bmi.n	8003d5a <_printf_i+0xbe>
 8003d54:	0640      	lsls	r0, r0, #25
 8003d56:	d500      	bpl.n	8003d5a <_printf_i+0xbe>
 8003d58:	b2b6      	uxth	r6, r6
 8003d5a:	6019      	str	r1, [r3, #0]
 8003d5c:	4b53      	ldr	r3, [pc, #332]	@ (8003eac <_printf_i+0x210>)
 8003d5e:	270a      	movs	r7, #10
 8003d60:	9304      	str	r3, [sp, #16]
 8003d62:	2a6f      	cmp	r2, #111	@ 0x6f
 8003d64:	d100      	bne.n	8003d68 <_printf_i+0xcc>
 8003d66:	3f02      	subs	r7, #2
 8003d68:	0023      	movs	r3, r4
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	3343      	adds	r3, #67	@ 0x43
 8003d6e:	701a      	strb	r2, [r3, #0]
 8003d70:	6863      	ldr	r3, [r4, #4]
 8003d72:	60a3      	str	r3, [r4, #8]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	db06      	blt.n	8003d86 <_printf_i+0xea>
 8003d78:	2104      	movs	r1, #4
 8003d7a:	6822      	ldr	r2, [r4, #0]
 8003d7c:	9d03      	ldr	r5, [sp, #12]
 8003d7e:	438a      	bics	r2, r1
 8003d80:	6022      	str	r2, [r4, #0]
 8003d82:	4333      	orrs	r3, r6
 8003d84:	d00c      	beq.n	8003da0 <_printf_i+0x104>
 8003d86:	9d03      	ldr	r5, [sp, #12]
 8003d88:	0030      	movs	r0, r6
 8003d8a:	0039      	movs	r1, r7
 8003d8c:	f7fc fa4c 	bl	8000228 <__aeabi_uidivmod>
 8003d90:	9b04      	ldr	r3, [sp, #16]
 8003d92:	3d01      	subs	r5, #1
 8003d94:	5c5b      	ldrb	r3, [r3, r1]
 8003d96:	702b      	strb	r3, [r5, #0]
 8003d98:	0033      	movs	r3, r6
 8003d9a:	0006      	movs	r6, r0
 8003d9c:	429f      	cmp	r7, r3
 8003d9e:	d9f3      	bls.n	8003d88 <_printf_i+0xec>
 8003da0:	2f08      	cmp	r7, #8
 8003da2:	d109      	bne.n	8003db8 <_printf_i+0x11c>
 8003da4:	6823      	ldr	r3, [r4, #0]
 8003da6:	07db      	lsls	r3, r3, #31
 8003da8:	d506      	bpl.n	8003db8 <_printf_i+0x11c>
 8003daa:	6862      	ldr	r2, [r4, #4]
 8003dac:	6923      	ldr	r3, [r4, #16]
 8003dae:	429a      	cmp	r2, r3
 8003db0:	dc02      	bgt.n	8003db8 <_printf_i+0x11c>
 8003db2:	2330      	movs	r3, #48	@ 0x30
 8003db4:	3d01      	subs	r5, #1
 8003db6:	702b      	strb	r3, [r5, #0]
 8003db8:	9b03      	ldr	r3, [sp, #12]
 8003dba:	1b5b      	subs	r3, r3, r5
 8003dbc:	6123      	str	r3, [r4, #16]
 8003dbe:	9b07      	ldr	r3, [sp, #28]
 8003dc0:	0021      	movs	r1, r4
 8003dc2:	9300      	str	r3, [sp, #0]
 8003dc4:	9805      	ldr	r0, [sp, #20]
 8003dc6:	9b06      	ldr	r3, [sp, #24]
 8003dc8:	aa09      	add	r2, sp, #36	@ 0x24
 8003dca:	f7ff fef7 	bl	8003bbc <_printf_common>
 8003dce:	3001      	adds	r0, #1
 8003dd0:	d148      	bne.n	8003e64 <_printf_i+0x1c8>
 8003dd2:	2001      	movs	r0, #1
 8003dd4:	4240      	negs	r0, r0
 8003dd6:	b00b      	add	sp, #44	@ 0x2c
 8003dd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003dda:	2220      	movs	r2, #32
 8003ddc:	6809      	ldr	r1, [r1, #0]
 8003dde:	430a      	orrs	r2, r1
 8003de0:	6022      	str	r2, [r4, #0]
 8003de2:	2278      	movs	r2, #120	@ 0x78
 8003de4:	4932      	ldr	r1, [pc, #200]	@ (8003eb0 <_printf_i+0x214>)
 8003de6:	9104      	str	r1, [sp, #16]
 8003de8:	0021      	movs	r1, r4
 8003dea:	3145      	adds	r1, #69	@ 0x45
 8003dec:	700a      	strb	r2, [r1, #0]
 8003dee:	6819      	ldr	r1, [r3, #0]
 8003df0:	6822      	ldr	r2, [r4, #0]
 8003df2:	c940      	ldmia	r1!, {r6}
 8003df4:	0610      	lsls	r0, r2, #24
 8003df6:	d402      	bmi.n	8003dfe <_printf_i+0x162>
 8003df8:	0650      	lsls	r0, r2, #25
 8003dfa:	d500      	bpl.n	8003dfe <_printf_i+0x162>
 8003dfc:	b2b6      	uxth	r6, r6
 8003dfe:	6019      	str	r1, [r3, #0]
 8003e00:	07d3      	lsls	r3, r2, #31
 8003e02:	d502      	bpl.n	8003e0a <_printf_i+0x16e>
 8003e04:	2320      	movs	r3, #32
 8003e06:	4313      	orrs	r3, r2
 8003e08:	6023      	str	r3, [r4, #0]
 8003e0a:	2e00      	cmp	r6, #0
 8003e0c:	d001      	beq.n	8003e12 <_printf_i+0x176>
 8003e0e:	2710      	movs	r7, #16
 8003e10:	e7aa      	b.n	8003d68 <_printf_i+0xcc>
 8003e12:	2220      	movs	r2, #32
 8003e14:	6823      	ldr	r3, [r4, #0]
 8003e16:	4393      	bics	r3, r2
 8003e18:	6023      	str	r3, [r4, #0]
 8003e1a:	e7f8      	b.n	8003e0e <_printf_i+0x172>
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	680d      	ldr	r5, [r1, #0]
 8003e20:	1d10      	adds	r0, r2, #4
 8003e22:	6949      	ldr	r1, [r1, #20]
 8003e24:	6018      	str	r0, [r3, #0]
 8003e26:	6813      	ldr	r3, [r2, #0]
 8003e28:	062e      	lsls	r6, r5, #24
 8003e2a:	d501      	bpl.n	8003e30 <_printf_i+0x194>
 8003e2c:	6019      	str	r1, [r3, #0]
 8003e2e:	e002      	b.n	8003e36 <_printf_i+0x19a>
 8003e30:	066d      	lsls	r5, r5, #25
 8003e32:	d5fb      	bpl.n	8003e2c <_printf_i+0x190>
 8003e34:	8019      	strh	r1, [r3, #0]
 8003e36:	2300      	movs	r3, #0
 8003e38:	9d03      	ldr	r5, [sp, #12]
 8003e3a:	6123      	str	r3, [r4, #16]
 8003e3c:	e7bf      	b.n	8003dbe <_printf_i+0x122>
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	1d11      	adds	r1, r2, #4
 8003e42:	6019      	str	r1, [r3, #0]
 8003e44:	6815      	ldr	r5, [r2, #0]
 8003e46:	2100      	movs	r1, #0
 8003e48:	0028      	movs	r0, r5
 8003e4a:	6862      	ldr	r2, [r4, #4]
 8003e4c:	f000 f996 	bl	800417c <memchr>
 8003e50:	2800      	cmp	r0, #0
 8003e52:	d001      	beq.n	8003e58 <_printf_i+0x1bc>
 8003e54:	1b40      	subs	r0, r0, r5
 8003e56:	6060      	str	r0, [r4, #4]
 8003e58:	6863      	ldr	r3, [r4, #4]
 8003e5a:	6123      	str	r3, [r4, #16]
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	9a03      	ldr	r2, [sp, #12]
 8003e60:	7013      	strb	r3, [r2, #0]
 8003e62:	e7ac      	b.n	8003dbe <_printf_i+0x122>
 8003e64:	002a      	movs	r2, r5
 8003e66:	6923      	ldr	r3, [r4, #16]
 8003e68:	9906      	ldr	r1, [sp, #24]
 8003e6a:	9805      	ldr	r0, [sp, #20]
 8003e6c:	9d07      	ldr	r5, [sp, #28]
 8003e6e:	47a8      	blx	r5
 8003e70:	3001      	adds	r0, #1
 8003e72:	d0ae      	beq.n	8003dd2 <_printf_i+0x136>
 8003e74:	6823      	ldr	r3, [r4, #0]
 8003e76:	079b      	lsls	r3, r3, #30
 8003e78:	d415      	bmi.n	8003ea6 <_printf_i+0x20a>
 8003e7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003e7c:	68e0      	ldr	r0, [r4, #12]
 8003e7e:	4298      	cmp	r0, r3
 8003e80:	daa9      	bge.n	8003dd6 <_printf_i+0x13a>
 8003e82:	0018      	movs	r0, r3
 8003e84:	e7a7      	b.n	8003dd6 <_printf_i+0x13a>
 8003e86:	0022      	movs	r2, r4
 8003e88:	2301      	movs	r3, #1
 8003e8a:	9906      	ldr	r1, [sp, #24]
 8003e8c:	9805      	ldr	r0, [sp, #20]
 8003e8e:	9e07      	ldr	r6, [sp, #28]
 8003e90:	3219      	adds	r2, #25
 8003e92:	47b0      	blx	r6
 8003e94:	3001      	adds	r0, #1
 8003e96:	d09c      	beq.n	8003dd2 <_printf_i+0x136>
 8003e98:	3501      	adds	r5, #1
 8003e9a:	68e3      	ldr	r3, [r4, #12]
 8003e9c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003e9e:	1a9b      	subs	r3, r3, r2
 8003ea0:	42ab      	cmp	r3, r5
 8003ea2:	dcf0      	bgt.n	8003e86 <_printf_i+0x1ea>
 8003ea4:	e7e9      	b.n	8003e7a <_printf_i+0x1de>
 8003ea6:	2500      	movs	r5, #0
 8003ea8:	e7f7      	b.n	8003e9a <_printf_i+0x1fe>
 8003eaa:	46c0      	nop			@ (mov r8, r8)
 8003eac:	08004452 	.word	0x08004452
 8003eb0:	08004463 	.word	0x08004463

08003eb4 <__sflush_r>:
 8003eb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003eb6:	220c      	movs	r2, #12
 8003eb8:	5e8b      	ldrsh	r3, [r1, r2]
 8003eba:	0005      	movs	r5, r0
 8003ebc:	000c      	movs	r4, r1
 8003ebe:	071a      	lsls	r2, r3, #28
 8003ec0:	d456      	bmi.n	8003f70 <__sflush_r+0xbc>
 8003ec2:	684a      	ldr	r2, [r1, #4]
 8003ec4:	2a00      	cmp	r2, #0
 8003ec6:	dc02      	bgt.n	8003ece <__sflush_r+0x1a>
 8003ec8:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8003eca:	2a00      	cmp	r2, #0
 8003ecc:	dd4e      	ble.n	8003f6c <__sflush_r+0xb8>
 8003ece:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8003ed0:	2f00      	cmp	r7, #0
 8003ed2:	d04b      	beq.n	8003f6c <__sflush_r+0xb8>
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	2080      	movs	r0, #128	@ 0x80
 8003ed8:	682e      	ldr	r6, [r5, #0]
 8003eda:	602a      	str	r2, [r5, #0]
 8003edc:	001a      	movs	r2, r3
 8003ede:	0140      	lsls	r0, r0, #5
 8003ee0:	6a21      	ldr	r1, [r4, #32]
 8003ee2:	4002      	ands	r2, r0
 8003ee4:	4203      	tst	r3, r0
 8003ee6:	d033      	beq.n	8003f50 <__sflush_r+0x9c>
 8003ee8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003eea:	89a3      	ldrh	r3, [r4, #12]
 8003eec:	075b      	lsls	r3, r3, #29
 8003eee:	d506      	bpl.n	8003efe <__sflush_r+0x4a>
 8003ef0:	6863      	ldr	r3, [r4, #4]
 8003ef2:	1ad2      	subs	r2, r2, r3
 8003ef4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d001      	beq.n	8003efe <__sflush_r+0x4a>
 8003efa:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003efc:	1ad2      	subs	r2, r2, r3
 8003efe:	2300      	movs	r3, #0
 8003f00:	0028      	movs	r0, r5
 8003f02:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8003f04:	6a21      	ldr	r1, [r4, #32]
 8003f06:	47b8      	blx	r7
 8003f08:	89a2      	ldrh	r2, [r4, #12]
 8003f0a:	1c43      	adds	r3, r0, #1
 8003f0c:	d106      	bne.n	8003f1c <__sflush_r+0x68>
 8003f0e:	6829      	ldr	r1, [r5, #0]
 8003f10:	291d      	cmp	r1, #29
 8003f12:	d846      	bhi.n	8003fa2 <__sflush_r+0xee>
 8003f14:	4b29      	ldr	r3, [pc, #164]	@ (8003fbc <__sflush_r+0x108>)
 8003f16:	40cb      	lsrs	r3, r1
 8003f18:	07db      	lsls	r3, r3, #31
 8003f1a:	d542      	bpl.n	8003fa2 <__sflush_r+0xee>
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	6063      	str	r3, [r4, #4]
 8003f20:	6923      	ldr	r3, [r4, #16]
 8003f22:	6023      	str	r3, [r4, #0]
 8003f24:	04d2      	lsls	r2, r2, #19
 8003f26:	d505      	bpl.n	8003f34 <__sflush_r+0x80>
 8003f28:	1c43      	adds	r3, r0, #1
 8003f2a:	d102      	bne.n	8003f32 <__sflush_r+0x7e>
 8003f2c:	682b      	ldr	r3, [r5, #0]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d100      	bne.n	8003f34 <__sflush_r+0x80>
 8003f32:	6560      	str	r0, [r4, #84]	@ 0x54
 8003f34:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003f36:	602e      	str	r6, [r5, #0]
 8003f38:	2900      	cmp	r1, #0
 8003f3a:	d017      	beq.n	8003f6c <__sflush_r+0xb8>
 8003f3c:	0023      	movs	r3, r4
 8003f3e:	3344      	adds	r3, #68	@ 0x44
 8003f40:	4299      	cmp	r1, r3
 8003f42:	d002      	beq.n	8003f4a <__sflush_r+0x96>
 8003f44:	0028      	movs	r0, r5
 8003f46:	f7ff fbf9 	bl	800373c <_free_r>
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	6363      	str	r3, [r4, #52]	@ 0x34
 8003f4e:	e00d      	b.n	8003f6c <__sflush_r+0xb8>
 8003f50:	2301      	movs	r3, #1
 8003f52:	0028      	movs	r0, r5
 8003f54:	47b8      	blx	r7
 8003f56:	0002      	movs	r2, r0
 8003f58:	1c43      	adds	r3, r0, #1
 8003f5a:	d1c6      	bne.n	8003eea <__sflush_r+0x36>
 8003f5c:	682b      	ldr	r3, [r5, #0]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d0c3      	beq.n	8003eea <__sflush_r+0x36>
 8003f62:	2b1d      	cmp	r3, #29
 8003f64:	d001      	beq.n	8003f6a <__sflush_r+0xb6>
 8003f66:	2b16      	cmp	r3, #22
 8003f68:	d11a      	bne.n	8003fa0 <__sflush_r+0xec>
 8003f6a:	602e      	str	r6, [r5, #0]
 8003f6c:	2000      	movs	r0, #0
 8003f6e:	e01e      	b.n	8003fae <__sflush_r+0xfa>
 8003f70:	690e      	ldr	r6, [r1, #16]
 8003f72:	2e00      	cmp	r6, #0
 8003f74:	d0fa      	beq.n	8003f6c <__sflush_r+0xb8>
 8003f76:	680f      	ldr	r7, [r1, #0]
 8003f78:	600e      	str	r6, [r1, #0]
 8003f7a:	1bba      	subs	r2, r7, r6
 8003f7c:	9201      	str	r2, [sp, #4]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	079b      	lsls	r3, r3, #30
 8003f82:	d100      	bne.n	8003f86 <__sflush_r+0xd2>
 8003f84:	694a      	ldr	r2, [r1, #20]
 8003f86:	60a2      	str	r2, [r4, #8]
 8003f88:	9b01      	ldr	r3, [sp, #4]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	ddee      	ble.n	8003f6c <__sflush_r+0xb8>
 8003f8e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003f90:	0032      	movs	r2, r6
 8003f92:	001f      	movs	r7, r3
 8003f94:	0028      	movs	r0, r5
 8003f96:	9b01      	ldr	r3, [sp, #4]
 8003f98:	6a21      	ldr	r1, [r4, #32]
 8003f9a:	47b8      	blx	r7
 8003f9c:	2800      	cmp	r0, #0
 8003f9e:	dc07      	bgt.n	8003fb0 <__sflush_r+0xfc>
 8003fa0:	89a2      	ldrh	r2, [r4, #12]
 8003fa2:	2340      	movs	r3, #64	@ 0x40
 8003fa4:	2001      	movs	r0, #1
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	b21b      	sxth	r3, r3
 8003faa:	81a3      	strh	r3, [r4, #12]
 8003fac:	4240      	negs	r0, r0
 8003fae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003fb0:	9b01      	ldr	r3, [sp, #4]
 8003fb2:	1836      	adds	r6, r6, r0
 8003fb4:	1a1b      	subs	r3, r3, r0
 8003fb6:	9301      	str	r3, [sp, #4]
 8003fb8:	e7e6      	b.n	8003f88 <__sflush_r+0xd4>
 8003fba:	46c0      	nop			@ (mov r8, r8)
 8003fbc:	20400001 	.word	0x20400001

08003fc0 <_fflush_r>:
 8003fc0:	690b      	ldr	r3, [r1, #16]
 8003fc2:	b570      	push	{r4, r5, r6, lr}
 8003fc4:	0005      	movs	r5, r0
 8003fc6:	000c      	movs	r4, r1
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d102      	bne.n	8003fd2 <_fflush_r+0x12>
 8003fcc:	2500      	movs	r5, #0
 8003fce:	0028      	movs	r0, r5
 8003fd0:	bd70      	pop	{r4, r5, r6, pc}
 8003fd2:	2800      	cmp	r0, #0
 8003fd4:	d004      	beq.n	8003fe0 <_fflush_r+0x20>
 8003fd6:	6a03      	ldr	r3, [r0, #32]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d101      	bne.n	8003fe0 <_fflush_r+0x20>
 8003fdc:	f7ff fa9a 	bl	8003514 <__sinit>
 8003fe0:	220c      	movs	r2, #12
 8003fe2:	5ea3      	ldrsh	r3, [r4, r2]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d0f1      	beq.n	8003fcc <_fflush_r+0xc>
 8003fe8:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003fea:	07d2      	lsls	r2, r2, #31
 8003fec:	d404      	bmi.n	8003ff8 <_fflush_r+0x38>
 8003fee:	059b      	lsls	r3, r3, #22
 8003ff0:	d402      	bmi.n	8003ff8 <_fflush_r+0x38>
 8003ff2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003ff4:	f7ff fb9f 	bl	8003736 <__retarget_lock_acquire_recursive>
 8003ff8:	0028      	movs	r0, r5
 8003ffa:	0021      	movs	r1, r4
 8003ffc:	f7ff ff5a 	bl	8003eb4 <__sflush_r>
 8004000:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004002:	0005      	movs	r5, r0
 8004004:	07db      	lsls	r3, r3, #31
 8004006:	d4e2      	bmi.n	8003fce <_fflush_r+0xe>
 8004008:	89a3      	ldrh	r3, [r4, #12]
 800400a:	059b      	lsls	r3, r3, #22
 800400c:	d4df      	bmi.n	8003fce <_fflush_r+0xe>
 800400e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004010:	f7ff fb92 	bl	8003738 <__retarget_lock_release_recursive>
 8004014:	e7db      	b.n	8003fce <_fflush_r+0xe>

08004016 <__swbuf_r>:
 8004016:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004018:	0006      	movs	r6, r0
 800401a:	000d      	movs	r5, r1
 800401c:	0014      	movs	r4, r2
 800401e:	2800      	cmp	r0, #0
 8004020:	d004      	beq.n	800402c <__swbuf_r+0x16>
 8004022:	6a03      	ldr	r3, [r0, #32]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d101      	bne.n	800402c <__swbuf_r+0x16>
 8004028:	f7ff fa74 	bl	8003514 <__sinit>
 800402c:	69a3      	ldr	r3, [r4, #24]
 800402e:	60a3      	str	r3, [r4, #8]
 8004030:	89a3      	ldrh	r3, [r4, #12]
 8004032:	071b      	lsls	r3, r3, #28
 8004034:	d502      	bpl.n	800403c <__swbuf_r+0x26>
 8004036:	6923      	ldr	r3, [r4, #16]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d109      	bne.n	8004050 <__swbuf_r+0x3a>
 800403c:	0021      	movs	r1, r4
 800403e:	0030      	movs	r0, r6
 8004040:	f000 f82c 	bl	800409c <__swsetup_r>
 8004044:	2800      	cmp	r0, #0
 8004046:	d003      	beq.n	8004050 <__swbuf_r+0x3a>
 8004048:	2501      	movs	r5, #1
 800404a:	426d      	negs	r5, r5
 800404c:	0028      	movs	r0, r5
 800404e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004050:	6923      	ldr	r3, [r4, #16]
 8004052:	6820      	ldr	r0, [r4, #0]
 8004054:	b2ef      	uxtb	r7, r5
 8004056:	1ac0      	subs	r0, r0, r3
 8004058:	6963      	ldr	r3, [r4, #20]
 800405a:	b2ed      	uxtb	r5, r5
 800405c:	4283      	cmp	r3, r0
 800405e:	dc05      	bgt.n	800406c <__swbuf_r+0x56>
 8004060:	0021      	movs	r1, r4
 8004062:	0030      	movs	r0, r6
 8004064:	f7ff ffac 	bl	8003fc0 <_fflush_r>
 8004068:	2800      	cmp	r0, #0
 800406a:	d1ed      	bne.n	8004048 <__swbuf_r+0x32>
 800406c:	68a3      	ldr	r3, [r4, #8]
 800406e:	3001      	adds	r0, #1
 8004070:	3b01      	subs	r3, #1
 8004072:	60a3      	str	r3, [r4, #8]
 8004074:	6823      	ldr	r3, [r4, #0]
 8004076:	1c5a      	adds	r2, r3, #1
 8004078:	6022      	str	r2, [r4, #0]
 800407a:	701f      	strb	r7, [r3, #0]
 800407c:	6963      	ldr	r3, [r4, #20]
 800407e:	4283      	cmp	r3, r0
 8004080:	d004      	beq.n	800408c <__swbuf_r+0x76>
 8004082:	89a3      	ldrh	r3, [r4, #12]
 8004084:	07db      	lsls	r3, r3, #31
 8004086:	d5e1      	bpl.n	800404c <__swbuf_r+0x36>
 8004088:	2d0a      	cmp	r5, #10
 800408a:	d1df      	bne.n	800404c <__swbuf_r+0x36>
 800408c:	0021      	movs	r1, r4
 800408e:	0030      	movs	r0, r6
 8004090:	f7ff ff96 	bl	8003fc0 <_fflush_r>
 8004094:	2800      	cmp	r0, #0
 8004096:	d0d9      	beq.n	800404c <__swbuf_r+0x36>
 8004098:	e7d6      	b.n	8004048 <__swbuf_r+0x32>
	...

0800409c <__swsetup_r>:
 800409c:	4b2d      	ldr	r3, [pc, #180]	@ (8004154 <__swsetup_r+0xb8>)
 800409e:	b570      	push	{r4, r5, r6, lr}
 80040a0:	0005      	movs	r5, r0
 80040a2:	6818      	ldr	r0, [r3, #0]
 80040a4:	000c      	movs	r4, r1
 80040a6:	2800      	cmp	r0, #0
 80040a8:	d004      	beq.n	80040b4 <__swsetup_r+0x18>
 80040aa:	6a03      	ldr	r3, [r0, #32]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d101      	bne.n	80040b4 <__swsetup_r+0x18>
 80040b0:	f7ff fa30 	bl	8003514 <__sinit>
 80040b4:	220c      	movs	r2, #12
 80040b6:	5ea3      	ldrsh	r3, [r4, r2]
 80040b8:	071a      	lsls	r2, r3, #28
 80040ba:	d423      	bmi.n	8004104 <__swsetup_r+0x68>
 80040bc:	06da      	lsls	r2, r3, #27
 80040be:	d407      	bmi.n	80040d0 <__swsetup_r+0x34>
 80040c0:	2209      	movs	r2, #9
 80040c2:	602a      	str	r2, [r5, #0]
 80040c4:	2240      	movs	r2, #64	@ 0x40
 80040c6:	2001      	movs	r0, #1
 80040c8:	4313      	orrs	r3, r2
 80040ca:	81a3      	strh	r3, [r4, #12]
 80040cc:	4240      	negs	r0, r0
 80040ce:	e03a      	b.n	8004146 <__swsetup_r+0xaa>
 80040d0:	075b      	lsls	r3, r3, #29
 80040d2:	d513      	bpl.n	80040fc <__swsetup_r+0x60>
 80040d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80040d6:	2900      	cmp	r1, #0
 80040d8:	d008      	beq.n	80040ec <__swsetup_r+0x50>
 80040da:	0023      	movs	r3, r4
 80040dc:	3344      	adds	r3, #68	@ 0x44
 80040de:	4299      	cmp	r1, r3
 80040e0:	d002      	beq.n	80040e8 <__swsetup_r+0x4c>
 80040e2:	0028      	movs	r0, r5
 80040e4:	f7ff fb2a 	bl	800373c <_free_r>
 80040e8:	2300      	movs	r3, #0
 80040ea:	6363      	str	r3, [r4, #52]	@ 0x34
 80040ec:	2224      	movs	r2, #36	@ 0x24
 80040ee:	89a3      	ldrh	r3, [r4, #12]
 80040f0:	4393      	bics	r3, r2
 80040f2:	81a3      	strh	r3, [r4, #12]
 80040f4:	2300      	movs	r3, #0
 80040f6:	6063      	str	r3, [r4, #4]
 80040f8:	6923      	ldr	r3, [r4, #16]
 80040fa:	6023      	str	r3, [r4, #0]
 80040fc:	2308      	movs	r3, #8
 80040fe:	89a2      	ldrh	r2, [r4, #12]
 8004100:	4313      	orrs	r3, r2
 8004102:	81a3      	strh	r3, [r4, #12]
 8004104:	6923      	ldr	r3, [r4, #16]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d10b      	bne.n	8004122 <__swsetup_r+0x86>
 800410a:	21a0      	movs	r1, #160	@ 0xa0
 800410c:	2280      	movs	r2, #128	@ 0x80
 800410e:	89a3      	ldrh	r3, [r4, #12]
 8004110:	0089      	lsls	r1, r1, #2
 8004112:	0092      	lsls	r2, r2, #2
 8004114:	400b      	ands	r3, r1
 8004116:	4293      	cmp	r3, r2
 8004118:	d003      	beq.n	8004122 <__swsetup_r+0x86>
 800411a:	0021      	movs	r1, r4
 800411c:	0028      	movs	r0, r5
 800411e:	f000 f863 	bl	80041e8 <__smakebuf_r>
 8004122:	220c      	movs	r2, #12
 8004124:	5ea3      	ldrsh	r3, [r4, r2]
 8004126:	2101      	movs	r1, #1
 8004128:	001a      	movs	r2, r3
 800412a:	400a      	ands	r2, r1
 800412c:	420b      	tst	r3, r1
 800412e:	d00b      	beq.n	8004148 <__swsetup_r+0xac>
 8004130:	2200      	movs	r2, #0
 8004132:	60a2      	str	r2, [r4, #8]
 8004134:	6962      	ldr	r2, [r4, #20]
 8004136:	4252      	negs	r2, r2
 8004138:	61a2      	str	r2, [r4, #24]
 800413a:	2000      	movs	r0, #0
 800413c:	6922      	ldr	r2, [r4, #16]
 800413e:	4282      	cmp	r2, r0
 8004140:	d101      	bne.n	8004146 <__swsetup_r+0xaa>
 8004142:	061a      	lsls	r2, r3, #24
 8004144:	d4be      	bmi.n	80040c4 <__swsetup_r+0x28>
 8004146:	bd70      	pop	{r4, r5, r6, pc}
 8004148:	0799      	lsls	r1, r3, #30
 800414a:	d400      	bmi.n	800414e <__swsetup_r+0xb2>
 800414c:	6962      	ldr	r2, [r4, #20]
 800414e:	60a2      	str	r2, [r4, #8]
 8004150:	e7f3      	b.n	800413a <__swsetup_r+0x9e>
 8004152:	46c0      	nop			@ (mov r8, r8)
 8004154:	20000024 	.word	0x20000024

08004158 <_sbrk_r>:
 8004158:	2300      	movs	r3, #0
 800415a:	b570      	push	{r4, r5, r6, lr}
 800415c:	4d06      	ldr	r5, [pc, #24]	@ (8004178 <_sbrk_r+0x20>)
 800415e:	0004      	movs	r4, r0
 8004160:	0008      	movs	r0, r1
 8004162:	602b      	str	r3, [r5, #0]
 8004164:	f7fc fc26 	bl	80009b4 <_sbrk>
 8004168:	1c43      	adds	r3, r0, #1
 800416a:	d103      	bne.n	8004174 <_sbrk_r+0x1c>
 800416c:	682b      	ldr	r3, [r5, #0]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d000      	beq.n	8004174 <_sbrk_r+0x1c>
 8004172:	6023      	str	r3, [r4, #0]
 8004174:	bd70      	pop	{r4, r5, r6, pc}
 8004176:	46c0      	nop			@ (mov r8, r8)
 8004178:	200004b4 	.word	0x200004b4

0800417c <memchr>:
 800417c:	b2c9      	uxtb	r1, r1
 800417e:	1882      	adds	r2, r0, r2
 8004180:	4290      	cmp	r0, r2
 8004182:	d101      	bne.n	8004188 <memchr+0xc>
 8004184:	2000      	movs	r0, #0
 8004186:	4770      	bx	lr
 8004188:	7803      	ldrb	r3, [r0, #0]
 800418a:	428b      	cmp	r3, r1
 800418c:	d0fb      	beq.n	8004186 <memchr+0xa>
 800418e:	3001      	adds	r0, #1
 8004190:	e7f6      	b.n	8004180 <memchr+0x4>
	...

08004194 <__swhatbuf_r>:
 8004194:	b570      	push	{r4, r5, r6, lr}
 8004196:	000e      	movs	r6, r1
 8004198:	001d      	movs	r5, r3
 800419a:	230e      	movs	r3, #14
 800419c:	5ec9      	ldrsh	r1, [r1, r3]
 800419e:	0014      	movs	r4, r2
 80041a0:	b096      	sub	sp, #88	@ 0x58
 80041a2:	2900      	cmp	r1, #0
 80041a4:	da0c      	bge.n	80041c0 <__swhatbuf_r+0x2c>
 80041a6:	89b2      	ldrh	r2, [r6, #12]
 80041a8:	2380      	movs	r3, #128	@ 0x80
 80041aa:	0011      	movs	r1, r2
 80041ac:	4019      	ands	r1, r3
 80041ae:	421a      	tst	r2, r3
 80041b0:	d114      	bne.n	80041dc <__swhatbuf_r+0x48>
 80041b2:	2380      	movs	r3, #128	@ 0x80
 80041b4:	00db      	lsls	r3, r3, #3
 80041b6:	2000      	movs	r0, #0
 80041b8:	6029      	str	r1, [r5, #0]
 80041ba:	6023      	str	r3, [r4, #0]
 80041bc:	b016      	add	sp, #88	@ 0x58
 80041be:	bd70      	pop	{r4, r5, r6, pc}
 80041c0:	466a      	mov	r2, sp
 80041c2:	f000 f853 	bl	800426c <_fstat_r>
 80041c6:	2800      	cmp	r0, #0
 80041c8:	dbed      	blt.n	80041a6 <__swhatbuf_r+0x12>
 80041ca:	23f0      	movs	r3, #240	@ 0xf0
 80041cc:	9901      	ldr	r1, [sp, #4]
 80041ce:	021b      	lsls	r3, r3, #8
 80041d0:	4019      	ands	r1, r3
 80041d2:	4b04      	ldr	r3, [pc, #16]	@ (80041e4 <__swhatbuf_r+0x50>)
 80041d4:	18c9      	adds	r1, r1, r3
 80041d6:	424b      	negs	r3, r1
 80041d8:	4159      	adcs	r1, r3
 80041da:	e7ea      	b.n	80041b2 <__swhatbuf_r+0x1e>
 80041dc:	2100      	movs	r1, #0
 80041de:	2340      	movs	r3, #64	@ 0x40
 80041e0:	e7e9      	b.n	80041b6 <__swhatbuf_r+0x22>
 80041e2:	46c0      	nop			@ (mov r8, r8)
 80041e4:	ffffe000 	.word	0xffffe000

080041e8 <__smakebuf_r>:
 80041e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041ea:	2602      	movs	r6, #2
 80041ec:	898b      	ldrh	r3, [r1, #12]
 80041ee:	0005      	movs	r5, r0
 80041f0:	000c      	movs	r4, r1
 80041f2:	b085      	sub	sp, #20
 80041f4:	4233      	tst	r3, r6
 80041f6:	d007      	beq.n	8004208 <__smakebuf_r+0x20>
 80041f8:	0023      	movs	r3, r4
 80041fa:	3347      	adds	r3, #71	@ 0x47
 80041fc:	6023      	str	r3, [r4, #0]
 80041fe:	6123      	str	r3, [r4, #16]
 8004200:	2301      	movs	r3, #1
 8004202:	6163      	str	r3, [r4, #20]
 8004204:	b005      	add	sp, #20
 8004206:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004208:	ab03      	add	r3, sp, #12
 800420a:	aa02      	add	r2, sp, #8
 800420c:	f7ff ffc2 	bl	8004194 <__swhatbuf_r>
 8004210:	9f02      	ldr	r7, [sp, #8]
 8004212:	9001      	str	r0, [sp, #4]
 8004214:	0039      	movs	r1, r7
 8004216:	0028      	movs	r0, r5
 8004218:	f7ff fafc 	bl	8003814 <_malloc_r>
 800421c:	2800      	cmp	r0, #0
 800421e:	d108      	bne.n	8004232 <__smakebuf_r+0x4a>
 8004220:	220c      	movs	r2, #12
 8004222:	5ea3      	ldrsh	r3, [r4, r2]
 8004224:	059a      	lsls	r2, r3, #22
 8004226:	d4ed      	bmi.n	8004204 <__smakebuf_r+0x1c>
 8004228:	2203      	movs	r2, #3
 800422a:	4393      	bics	r3, r2
 800422c:	431e      	orrs	r6, r3
 800422e:	81a6      	strh	r6, [r4, #12]
 8004230:	e7e2      	b.n	80041f8 <__smakebuf_r+0x10>
 8004232:	2380      	movs	r3, #128	@ 0x80
 8004234:	89a2      	ldrh	r2, [r4, #12]
 8004236:	6020      	str	r0, [r4, #0]
 8004238:	4313      	orrs	r3, r2
 800423a:	81a3      	strh	r3, [r4, #12]
 800423c:	9b03      	ldr	r3, [sp, #12]
 800423e:	6120      	str	r0, [r4, #16]
 8004240:	6167      	str	r7, [r4, #20]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d00c      	beq.n	8004260 <__smakebuf_r+0x78>
 8004246:	0028      	movs	r0, r5
 8004248:	230e      	movs	r3, #14
 800424a:	5ee1      	ldrsh	r1, [r4, r3]
 800424c:	f000 f820 	bl	8004290 <_isatty_r>
 8004250:	2800      	cmp	r0, #0
 8004252:	d005      	beq.n	8004260 <__smakebuf_r+0x78>
 8004254:	2303      	movs	r3, #3
 8004256:	89a2      	ldrh	r2, [r4, #12]
 8004258:	439a      	bics	r2, r3
 800425a:	3b02      	subs	r3, #2
 800425c:	4313      	orrs	r3, r2
 800425e:	81a3      	strh	r3, [r4, #12]
 8004260:	89a3      	ldrh	r3, [r4, #12]
 8004262:	9a01      	ldr	r2, [sp, #4]
 8004264:	4313      	orrs	r3, r2
 8004266:	81a3      	strh	r3, [r4, #12]
 8004268:	e7cc      	b.n	8004204 <__smakebuf_r+0x1c>
	...

0800426c <_fstat_r>:
 800426c:	2300      	movs	r3, #0
 800426e:	b570      	push	{r4, r5, r6, lr}
 8004270:	4d06      	ldr	r5, [pc, #24]	@ (800428c <_fstat_r+0x20>)
 8004272:	0004      	movs	r4, r0
 8004274:	0008      	movs	r0, r1
 8004276:	0011      	movs	r1, r2
 8004278:	602b      	str	r3, [r5, #0]
 800427a:	f7fc fb78 	bl	800096e <_fstat>
 800427e:	1c43      	adds	r3, r0, #1
 8004280:	d103      	bne.n	800428a <_fstat_r+0x1e>
 8004282:	682b      	ldr	r3, [r5, #0]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d000      	beq.n	800428a <_fstat_r+0x1e>
 8004288:	6023      	str	r3, [r4, #0]
 800428a:	bd70      	pop	{r4, r5, r6, pc}
 800428c:	200004b4 	.word	0x200004b4

08004290 <_isatty_r>:
 8004290:	2300      	movs	r3, #0
 8004292:	b570      	push	{r4, r5, r6, lr}
 8004294:	4d06      	ldr	r5, [pc, #24]	@ (80042b0 <_isatty_r+0x20>)
 8004296:	0004      	movs	r4, r0
 8004298:	0008      	movs	r0, r1
 800429a:	602b      	str	r3, [r5, #0]
 800429c:	f7fc fb75 	bl	800098a <_isatty>
 80042a0:	1c43      	adds	r3, r0, #1
 80042a2:	d103      	bne.n	80042ac <_isatty_r+0x1c>
 80042a4:	682b      	ldr	r3, [r5, #0]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d000      	beq.n	80042ac <_isatty_r+0x1c>
 80042aa:	6023      	str	r3, [r4, #0]
 80042ac:	bd70      	pop	{r4, r5, r6, pc}
 80042ae:	46c0      	nop			@ (mov r8, r8)
 80042b0:	200004b4 	.word	0x200004b4

080042b4 <_init>:
 80042b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042b6:	46c0      	nop			@ (mov r8, r8)
 80042b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042ba:	bc08      	pop	{r3}
 80042bc:	469e      	mov	lr, r3
 80042be:	4770      	bx	lr

080042c0 <_fini>:
 80042c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042c2:	46c0      	nop			@ (mov r8, r8)
 80042c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042c6:	bc08      	pop	{r3}
 80042c8:	469e      	mov	lr, r3
 80042ca:	4770      	bx	lr
